<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue 总结</title>
      <link href="/2021/07/26/vue-zong-jie/"/>
      <url>/2021/07/26/vue-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么会选vue而不选择其它的框架？"><a href="#为什么会选vue而不选择其它的框架？" class="headerlink" title="为什么会选vue而不选择其它的框架？"></a>为什么会选vue而不选择其它的框架？</h4><p>Vue.js是一个轻巧、高性能、可组件化的MVVM库，同时拥有非常容易上手的API；vue是单页面应用，使页面局部刷新，不用每次跳转页面都要请求所有数据和dom，这样大大加快了访问速度和提升用户体验。而且他的第三方ui库很多节省开发时间。</p>]]></content>
      
      
      <categories>
          
          <category> 前端++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>画一条0.5px的线 </title>
      <link href="/2021/07/26/hua-yi-tiao-0-5px-de-xian/"/>
      <url>/2021/07/26/hua-yi-tiao-0-5px-de-xian/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_37820215/article/details/107212531" target="_blank" rel="noopener">原文</a></p><p>1、直接设置0.5px，在不同的浏览器会有差异（ 不同系统的不同浏览器对小数点的px有不同的处理）</p><pre class="line-numbers language-html"><code class="language-html">//画一条0.5px的线<span class="token doctype">&lt;!DOCType html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.half-px</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0.5</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>half-px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、设置成1px，然后使用缩放功能</p><pre class="line-numbers language-html"><code class="language-html">//画一条0.5px的线<span class="token doctype">&lt;!DOCType html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.half-px</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>half-px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、采用meta viewport的方式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width,initial-sacle=0.5"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//width=device-width表示将viewport视窗的宽度调整为设备的宽度，这个宽度通常是指物理上宽度。</span><span class="token comment" spellcheck="true">//缩放到原来的0.5倍，如果是1px那么就会变成0.5px</span><span class="token comment" spellcheck="true">//viewport只针对于移动端，只在移动端上才能看到效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、canvas/svg方式画一条0.5px的线</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> canvas画布方式 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"drawing"</span> width<span class="token operator">=</span><span class="token string">" 200"</span> height<span class="token operator">=</span><span class="token string">"200"</span><span class="token operator">></span>A drawing <span class="token keyword">of</span> something<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> svg方式 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>svg id<span class="token operator">=</span><span class="token string">"svgLineTutorial"</span>  height<span class="token operator">=</span><span class="token string">"200px"</span> width<span class="token operator">=</span><span class="token string">"200px"</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/2000/svg"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>line x1<span class="token operator">=</span><span class="token string">"50"</span> y1<span class="token operator">=</span><span class="token string">"50"</span> x2<span class="token operator">=</span><span class="token string">"200"</span> y2<span class="token operator">=</span><span class="token string">"200"</span> style<span class="token operator">=</span><span class="token string">"stroke:Green;stroke-width:0.5"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"drawing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       context<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>      context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5调用手机拍照功能</title>
      <link href="/2021/07/26/h5-diao-yong-shou-ji-pai-zhao-gong-neng/"/>
      <url>/2021/07/26/h5-diao-yong-shou-ji-pai-zhao-gong-neng/</url>
      
        <content type="html"><![CDATA[<h4 id="H5调用手机拍照功能"><a href="#H5调用手机拍照功能" class="headerlink" title="H5调用手机拍照功能"></a>H5调用手机拍照功能</h4><p>1、自定义input操作</p><pre><code>/** * @param accept * @param attributes * @returns {Promise&lt;File&gt;} */function webChooseFile (accept = &#39;*&#39;, attributes = {}) {  console.log(&#39;[media::webChooseFile] Start choosing file, accept &#39; + accept)  return new Promise((resolve, reject) =&gt; {    const uniqueName = `__fileInputElement_${Date.now()}`    // 如果不挂在 window 上，这个函数执行完就会被 GC，无法进入 onchange    const inputElement = window[uniqueName] = document.createElement(&#39;input&#39;)    inputElement.type = &#39;file&#39;    inputElement.accept = accept    Object.keys(attributes).forEach(key =&gt; {      inputElement.setAttribute(key, attributes[key])    })    console.log(&#39;[media::webChooseFile] File input &#39; + uniqueName + &#39; created, accept &#39; + inputElement.getAttribute(&#39;accept&#39;))    inputElement.onchange = () =&gt; {      console.log(&#39;[media::webChooseFile] Onchange triggered on &#39; + uniqueName + &#39; with files&#39;, inputElement.files)      delete window[uniqueName]      if (!inputElement.files.length) reject(new Error(&#39;Choose file failed.&#39;))      resolve(inputElement.files[0])    }    console.log(&#39;[media::webChooseFile] Opening file input &#39; + uniqueName)    inputElement.click()  })}</code></pre><p>1、相关调用情况</p><pre><code>/** * @returns {Promise&lt;File&gt;} */// 拍照export function takePhoto () {  return webChooseFile(&#39;image/*&#39;, {capture: &#39;camera&#39;})}/** * @returns {Promise&lt;File&gt;} */// 录像export function recordVideo () {  return webChooseFile(&#39;video/*&#39;, {capture: &#39;camcorder&#39;})}// 选择相册图片export function choosePhotoFromAlbum () {  return webChooseFile(&#39;image/*&#39;)}// 选择相册视频export function chooseVideoFromAlbum () {  return webChooseFile(&#39;video/*&#39;)}</code></pre><h4 id="input标签capture属性不为人知的秘密"><a href="#input标签capture属性不为人知的秘密" class="headerlink" title="input标签capture属性不为人知的秘密"></a>input标签capture属性不为人知的秘密</h4><p>HTML5官方文档解释：capture属性用于调用设备的摄像头或麦克风。<br>当accept=”audio/<em>或video/</em>”时capture只有两种值，一种是user，用于调用面向人脸的摄像头(例如手机前置摄像头)，一种是environment，用于调用环境摄像头(例如手机后置摄像头)。<br>当accept=”audio”时，只要有capture就调用设备麦克风，忽略user和environment值。<br>至于网上提到的camera和filesystem，官方没提。<br>官方文档：<a href="http://www.w3.org/TR/2018/REC-html-media-capture-20180201/" target="_blank" rel="noopener">www.w3.org/TR/2018/REC-html-media-capture-20180201/</a></p><p>iOS最遵守遵守HTML5规范，其次是X5内核，安卓的webview基本忽略了capture。<br>理想情况下应该按照如下开发webview：</p><ol><li>当accept=”image/*”时，capture=”user”调用前置照相机，capture=”其他值”，调用后置照相机</li><li>当accept=”video/*”时，capture=”user”调用前置录像机，capture=”其他值”，调用后置录像机</li><li>当accept=”image/<em>,video/</em>”，capture=”user”调用前置摄像头，capture=”其他值”，调用后置摄像头，默认照相，可切换录像</li><li>当accept=”audio/*”时，capture=”放空或者任意值”，调用录音机</li><li>当input没有capture时，根据accppt类型给出文件夹选项以及摄像头或者录音机选项</li><li>input含有multiple时访问文件夹可勾选多文件，调用系统摄像头或者录音机都只是单文件</li><li>无multiple时都只能单文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS-webview-dsbridge</title>
      <link href="/2021/07/26/ios-webview-dsbridge/"/>
      <url>/2021/07/26/ios-webview-dsbridge/</url>
      
        <content type="html"><![CDATA[<h4 id="1、IOS-webView-dsbridge"><a href="#1、IOS-webView-dsbridge" class="headerlink" title="1、IOS-webView-dsbridge"></a>1、IOS-webView-dsbridge</h4><p>核心代码 dsbridge中使用 dwebview:</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">@implementation ViewController- (void)viewDidLoad {     [super viewDidLoad];    CGRect bounds=self.view.bounds;    DWKWebView * dwebview=[[DWKWebView alloc] initWithFrame:CGRectMake(0, 25, bounds.size.width, bounds.size.height-25)];    [self.view addSubview:dwebview];    // register api object without namespace， 在此文件中调用IOS操作    [dwebview addJavascriptObject:[[JsApiTest alloc] init] namespace:nil];    // register api object without namespace    [dwebview addJavascriptObject:[[ JsApiTestSwift alloc] init] namespace:@"swift"];    // register api object with namespace "echo"    [dwebview addJavascriptObject:[[JsEchoApi alloc] init] namespace:@"echo"];    // open debug mode, Release mode should disable this.    [dwebview setDebugMode:true];    [dwebview customJavascriptDialogLabelTitles:@{@"alertTitle":@"Notification",@"alertBtn":@"OK"}];    dwebview.navigationDelegate=self;    // 设置访问的URL    NSURL *url = [NSURL URLWithString:@"https://www.baidu.com/"];    // 根据URL创建请求    NSURLRequest *request = [NSURLRequest requestWithURL:url];    // WKWebView加载请求    [dwebview loadRequest:request];    // // 访问本地 html    // NSString *path = [[NSBundle mainBundle] bundlePath];    // NSURL *baseURL = [NSURL fileURLWithPath:path];    // NSString * htmlPath = [[NSBundle mainBundle] pathForResource:@"test"    //                                                       ofType:@"html"];    // NSString * htmlContent = [NSString stringWithContentsOfFile:htmlPath    //                                                 encoding:NSUTF8StringEncoding    //                                                    error:nil];    // [dwebview loadHTMLString:htmlContent baseURL:baseURL];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、js调用-IOS-部分操作"><a href="#2、js调用-IOS-部分操作" class="headerlink" title="2、js调用 IOS 部分操作"></a>2、js调用 IOS 部分操作</h4><p>1、全局判断内容</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">- (void) testAsyn:(NSString *) msg :(JSCallback) completionHandler{    NSLog(@"消息信息 %@", msg);    if ([msg isEqualToString:@"getLocation"]) {        if(self->currentDetailLocationInfomation){            completionHandler([msg stringByAppendingString:self->currentDetailLocationInfomation],YES);        } else {            [self getLocation];        }    }    if ([msg isEqualToString:@"getVersion"]) {        NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];        NSString *app_Version = [infoDictionary objectForKey:@"CFBundleShortVersionString"];        NSLog(@"value for %@", app_Version);        if(app_Version){            completionHandler([msg stringByAppendingString:app_Version],YES);        }    }    if ([msg isEqualToString:@"exitApp"]) {        //  退出app 的操作        [self exitApplication];    }    if([msg hasPrefix:@"updateApp"]){        NSArray *aArray = [msg componentsSeparatedByString:@","];        NSLog(@"updateApp数组 %@", aArray[1]);        self->appStoreUrl = aArray[1];        //  退出app 的操作        [self opeAppStore];    }    if ([msg isEqualToString:@"recording"]) {        // 开始录音        [self startRecord];    }    if ([msg isEqualToString:@"stopRecording"]) {        if ([self.audioRecorder isRecording]) {            NSLog(@"完成");            [self destoryTimer];            [self.audioRecorder stop];        }        #if ENCODE_MP3            [ConvertAudioFile conventToMp3WithCafFilePath:self.cafPath                                              mp3FilePath:self.mp3Path                                               sampleRate:ETRECORD_RATE                                                 callback:^(BOOL result) {                NSLog(@"转码结果 ------ %d %@", result,self.mp3Path);                if (self.mp3Path) {                    self->currentBase64str = [self recordmp3ToBASE64];                    NSLog(@"上传进度-----   %@ ", self->currentBase64str);                    long long fileSize = [self fileSizeAtPath:self.mp3Path];                    NSString *fileSizeStr = [NSString stringWithFormat:@"%lld",fileSize];                    if (fileSizeStr) {                        NSLog(@"value for %@ is %@", self.mp3Path, fileSizeStr);                    }                    else {                        NSLog(@"error getting size for url %@ error was", self.mp3Path);                    }                    completionHandler([msg stringByAppendingString: self->currentBase64str],YES);                }            }];        #endif    }    if ([msg isEqualToString:@"playRecording"]) {        // 播放录音        [self playVoice];    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、定位操作</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">-(NSString *)getLocation{    NSLog(@"准备定位");//当前国家    if ([CLLocationManager locationServicesEnabled]) {        NSLog(@"定位了");//当前国家        locationmanager = [[CLLocationManager alloc]init];        locationmanager.delegate = self;        [locationmanager requestAlwaysAuthorization];        currentCity = [NSString new];        [locationmanager requestWhenInUseAuthorization];        //设置寻址精度        locationmanager.desiredAccuracy = kCLLocationAccuracyBest;        locationmanager.distanceFilter = 5.0;        [locationmanager startUpdatingLocation];    }    return @"";}#pragma mark CoreLocation delegate (定位失败)//定位失败后调用此代理方法-(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error{    //设置提示提醒用户打开定位服务    NSLog(@"打印当前的经度与纬度错误");    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"允许定位提示" message:@"请在设置中打开定位" preferredStyle:UIAlertControllerStyleAlert];    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"打开定位" style:UIAlertActionStyleDefault handler:nil];    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];    [alert addAction:okAction];    [alert addAction:cancelAction];}#pragma mark 定位成功后则执行此代理方法-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray<CLLocation *> *)locations{    NSLog(@"打印当前的经度与纬度");    [locationmanager stopUpdatingHeading];    //旧址    CLLocation *currentLocation = [locations lastObject];    CLGeocoder *geoCoder = [[CLGeocoder alloc]init];    //打印当前的经度与纬度    NSLog(@"%f,%f",currentLocation.coordinate.latitude,currentLocation.coordinate.longitude);    // 强制 成 简体中文    [[NSUserDefaults      standardUserDefaults] setObject:[NSArray arrayWithObjects:@"zh-hans",                                       nil] forKey:@"AppleLanguages"];    //反地理编码    [geoCoder reverseGeocodeLocation:currentLocation completionHandler:^(NSArray<CLPlacemark *> * _Nullable placemarks, NSError * _Nullable error) {        if (placemarks.count > 0) {            CLPlacemark *placeMark = placemarks[0];            self->currentCity = placeMark.locality;            if (!self->currentCity) {                self->currentCity = @"无法定位当前城市";            }            self->currentDetailLocationInfomation = [NSString stringWithFormat:@"%f,%f,%@,%@,%@,%@",                                                     currentLocation.coordinate.longitude,                                                     currentLocation.coordinate.latitude,                                                     placeMark.subLocality,                                                     placeMark.thoroughfare,                                                     placeMark.name,                                                     placeMark.country];            NSLog(@"%@", self->currentDetailLocationInfomation);            NSLog(@"Einde");            [self->locationmanager stopUpdatingLocation];        }    }];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、 获取app版本</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">- (void)getVersion {    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];    NSString *app_Version = [infoDictionary objectForKey:@"CFBundleShortVersionString"];    NSLog(@"value for %@", app_Version);    self->currentVersion = [NSString stringWithFormat:@"%@",app_Version];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、退出app</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">- (void)exitApplication {    UIWindow *window = [UIApplication sharedApplication].keyWindow;    [UIView animateWithDuration:0.5f animations:^{        window.alpha = 0;        window.frame = CGRectMake(0, window.bounds.size.height / 2, window.bounds.size.width, 0.5);    } completion:^(BOOL finished) {        exit(0);    }];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、 跳转苹果商店更新</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">- (void)opeAppStore {    NSString *itunesUrl = self->appStoreUrl;    ///WKWebview 的load和直接openUrl 都是可以打开这个连接跳转App Store的    [[UIApplication sharedApplication] openURL:[NSURL URLWithString: itunesUrl]];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- 6、 录音操作```js/** *  获得录音机对象 * *  @return 录音机对象 */- (AVAudioRecorder *)audioRecorder{    if (!_audioRecorder) {        //7.0第一次运行会提示，是否允许使用麦克风        AVAudioSession *session = [AVAudioSession sharedInstance];        NSError *sessionError;        NSLog(@"开始录制");        if (@available(iOS 10.0, *)) {            [session setCategory:AVAudioSessionCategoryPlayAndRecord                            mode:AVAudioSessionModeDefault                         options:AVAudioSessionCategoryOptionDefaultToSpeaker                           error:&sessionError];        } else {            [session setCategory:AVAudioSessionCategoryPlayAndRecord withOptions:AVAudioSessionCategoryOptionAllowBluetooth error:&sessionError];            // Fallback on earlier versions        }        if(session == nil)            NSLog(@"Error creating session: %@", [sessionError description]);        else            [session setActive:YES error:nil];        //创建录音文件保存路径        NSURL *url= [self getSavePath];        //创建录音格式设置        NSDictionary *setting = [self getAudioSetting];        //创建录音机        NSError *error=nil;        _audioRecorder = [[AVAudioRecorder alloc]initWithURL:url settings:setting error:&error];        _audioRecorder.delegate=self;        _audioRecorder.meteringEnabled=YES;//如果要监控声波则必须设置为YES        [_audioRecorder prepareToRecord];        if (error) {            NSLog(@"创建录音机对象时发生错误，错误信息：%@",error.localizedDescription);            return nil;        }    }    return _audioRecorder;}/** *  取得录音文件设置 * *  @return 录音设置 */- (NSDictionary *)getAudioSetting{    NSMutableDictionary *dicM = [NSMutableDictionary dictionary];    [dicM setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];    [dicM setObject:@(ETRECORD_RATE) forKey:AVSampleRateKey];    [dicM setObject:@(2) forKey:AVNumberOfChannelsKey];    [dicM setObject:@(16) forKey:AVLinearPCMBitDepthKey];    [dicM setObject:[NSNumber numberWithInt:AVAudioQualityMin] forKey:AVEncoderAudioQualityKey];    return dicM;}/** *  取得录音文件保存路径 * *  @return 录音文件路径 */-(NSURL *)getSavePath{    //  在Documents目录下创建一个名为FileData的文件夹    NSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)lastObject] stringByAppendingPathComponent:@"AudioData"];    NSLog(@"%@",path);    NSFileManager *fileManager = [NSFileManager defaultManager];    BOOL isDir = FALSE;    BOOL isDirExist = [fileManager fileExistsAtPath:path isDirectory:&isDir];    if(!(isDirExist && isDir))    {        BOOL bCreateDir = [fileManager createDirectoryAtPath:path withIntermediateDirectories:YES attributes:nil error:nil];        if(!bCreateDir){            NSLog(@"创建文件夹失败！");        }        NSLog(@"创建文件夹成功，文件路径%@",path);    }    NSString *fileName = @"record";    NSString *cafFileName = [NSString stringWithFormat:@"%@.caf", fileName];    NSString *mp3FileName = [NSString stringWithFormat:@"%@.mp3", fileName];    NSString *cafPath = [path stringByAppendingPathComponent:cafFileName];    NSString *mp3Path = [path stringByAppendingPathComponent:mp3FileName];    self.mp3Path = mp3Path;    self.cafPath = cafPath;    NSLog(@"file path:%@",cafPath);    NSURL *url=[NSURL fileURLWithPath:cafPath];    return url;}- (void)cleanCafFile {    if (isValidString(self.cafPath)) {        NSFileManager *fileManager = [NSFileManager defaultManager];        BOOL isDir = FALSE;        BOOL isDirExist = [fileManager fileExistsAtPath:self.cafPath isDirectory:&isDir];        NSLog(@"isDirExist   already delete：%d",isDirExist);        if (isDirExist) {            [fileManager removeItemAtPath:self.cafPath error:nil];            NSLog(@"  xxx.caf  file   already delete");        }    }}- (void)cleanMp3File {    if (isValidString(self.mp3Path)) {        NSFileManager *fileManager = [NSFileManager defaultManager];        BOOL isDir = FALSE;        BOOL isDirExist = [fileManager fileExistsAtPath:self.mp3Path isDirectory:&isDir];        NSLog(@"isDirExist   already delete：%d",isDirExist);        if (isDirExist) {            [fileManager removeItemAtPath:self.mp3Path error:nil];            NSLog(@"  xxx.mp3  file   already delete");        }    }}- (void)convertMp3 {    [[ConvertAudioFile sharedInstance] conventToMp3WithCafFilePath:self.cafPath                                                       mp3FilePath:self.mp3Path                                                        sampleRate:ETRECORD_RATE                                                          callback:^(BOOL result)    {         if (result) {             NSLog(@"---- 转码完成  --- result %d  ---- ", result);         }    }];    self->currentBase64str = [self recordmp3ToBASE64];    NSLog(@"上传进度-----   %@ ", self->currentBase64str);}``````js- (void)startRecord {    // 重置录音机    if (_audioRecorder) {        NSLog(@"重置录音内容");        [self cleanMp3File];        [self cleanCafFile];        _audioRecorder = nil;        time = 0;        [self destoryTimer];        self.cafPath = @"";        self.mp3Path = @"";    }    if (![self.audioRecorder isRecording]) {        [self cleanMp3File];        [self cleanCafFile];        _audioRecorder = nil;        time = 0;        [self destoryTimer];        self.cafPath = @"";        self.mp3Path = @"";        AVAudioSession *session = [AVAudioSession sharedInstance];        NSError *sessionError;        if (@available(iOS 10.0, *)) {            [session setCategory:AVAudioSessionCategoryPlayAndRecord                            mode:AVAudioSessionModeDefault                         options:AVAudioSessionCategoryOptionDefaultToSpeaker                           error:&sessionError];        } else {            [session setCategory:AVAudioSessionCategoryPlayAndRecord withOptions:AVAudioSessionCategoryOptionAllowBluetooth error:&sessionError];            // Fallback on earlier versions        }        if(session == nil)            NSLog(@"Error creating session: %@", [sessionError description]);        else            [session setActive:YES error:nil];        self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0                                                      target:self                                                    selector:@selector(record)                                                    userInfo:nil                                                     repeats:YES];        [self.audioRecorder record];         NSLog(@"录音开始");    } else {        NSLog(@"is  recording now  ....");    }}-(NSString *)recordmp3ToBASE64; // mp3格式 base64转码{    NSData *mp3Data = [[NSData dataWithContentsOfFile:self.mp3Path] base64EncodedDataWithOptions:0];    NSString * encodedRecordStr = [[NSString alloc]initWithData:mp3Data encoding:NSUTF8StringEncoding];    if (!encodedRecordStr) { // 解决NSData转化为NSString时，可能返回nil的情况        NSData *mp3Data = [[NSData dataWithContentsOfFile:self.mp3Path] base64EncodedDataWithOptions:0];        NSString * encodedRecordStr = [[NSString alloc]initWithData:mp3Data encoding:NSUTF8StringEncoding];         return encodedRecordStr;    }    return encodedRecordStr;}```7、录音停止```js- (void)stopRecord {    if ([self.audioRecorder isRecording]) {        NSLog(@"完成");        [self destoryTimer];        [self.audioRecorder stop];    }#if ENCODE_MP3    [ConvertAudioFile conventToMp3WithCafFilePath:self.cafPath                                      mp3FilePath:self.mp3Path                                       sampleRate:ETRECORD_RATE                                         callback:^(BOOL result) {        NSLog(@"转码结果 ------ %d %@", result,self.mp3Path);        if (self.mp3Path) {            self->currentBase64str = [self recordmp3ToBASE64];            NSLog(@"上传进度-----   %@ ", self->currentBase64str);        }    }];#endif   }```8、播放录音```js- (void)playVoice {    if ([self.audioRecorder isRecording]) {        NSLog(@"--------  正在录制中...");        [self stopRecord];    }    NSFileManager *fileManager = [NSFileManager defaultManager];    BOOL isDir = FALSE;    BOOL isDirExist = [fileManager fileExistsAtPath:self.cafPath isDirectory:&isDir];    if (!isDirExist) {        NSLog(@"--------  录音文件不存在...");    }    NSURL *url = [NSURL fileURLWithPath:self.mp3Path];    [[PlayerManager sharedInstance] playWithVoiceURL:url];    if (self.timer) {        [self destoryTimer];    }    self.timer = [NSTimer scheduledTimerWithTimeInterval:1                                                   target:self                                                 selector:@selector(play)                                                 userInfo:nil                                                  repeats:YES];}- (void)play {     self.timeLabel.text = [NSString stringWithFormat:@"%@ / %@",                            [self timeFormatted:[PlayerManager sharedInstance].currentTime],                            [self timeFormatted:[PlayerManager sharedInstance].finishTime]];}- (IBAction)pausePaly:(id)sender {    [[PlayerManager sharedInstance] pause];}```9、 其他操作```js- (void)destoryTimer {    if (self.timer) {        [self.timer invalidate];        self.timer = nil;        NSLog(@"----- timer destory");    }}- (NSString *)timeFormatted:(NSInteger)totalSeconds {    NSInteger seconds = totalSeconds % 60;    NSInteger minutes = (totalSeconds / 60) % 60;    NSInteger hours = totalSeconds / 3600;    if (hours <= 0) {        return [NSString stringWithFormat:@"%02ld:%02ld",(long)minutes, (long)seconds];    }    return [NSString stringWithFormat:@"%02ld:%02ld:%02ld",(long)hours, (long)minutes, (long)seconds];}``` -->]]></content>
      
      
      <categories>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-dsbridge</title>
      <link href="/2021/07/26/android-dsbridge/"/>
      <url>/2021/07/26/android-dsbridge/</url>
      
        <content type="html"><![CDATA[<h1 id="DSBridge-for-Android"><a href="#DSBridge-for-Android" class="headerlink" title="DSBridge for Android"></a>DSBridge for Android</h1><p><img src="https://github.com/wendux/DSBridge-IOS/raw/master/img/dsbridge.png" alt="dsBridge"></p><p><a href="https://jitpack.io/#wendux/DSBridge-Android" target="_blank" rel="noopener"><img src="https://jitpack.io/v/wendux/DSBridge-Android.svg" alt></a><br><img src="https://img.shields.io/badge/language-Java-yellow.svg" alt="language"><br><a href="https://opensource.org/licenses/mit-license.php" target="_blank" rel="noopener"><img src="https://img.shields.io/github/license/mashape/apistatus.svg" alt="license"></a><br><a href="https://travis-ci.org/wendux/DSBridge-Android" target="_blank" rel="noopener"><img src="https://travis-ci.org/wendux/DSBridge-Android.svg?branch=master" alt></a><br><a href="https://github.com/wendux/DSBridge-Android/tree/master" target="_blank" rel="noopener"><img src="https://img.shields.io/github/last-commit/wendux/DSBridge-Android.svg?color=blue" alt="GitHub last commit"></a><br><img src="https://img.shields.io/badge/minSdkVersion-11-yellow.svg" alt><br><a href="https://github.com/wendux/DSBridge-Android/tree/x5-3.0" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/support%20x5-yes-blue.svg" alt="x5"></a></p><blockquote><p>三端易用的现代跨平台 Javascript bridge， 通过它，你可以在Javascript和原生之间同步或异步的调用彼此的函数.</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>DSBridge v3.0 是一个里程碑版本，和v2.0相比，有许多变化，需要注意的是v3.0<strong>不兼容</strong>之前版本，但是我们也会继续维护v2.0分支，所以，如果你是v2.0的使用者，请放心继续使用v2.0，如果你是新用户，请使用&gt;=v3.0.</p><p><a href="https://github.com/wendux/DSBridge-Android/issues/31" target="_blank" rel="noopener">DSBridge v3.0.0 更新列表</a><br>腾讯X5内核支持：<a href="https://github.com/wendux/DSBridge-Android/tree/x5-3.0" target="_blank" rel="noopener">https://github.com/wendux/DSBridge-Android/tree/x5-3.0</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li><p>Android、IOS、Javascript 三端易用，轻量且强大、安全且健壮。</p></li><li><p>同时支持同步调用和异步调用</p></li><li><p>支持以类的方式集中统一管理API</p></li><li><p>支持API命名空间</p></li><li><p>支持调试模式</p></li><li><p>支持API存在性检测</p></li><li><p>支持进度回调：一次调用，多次返回</p></li><li><p>支持Javascript关闭页面事件回调</p></li><li><p>支持Javascript 模态/非模态对话框</p></li><li><p>支持腾讯X5内核</p><p>​</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>添加 JitPack repository 到gradle脚本中</p><pre class="line-numbers language-groovy"><code class="language-groovy">allprojects <span class="token punctuation">{</span>  repositories <span class="token punctuation">{</span>   <span class="token punctuation">...</span>   maven <span class="token punctuation">{</span> url <span class="token string">'https://jitpack.io'</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加依赖</p><pre class="line-numbers language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//compile 'com.github.wendux:DSBridge-Android:3.0-SNAPSHOT'</span>    <span class="token comment" spellcheck="true">//support the x5 browser core of tencent</span>    <span class="token comment" spellcheck="true">//compile 'com.github.wendux:DSBridge-Android:x5-3.0-SNAPSHOT'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>请参考工程目录下的 <code>wendu.jsbdemo/</code> 包。运行 <code>app</code> 工程并查看示例交互。</p><p>如果要在你自己的项目中使用 dsBridge :</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>新建一个Java类，实现API</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsApi</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//同步API</span>   <span class="token annotation punctuation">@JavascriptInterface</span>   <span class="token keyword">public</span> String <span class="token function">testSyn</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token keyword">return</span> msg <span class="token operator">+</span> <span class="token string">"［syn call］"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//异步API</span>   <span class="token annotation punctuation">@JavascriptInterface</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyn</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">,</span> CompletionHandler<span class="token operator">&lt;</span>String<span class="token operator">></span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>       handler<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>msg<span class="token operator">+</span><span class="token string">" [ asyn call]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，DSBridge正式通过类的方式集中、统一地管理API。由于安全原因，所有Java API 必须有”@JavascriptInterface” 标注。</p></li><li><p>添加API类实例到 DWebView .</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> wendu<span class="token punctuation">.</span>dsbridge<span class="token punctuation">.</span>DWebView<span class="token operator">...</span>DWebView dwebView<span class="token operator">=</span> <span class="token punctuation">(</span>DWebView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>dwebview<span class="token punctuation">)</span><span class="token punctuation">;</span>dwebView<span class="token punctuation">.</span><span class="token function">addJavascriptObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Javascript中调用原生 (Java/Object-c/swift) API ,并注册一个 javascript API供原生调用.</p><ul><li><p>初始化 dsBridge</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//cdn方式引入初始化代码(中国地区慢，建议下载到本地工程)</span><span class="token comment" spellcheck="true">//&lt;script src="https://unpkg.com/dsbridge@3.1.3/dist/dsbridge.js"> &lt;/script></span><span class="token comment" spellcheck="true">//npm方式安装初始化代码</span><span class="token comment" spellcheck="true">//npm install dsbridge@3.1.3</span><span class="token keyword">var</span> dsBridge<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dsbridge"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用原生API ,并注册一个 javascript API供原生调用.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步调用</span><span class="token keyword">var</span> str<span class="token operator">=</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"testSyn"</span><span class="token punctuation">,</span><span class="token string">"testSyn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步调用</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"testAsyn"</span><span class="token punctuation">,</span><span class="token string">"testAsyn"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注册 javascript API </span> dsBridge<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'addValue'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>在Java中调用 Javascript API </p><pre class="line-numbers language-java"><code class="language-java">dwebView<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span><span class="token string">"addValue"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>Integer retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"jsbridge"</span><span class="token punctuation">,</span><span class="token string">"call succeed,return value is "</span><span class="token operator">+</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Java-API-签名"><a href="#Java-API-签名" class="headerlink" title="Java API 签名"></a>Java API 签名</h2><p>为了兼容IOS，我们约定 Java API 签名，<strong>注意，如果API签名不合法，则不会被调用</strong>！签名如下：</p><ol><li><p>同步API.</p><p><strong><code>public any handler(Object msg)</code></strong></p><p>参数必须是 <code>Object</code> 类型，<strong>并且必须申明</strong>（如果不需要参数，申明后不适用即可）。返回值类型没有限制，可以是任意类型。</p></li><li><p>异步 API.</p><p><strong><code>public void handler(Object arg, CompletionHandler handler)</code></strong></p></li></ol><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间可以帮助你更好的管理API，这在API数量多的时候非常实用，比如在混合应用中。DSBridge (&gt;= v3.0.0) 支持你通过命名空间将API分类管理，并且命名空间支持多级的，不同级之间只需用’.’ 分隔即可。</p><h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><p>在调试模式时，发生一些错误时，将会以弹窗形式提示，并且原生API如果触发异常将不会被自动捕获，因为在调试阶段应该将问题暴露出来。如果调试模式关闭，错误将不会弹窗，并且会自动捕获API触发的异常，防止crash。强烈建议在开发阶段开启调试模式，可以通过如下代码开启调试模式</p><pre class="line-numbers language-java"><code class="language-java">DWebView<span class="token punctuation">.</span><span class="token function">setWebContentsDebuggingEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进度回调"><a href="#进度回调" class="headerlink" title="进度回调"></a>进度回调</h2><p>通常情况下，调用一个方法结束后会返回一个结果，是一一对应的。但是有时会遇到一次调用需要多次返回的场景，比如在javascript钟调用端上的一个下载文件功能，端上在下载过程中会多次通知javascript进度, 然后javascript将进度信息展示在h5页面上，这是一个典型的一次调用，多次返回的场景，如果使用其它Javascript bridge,  你将会发现要实现这个功能会比较麻烦，而DSBridge本省支持进度回调，你可以非常简单方便的实现一次调用需要多次返回的场景，下面我们实现一个倒计时的例子：</p><p>In Java </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@JavascriptInterface</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callProgress</span><span class="token punctuation">(</span>Object args<span class="token punctuation">,</span> <span class="token keyword">final</span> CompletionHandler<span class="token operator">&lt;</span>Integer<span class="token operator">></span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">CountDownTimer</span><span class="token punctuation">(</span><span class="token number">11000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTick</span><span class="token punctuation">(</span><span class="token keyword">long</span> millisUntilFinished<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//setProgressData can be called many times util complete be called.</span>            handler<span class="token punctuation">.</span><span class="token function">setProgressData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//complete the js invocation with data; </span>           <span class="token comment" spellcheck="true">//handler will invalid when complete is called</span>            handler<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Javascript</p><pre class="line-numbers language-javascript"><code class="language-javascript">dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"callProgress"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> value<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整的示例代码请参考demo工程。</p><h2 id="Javascript-弹出框"><a href="#Javascript-弹出框" class="headerlink" title="Javascript 弹出框"></a>Javascript 弹出框</h2><p>DSBridge已经实现了 Javascript的弹出框函数(alert/confirm/prompt)，如果你想自定义它们，通过<code>WebChromeClient</code>重写相关函数即可。DSBridge实现的对话框默认设置是模态的，这会挂起UI线程，如果你需要非模态对话框，请参考<code>dwebview.disableJavascriptDialogBlock(bool disable)</code> 。</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>在Android 4.2(API17)之前 <code>webview.addJavascriptInterface</code> 存在安全漏洞，DSBridge内部在4.2以下的设备上不会使用<code>webview.addJavascriptInterface</code>，而是通过其它方式通信，在4.2之后会使用 <code>webview.addJavascriptInterface</code> 。同时，为了防止Javascript调用未授权的原生函数，所有Java API 必须有”@JavascriptInterface” 标注，所以在任何版本的Android系统下，您可以放心使用DSBridge！</p><h2 id="DWebView"><a href="#DWebView" class="headerlink" title="DWebView"></a>DWebView</h2><p>DWebView中，如果在非主线程调用下列方法时，它们内部会自动分发到主线程中执行，你再也无需手动切换。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">loadUrl</span><span class="token punctuation">(</span> String url<span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">loadUrl</span><span class="token punctuation">(</span> String url<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> additionalHttpHeaders<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">evaluateJavascript</span><span class="token punctuation">(</span>String script<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="API-列表"><a href="#API-列表" class="headerlink" title="API 列表"></a>API 列表</h2><h3 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h3><p>在Java中我们把实现了供 javascript调用的 API类的实例 成为 <strong>Java API object</strong>.</p><h5 id="dwebview-addJavascriptObject-Object-object-String-namespace"><a href="#dwebview-addJavascriptObject-Object-object-String-namespace" class="headerlink" title="dwebview.addJavascriptObject(Object object, String namespace)"></a><code>dwebview.addJavascriptObject(Object object, String namespace)</code></h5><p>添加一个Java API object到DWebView ，并为它指定一个命名空间。然后，在 javascript 中就可以通过<code>bridge.call(&quot;namespace.api&quot;,...)</code>来调用Java API object中的原生API了。</p><p>如果命名空间是空(null或空字符串）, 那么这个添加的  Java API object就没有命名空间。在 javascript 通过 <code>bridge.call(&quot;api&quot;,...)</code>调用。</p><p><strong>示例</strong>:</p><p>In Java</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsEchoApi</span> <span class="token punctuation">{</span>    @JavascriptInterface    <span class="token keyword">public</span> Object <span class="token function">syn</span><span class="token punctuation">(</span>Object args<span class="token punctuation">)</span> throws JSONException <span class="token punctuation">{</span>        <span class="token keyword">return</span>  args<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @JavascriptInterface    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyn</span><span class="token punctuation">(</span>Object args<span class="token punctuation">,</span>CompletionHandler handler<span class="token punctuation">)</span><span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//namespace is "echo"</span>dwebView<span class="token punctuation">.</span><span class="token function">addJavascriptObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsEchoApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"echo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Javascript</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// call echo.syn</span><span class="token keyword">var</span> ret<span class="token operator">=</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"echo.syn"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token string">" I am echoSyn call"</span><span class="token punctuation">,</span> tag<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// call echo.asyn</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"echo.asyn"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token string">" I am echoAsyn call"</span><span class="token punctuation">,</span>tag<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="dwebview-removeJavascriptObject-String-namespace"><a href="#dwebview-removeJavascriptObject-String-namespace" class="headerlink" title="dwebview.removeJavascriptObject(String namespace)"></a><code>dwebview.removeJavascriptObject(String namespace)</code></h5><p>通过命名空间名称移除相应的Java API object 。</p><h5 id="dwebview-callHandler-String-handlerName-Object-args"><a href="#dwebview-callHandler-String-handlerName-Object-args" class="headerlink" title="dwebview.callHandler(String handlerName, Object[] args)"></a><code>dwebview.callHandler(String handlerName, Object[] args)</code></h5><h5 id="dwebview-callHandler-String-handlerName-OnReturnValue-handler"><a href="#dwebview-callHandler-String-handlerName-OnReturnValue-handler" class="headerlink" title="dwebview.callHandler(String handlerName, OnReturnValue handler)"></a><code>dwebview.callHandler(String handlerName, OnReturnValue handler)</code></h5><h5 id="dwebview-callHandler-String-handlerName-Object-args-OnReturnValue-handler"><a href="#dwebview-callHandler-String-handlerName-Object-args-OnReturnValue-handler" class="headerlink" title="dwebview.callHandler(String handlerName, Object[] args,OnReturnValue handler)"></a><code>dwebview.callHandler(String handlerName, Object[] args,OnReturnValue handler)</code></h5><p>调用 javascript API。<code>handlerName</code>  为javascript API 的名称，可以包含命名空间；参数以数组传递，<code>args</code>数组中的元素依次对应javascript API的形参； <code>handler</code> 用于接收javascript API的返回值，<strong>注意：handler将在主线程中被执行</strong>。</p><p>示例:</p><pre class="line-numbers language-java"><code class="language-java">dWebView<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span><span class="token string">"append"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token string">"love"</span><span class="token punctuation">,</span><span class="token string">"you"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>String retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"jsbridge"</span><span class="token punctuation">,</span><span class="token string">"call succeed, append string is: "</span><span class="token operator">+</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// call with namespace 'syn', More details to see the Demo project                    </span>dWebView<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span><span class="token string">"syn.getInfo"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>JSONObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>JSONObject retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">showToast</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="dwebview-disableJavascriptDialogBlock-bool-disable"><a href="#dwebview-disableJavascriptDialogBlock-bool-disable" class="headerlink" title="dwebview.disableJavascriptDialogBlock(bool disable)"></a><code>dwebview.disableJavascriptDialogBlock(bool disable)</code></h5><p><strong>小心使用</strong>. 如果你在javascript中调用弹窗函数(<code>alert</code>,<code>confirm</code>, 或 <code>prompt</code>)， 那么APP将会挂起，因为这些弹窗都是<strong>模态</strong>的，会阻塞APP主线程，此时javascript执行流也会阻塞。如果你想避免阻塞，可以通过此API禁止，禁止后，一旦 javascript中调用了这些弹窗函数，APP将弹出<strong>非模态</strong>对话框，并立即返回，(  <code>confirm</code> 会返回 <code>true</code>,  <code>prompt</code> 返回空字符串)。</p><p>禁止Javascript对话框阻塞:</p><pre class="line-numbers language-javascript"><code class="language-javascript">dwebview<span class="token punctuation">.</span><span class="token function">disableJavascriptDialogBlock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想恢复<strong>模态</strong>对话框，传 <code>false</code> 调用即可.</p><h5 id="dwebview-setJavascriptCloseWindowListener-JavascriptCloseWindowListener-listener"><a href="#dwebview-setJavascriptCloseWindowListener-JavascriptCloseWindowListener-listener" class="headerlink" title="dwebview.setJavascriptCloseWindowListener(JavascriptCloseWindowListener listener)"></a><code>dwebview.setJavascriptCloseWindowListener(JavascriptCloseWindowListener listener)</code></h5><p>当 Javascript中调用<code>window.close</code>时，DWebView会触发此监听器，如果未设置，DWebView默认会关闭掉当前Activity. </p><p>Example:</p><pre class="line-numbers language-java"><code class="language-java">dwebview<span class="token punctuation">.</span><span class="token function">setJavascriptCloseWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DWebView<span class="token punctuation">.</span>JavascriptCloseWindowListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"jsbridge"</span><span class="token punctuation">,</span><span class="token string">"window.close is called in Javascript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果返回false,则阻止DWebView默认处理. </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="dwebview-hasJavascriptMethod-String-handlerName-OnReturnValue-lt-Boolean-gt-existCallback"><a href="#dwebview-hasJavascriptMethod-String-handlerName-OnReturnValue-lt-Boolean-gt-existCallback" class="headerlink" title="dwebview.hasJavascriptMethod(String handlerName, OnReturnValue&lt;Boolean&gt; existCallback)"></a><code>dwebview.hasJavascriptMethod(String handlerName, OnReturnValue&lt;Boolean&gt; existCallback)</code></h5><p>检测是否存在指定的 javascript API，<code>handlerName</code>可以包含命名空间. </p><p>示例:</p><pre class="line-numbers language-java"><code class="language-java"> dWebView<span class="token punctuation">.</span><span class="token function">hasJavascriptMethod</span><span class="token punctuation">(</span><span class="token string">"addValue"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>Boolean retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">showToast</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="DWebView-setWebContentsDebuggingEnabled-boolean-enabled"><a href="#DWebView-setWebContentsDebuggingEnabled-boolean-enabled" class="headerlink" title="DWebView.setWebContentsDebuggingEnabled(boolean enabled)"></a><code>DWebView.setWebContentsDebuggingEnabled(boolean enabled)</code></h5><p>设置调试模式。在调试模式时，发生一些错误时，将会以弹窗形式提示，并且原生API如果触发异常将不会被自动捕获，因为在调试阶段应该将问题暴露出来。如果调试模式关闭，错误将不会弹窗，并且会自动捕获API触发的异常，防止crash。强烈建议在开发阶段开启调试模式。</p><h3 id="Javascript-API"><a href="#Javascript-API" class="headerlink" title="Javascript API"></a>Javascript API</h3><h5 id="dsBridge"><a href="#dsBridge" class="headerlink" title="dsBridge"></a>dsBridge</h5><p>“dsBridge” 在初始化之后可用 .</p><h5 id="dsBridge-call-method-arg-callback"><a href="#dsBridge-call-method-arg-callback" class="headerlink" title="dsBridge.call(method,[arg,callback])"></a><code>dsBridge.call(method,[arg,callback])</code></h5><p>同步或异步的调用Java API。</p><p><code>method</code>: Java API 名称， 可以包含命名空间。</p><p><code>arg</code>:传递给Java API 的参数。只能传一个，如果需要多个参数时，可以合并成一个json对象参数。</p><p><code>callback(String returnValue)</code>: 处理Java API的返回结果. 可选参数，<strong>只有异步调用时才需要提供</strong>.</p><h5 id="dsBridge-register-methodName-namespace-function-synApiObject"><a href="#dsBridge-register-methodName-namespace-function-synApiObject" class="headerlink" title="dsBridge.register(methodName|namespace,function|synApiObject)"></a><code>dsBridge.register(methodName|namespace,function|synApiObject)</code></h5><h5 id="dsBridge-registerAsyn-methodName-namespace-function-asynApiObject"><a href="#dsBridge-registerAsyn-methodName-namespace-function-asynApiObject" class="headerlink" title="dsBridge.registerAsyn(methodName|namespace,function|asynApiObject)"></a><code>dsBridge.registerAsyn(methodName|namespace,function|asynApiObject)</code></h5><p>注册同步/异步的Javascript API. 这两个方法都有两种调用形式：</p><ol><li><p>注册一个普通的方法，如:</p><p>In Javascript</p><pre class="line-numbers language-javascript"><code class="language-javascript">dsBridge<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'addValue'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dsBridge<span class="token punctuation">.</span><span class="token function">registerAsyn</span><span class="token punctuation">(</span><span class="token string">'append'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>arg3<span class="token punctuation">,</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">responseCallback</span><span class="token punctuation">(</span>arg1<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>arg2<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>arg3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Java</p><pre class="line-numbers language-java"><code class="language-java">webView<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span><span class="token string">"addValue"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>String retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"jsbridge"</span><span class="token punctuation">,</span><span class="token string">"call succeed,return value is: "</span><span class="token operator">+</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webView<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span><span class="token string">"append"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token string">"love"</span><span class="token punctuation">,</span><span class="token string">"you"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>String retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"jsbridge"</span><span class="token punctuation">,</span><span class="token string">"call succeed, append string is: "</span><span class="token operator">+</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p></li><li><p>注册一个对象，指定一个命名空间:</p><p><strong>In Javascript</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//namespace test for synchronous calls</span>dsBridge<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  tag<span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>  test1<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  test2<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"2"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//namespace test1 for asynchronous calls  </span>dsBridge<span class="token punctuation">.</span><span class="token function">registerAsyn</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  tag<span class="token punctuation">:</span><span class="token string">"test1"</span><span class="token punctuation">,</span>  test1<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">responseCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"1"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  test2<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">responseCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"2"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为Javascript并不支持函数重载，所以不能在同一个Javascript对象中定义同名的同步函数和异步函数</p></blockquote><p><strong>In Java</strong></p><pre class="line-numbers language-java"><code class="language-java">webView<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span><span class="token string">"test.test1"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>String retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"jsbridge"</span><span class="token punctuation">,</span><span class="token string">"Namespace test.test1: "</span><span class="token operator">+</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webView<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span><span class="token string">"test1.test1"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">OnReturnValue</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span>String retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"jsbridge"</span><span class="token punctuation">,</span><span class="token string">"Namespace test.test1: "</span><span class="token operator">+</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="dsBridge-hasNativeMethod-handlerName-type"><a href="#dsBridge-hasNativeMethod-handlerName-type" class="headerlink" title="dsBridge.hasNativeMethod(handlerName,[type])"></a><code>dsBridge.hasNativeMethod(handlerName,[type])</code></h5><p>检测Java中是否存在名为<code>handlerName</code>的API, <code>handlerName</code> 可以包含命名空间. </p><p><code>type</code>: 可选参数，<code>[&quot;all&quot;|&quot;syn&quot;|&quot;asyn&quot; ]</code>, 默认是 “all”.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//检测是否存在一个名为'testAsyn'的API(无论同步还是异步)</span>dsBridge<span class="token punctuation">.</span><span class="token function">hasNativeMethod</span><span class="token punctuation">(</span><span class="token string">'testAsyn'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//检测test命名空间下是否存在一个’testAsyn’的API</span>dsBridge<span class="token punctuation">.</span><span class="token function">hasNativeMethod</span><span class="token punctuation">(</span><span class="token string">'test.testAsyn'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 检测是否存在一个名为"testSyn"的异步API</span>dsBridge<span class="token punctuation">.</span><span class="token function">hasNativeMethod</span><span class="token punctuation">(</span><span class="token string">'testSyn'</span><span class="token punctuation">,</span><span class="token string">'asyn'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="dsBridge-disableJavascriptDialogBlock-disable"><a href="#dsBridge-disableJavascriptDialogBlock-disable" class="headerlink" title="dsBridge.disableJavascriptDialogBlock(disable)"></a><code>dsBridge.disableJavascriptDialogBlock(disable)</code></h5><p>调用 <code>dsBridge.disableJavascriptDialogBlock(...)</code> 和在Java中调用 <code>dwebview.disableJavascriptDialogBlock(...)</code> 作用一样.</p><p>示例:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//disable</span>dsBridge<span class="token punctuation">.</span><span class="token function">disableJavascriptDialogBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//enable</span>dsBridge<span class="token punctuation">.</span><span class="token function">disableJavascriptDialogBlock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="和-fly-js一起使用"><a href="#和-fly-js一起使用" class="headerlink" title="和 fly.js一起使用"></a>和 fly.js一起使用</h2><p>当dsBridge遇见  <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a>  时，将会打开一个新的世界。<a href="https://github.com/wendux/fly" target="_blank" rel="noopener">fly.js传送门</a></p><p>正如我们所知，在浏览器中，ajax请求受同源策略限制，不能跨域请求资源。然而，  <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a> 有一个强大的功能就是支持请求重定向：将ajax请求通过任何Javascript bridge重定向到端上，并且 <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a> 官方已经提供的 dsBridge 的 adapter, 可以非常方便的协同dsBridge一起使用。由于端上没有同源策略的限制，所以 fly.js可以请求任何域的资源。</p><p>另一个典型的使用场景是在混合APP中，由于<a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a> 可以将所有ajax请求转发到端上，所以，开发者就可以在端上进行统一的请求管理、证书校验、cookie管理、访问控制等。</p><p>具体的示例请查看demo.</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你喜欢DSBridge, 欢迎star，以便更多的人知道它, 谢谢 !</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓-webview-dsbridge（安卓-jsapi调用）</title>
      <link href="/2021/07/26/an-zhuo-webview-dsbridge-an-zhuo-jsapi-diao-yong/"/>
      <url>/2021/07/26/an-zhuo-webview-dsbridge-an-zhuo-jsapi-diao-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="1、优化"><a href="#1、优化" class="headerlink" title="1、优化"></a>1、优化</h4><p>1、优化 build.gradle:project 依赖</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span>buildscript <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">'com.android.tools.build:gradle:4.2.1'</span>        <span class="token comment" spellcheck="true">// NOTE: Do not place your application dependencies here; they belong</span>        <span class="token comment" spellcheck="true">// in the individual module build.gradle files</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>allprojects <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        maven <span class="token punctuation">{</span> url <span class="token string">'https://jitpack.io'</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>task <span class="token function">clean</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Delete<span class="token punctuation">)</span> <span class="token punctuation">{</span>    delete rootProject<span class="token punctuation">.</span>buildDir<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、优化 build.gradle: module app 依赖 (自定义打包后应用名称)</p><pre class="line-numbers language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.android.application'</span>android <span class="token punctuation">{</span>    compileSdkVersion <span class="token number">30</span>    buildToolsVersion <span class="token string">'30.0.3'</span>    defaultConfig <span class="token punctuation">{</span>        applicationId <span class="token string">'com.xxx.xxx'</span>        minSdkVersion <span class="token number">16</span>        targetSdkVersion <span class="token number">29</span>        versionCode <span class="token number">1</span>        versionName <span class="token string">"1.0.7"</span>        testInstrumentationRunner <span class="token string">"android.support.test.runner.AndroidJUnitRunner"</span>    <span class="token punctuation">}</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">false</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打包后应用名称</span>        applicationVariants<span class="token punctuation">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-</span><span class="token operator">></span>            variant<span class="token punctuation">.</span>outputs<span class="token punctuation">.</span>all <span class="token punctuation">{</span> output <span class="token operator">-</span><span class="token operator">></span>                def outputFile <span class="token operator">=</span> output<span class="token punctuation">.</span>outputFile                def fileName                <span class="token keyword">if</span> <span class="token punctuation">(</span>outputFile <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> outputFile<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>variant<span class="token punctuation">.</span>buildType<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">'release'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果是release包</span>                        fileName <span class="token operator">=</span> <span class="token string">"K_V_${defaultConfig.versionName}.apk"</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>variant<span class="token punctuation">.</span>buildType<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果是debug包</span>                        fileName <span class="token operator">=</span> <span class="token string">"K_V_${defaultConfig.versionName}.apk"</span>                    <span class="token punctuation">}</span>                    outputFileName <span class="token operator">=</span> fileName                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    lintOptions <span class="token punctuation">{</span>        abortOnError <span class="token boolean">false</span>    <span class="token punctuation">}</span>    compileOptions <span class="token punctuation">{</span>        sourceCompatibility JavaVersion<span class="token punctuation">.</span>VERSION_1_8        targetCompatibility JavaVersion<span class="token punctuation">.</span>VERSION_1_8    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">androidTestImplementation</span><span class="token punctuation">(</span><span class="token string">'com.android.support.test.espresso:espresso-core:3.0.2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        exclude group<span class="token operator">:</span> <span class="token string">'com.android.support'</span><span class="token punctuation">,</span> module<span class="token operator">:</span> <span class="token string">'support-annotations'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    implementation <span class="token function">project</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token string">':dsbridge'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//noinspection</span>    <span class="token comment" spellcheck="true">//noinspection GradleCompatible,GradleCompatible,GradleCompatible</span>    implementation <span class="token string">'com.android.support:appcompat-v7:28.0.0'</span>    implementation <span class="token string">'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'</span>    testImplementation <span class="token string">'junit:junit:4.13.2'</span>    implementation <span class="token string">'com.github.wenkency:permission:1.3.0'</span>    implementation <span class="token string">'com.github.wenkency:filepaths:1.2.0'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、 升级 gradle-wrapper.properties</p><pre class="line-numbers language-java"><code class="language-java">distributionBase<span class="token operator">=</span>GRADLE_USER_HOMEdistributionUrl<span class="token operator">=</span>https\<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>services<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>org<span class="token operator">/</span>distributions<span class="token operator">/</span>gradle<span class="token operator">-</span><span class="token number">6.7</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>bin<span class="token punctuation">.</span>zipdistributionPath<span class="token operator">=</span>wrapper<span class="token operator">/</span>distszipStorePath<span class="token operator">=</span>wrapper<span class="token operator">/</span>distszipStoreBase<span class="token operator">=</span>GRADLE_USER_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、gradle.properties 新增两项内容</p><pre class="line-numbers language-java"><code class="language-java">android<span class="token punctuation">.</span>useAndroidX<span class="token operator">=</span><span class="token boolean">true</span>android<span class="token punctuation">.</span>enableJetifier<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2、升级app"><a href="#2、升级app" class="headerlink" title="2、升级app"></a>2、升级app</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>wenkency<span class="token operator">/</span>update<span class="token punctuation">]</span><span class="token punctuation">(</span>原文<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  下载app</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span>String Url<span class="token punctuation">,</span> String Name<span class="token punctuation">,</span> String Code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String apkUrl <span class="token operator">=</span> Url<span class="token punctuation">;</span>    AppUpdateBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppUpdateBean</span><span class="token punctuation">(</span>apkUrl<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Code<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDownloadUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateUtils</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDownloadUtils<span class="token punctuation">.</span><span class="token function">setOnUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnSingleUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"Updating in the background..."</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailed</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"msg==失败了"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> msg <span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            downStatus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSucceed</span><span class="token punctuation">(</span>File apkFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 安装</span>            mDownloadUtils<span class="token punctuation">.</span><span class="token function">installApk</span><span class="token punctuation">(</span>apkFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"download successful"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            downStatus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onProgress</span><span class="token punctuation">(</span><span class="token keyword">int</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> current<span class="token punctuation">,</span> <span class="token keyword">float</span> progress<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> progress<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                mTextView.setText(String.format("%.2f", progress) + "%");</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mDownloadUtils<span class="token punctuation">.</span><span class="token function">downloadAPK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、下载文件监听"><a href="#3、下载文件监听" class="headerlink" title="3、下载文件监听"></a>3、下载文件监听</h4><p>H5调用安卓，去浏览器中下载</p><pre class="line-numbers language-java"><code class="language-java">dwebView<span class="token punctuation">.</span><span class="token function">setDownloadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebViewDownloadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  下载文件操作</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">WebViewDownloadListener</span> <span class="token keyword">implements</span> <span class="token class-name">DownloadListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDownloadStart</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String userAgent<span class="token punctuation">,</span> String contentDisposition<span class="token punctuation">,</span> String mimetype<span class="token punctuation">,</span> <span class="token keyword">long</span> contentLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"--- onDownloadStart ---"</span> <span class="token operator">+</span> <span class="token string">" url = "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">", userAgent = "</span> <span class="token operator">+</span> userAgent <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span>        <span class="token string">"contentDisposition = "</span> <span class="token operator">+</span> contentDisposition <span class="token operator">+</span> <span class="token string">", mimetype = "</span> <span class="token operator">+</span> mimetype <span class="token operator">+</span> <span class="token string">", contentLength = "</span> <span class="token operator">+</span> contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">downloadByBrowser</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 通过浏览器下载* @param url*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">downloadByBrowser</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>CATEGORY_BROWSABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- #### 4、JS 调用 安卓jsapi操作（安卓代码）举例:```java@JavascriptInterfacepublic void testAsyn(Object msg, CompletionHandler<String> handler){    Log.d(TAG,"dsbridge 消息" + (String) msg);    if(((String) msg).contains("getLocation")) {        System.out.println("定位"+(locationContent == ""));        if (locationContent == "") {            this.getGPSLocation();            System.out.println("无定位信息，二次定位，暂时未找到更好的方法，以上代码仅供自己查询学习使用");            if (locationContent == "") {                this.getNetworkLocation();            }        } else {            Log.d(TAG, "gps location: lat==" + locationContent + "  lng==");            handler.complete(locationContent);        }    }    // 需要的时候使用    if(((String) msg).contains("unRegisterListener")) {        System.out.println("注销定位"+(locationContent == ""));        LocationUtils.unRegisterListener(context);    }    //  获取版本号    if(((String) msg).contains("versionCode")) {        //  String VersionCode = "";        String VersionName = "";        //  VersionCode =  this.getVersionCode();        VersionName =  this.getVersionName();        System.out.println("getVersionCode"+VersionName);        if (VersionName != ""){            handler.complete(VersionName);        }    }    //  前端 更新apk    if(((String) msg).contains("updateApk")) {        Log.d(TAG, "updateApk==" + msg);        String str = (String) msg;        String[] temp;        String delimeter = ",";  // 指定分割字符        temp = str.split(delimeter); // 分割字符串        String apkUrl = temp[1];        String apkName = temp[2];        String versioCode = temp[3];        this.down(apkUrl,apkName,versioCode);    }    //  退出app    if(((String) msg).contains("exitApp")) {        Log.d(TAG, "exitApp==" + msg);        // System.exit(0);//正常退出App        android.os.Process.killProcess(android.os.Process.myPid());    //获取PID        System.exit(0);   //常规java标准退出法，返回值为0代表正常退出    }}```#### 5、JS 调用 安卓jsapi操作（前端Vue代码）1、使用步骤---安装```jsnpm install dsbridge@3.1.4```2. Vue项目中，新建js文件```jsvar dsBridge = require('dsbridge')export default {  callmethod (name, data, callback) {    callback(dsBridge.call(name, data, callback))  },  registermethod (tag, callback) {    dsBridge.register(tag, callback)  }}```3. mian.js中引入 dsbridge内容，如：```jsimport Bridge from '@/components/dsbridge.js'Vue.prototype.$bridge = Bridge```4、Vue页面中使用```jsH5 调用安卓 声明的方法this.$bridge.callmethod('nativeTunnel', data, (res) => { // nativeTunnel为方法名    // 注意this指向问题    alert(res) // 这里能拿到app的返回值哦!})``````js安卓 调用H5 声明的方法this.$bridge.registermethod('h5methods', (data) => { // h5methods为方法名    alert(data) // app端给前端的数据在这里    return {a: 'xxx'} // 前端返回给app的值})```#### 6、定位```java/*** 通过GPS获取定位信息*/public void getGPSLocation() {    Location gps = LocationUtils.getGPSLocation(context);    Log.d(TAG, "gps location gps location is null" + gps);    if (gps == null) {        //设置定位监听，因为GPS定位，第一次进来可能获取不到，通过设置监听，可以在有效的时间范围内获取定位信息        LocationUtils.addLocationListener(context, LocationManager.GPS_PROVIDER, new LocationUtils.ILocationListener() {            @Override            public void onSuccessLocation(Location location) {                if (location != null) {                    locationContent = location.getLongitude() + "," + location.getLatitude();                } else {                    Log.d(TAG, "gps location gps location is null");                }            }        });    } else {        locationContent = gps.getLongitude() + "," + gps.getLatitude();        Log.d(TAG, "gps location: lat==" + gps.getLatitude() + "  lng==" + gps.getLongitude());    }}``````java/*** 通过网络等获取定位信息*/private void getNetworkLocation() {    Location net = LocationUtils.getNetWorkLocation(context);    Log.d(TAG, "net location net location is null" + net);    if (net == null) {        Log.d(TAG, "net gps location is null");    } else {        locationContent = net.getLongitude() + "," + net.getLatitude();    }}/*** 采用最好的方式获取定位信息*/@SuppressLint("WrongConstant")private void getBestLocation() {    Criteria c = new Criteria();//Criteria类是设置定位的标准信息（系统会根据你的要求，匹配最适合你的定位供应商），一个定位的辅助信息的类    c.setPowerRequirement(Criteria.POWER_LOW);//设置低耗电    c.setAltitudeRequired(true);//设置需要海拔    c.setBearingAccuracy(Criteria.ACCURACY_COARSE);//设置COARSE精度标准    c.setAccuracy(Criteria.ACCURACY_LOW);//设置低精度    //... Criteria 还有其他属性，就不一一介绍了    Location best = LocationUtils.getBestLocation(context, c);    if (best == null) {        Toast.makeText(context, " best location is null", Toast.LENGTH_SHORT).show();    } else {        locationContent = best.getLatitude() + "," + best.getLongitude();    }}```LocationUtils 定位工具类```javapackage com.xxx.xxx;import android.Manifest;import android.content.Context;import android.content.pm.PackageManager;import android.location.Criteria;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Bundle;import android.text.TextUtils;import androidx.annotation.NonNull;import androidx.core.app.ActivityCompat;public class LocationUtils {    private static final long REFRESH_TIME = 5000L;    private static final float METER_POSITION = 0.0f;    private static ILocationListener mLocationListener;    private static LocationListener listener = new MyLocationListener();    private static class MyLocationListener implements LocationListener {        @Override        public void onLocationChanged(Location location) {//定位改变监听            if (mLocationListener != null) {                mLocationListener.onSuccessLocation(location);            }        }        @Override        public void onStatusChanged(String provider, int status, Bundle extras) {//定位状态监听        }        @Override        public void onProviderEnabled(String provider) {//定位状态可用监听        }        @Override        public void onProviderDisabled(String provider) {//定位状态不可用监听        }    }    /**     * GPS获取定位方式     */    public static Location getGPSLocation(@NonNull Context context) {        Location location = null;        LocationManager manager = getLocationManager(context);        //高版本的权限检查        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            return null;        }        if (manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {//是否支持GPS定位            //获取最后的GPS定位信息，如果是第一次打开，一般会拿不到定位信息，一般可以请求监听，在有效的时间范围可以获取定位信息            location = manager.getLastKnownLocation(LocationManager.GPS_PROVIDER);        }        return location;    }    /**     * network获取定位方式     */    public static Location getNetWorkLocation(Context context) {        Location location = null;        LocationManager manager = getLocationManager(context);        //高版本的权限检查        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            return null;        }        if (manager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {//是否支持Network定位            //获取最后的network定位信息            location = manager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);        }        return location;    }    /**     * 获取最好的定位方式     */    public static Location getBestLocation(Context context, Criteria criteria) {        Location location;        LocationManager manager = getLocationManager(context);        if (criteria == null) {            criteria = new Criteria();        }        String provider = manager.getBestProvider(criteria, true);        if (TextUtils.isEmpty(provider)) {            //如果找不到最适合的定位，使用network定位            location = getNetWorkLocation(context);        } else {            //高版本的权限检查            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED                    && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                return null;            }            //获取最适合的定位方式的最后的定位权限            location = manager.getLastKnownLocation(provider);        }        return location;    }    /**     * 定位监听     */    public static void addLocationListener(Context context, String provider, ILocationListener locationListener) {        System.out.println("定位监听");        addLocationListener(context, provider, REFRESH_TIME, METER_POSITION, locationListener);    }    /**     * 定位监听     */    public static void addLocationListener(Context context, String provider, long time, float meter, ILocationListener locationListener) {        if (locationListener != null) {            mLocationListener = locationListener;        }        if (listener == null) {            listener = new MyLocationListener();        }        LocationManager manager = getLocationManager(context);        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            return;        }        manager.requestLocationUpdates(provider, time, meter, listener);    }    /**     * 取消定位监听     */    public static void unRegisterListener(Context context) {        if (listener != null) {            LocationManager manager = getLocationManager(context);            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                    && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                return;            }            System.out.println("取消定位监听");            //移除定位监听            manager.removeUpdates(listener);        }    }    private static LocationManager getLocationManager(@NonNull Context context) {        return (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);    }    /**     * 自定义接口     */    public interface ILocationListener {        void onSuccessLocation(Location location);    }}``` -->]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS-webview</title>
      <link href="/2021/07/26/ios-webview/"/>
      <url>/2021/07/26/ios-webview/</url>
      
        <content type="html"><![CDATA[<h4 id="1、IOS-webView-H5"><a href="#1、IOS-webView-H5" class="headerlink" title="1、IOS-webView-H5"></a>1、IOS-webView-H5</h4><p><a href="https://blog.csdn.net/mojocube/article/details/81939743" target="_blank" rel="noopener">手把手教你开发基于Webview的IOS APP</a> 教程 2021-至今 操作可能有变动，可根据最新教程操作</p><p>核心代码1：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 1.创建webview，并设置大小，"20"为状态栏高度</span>CGFloat width <span class="token operator">=</span> self<span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>CGFloat height <span class="token operator">=</span> self<span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">;</span>UIWebView <span class="token operator">*</span>webView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIWebView alloc<span class="token punctuation">]</span> initWithFrame<span class="token punctuation">:</span><span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.创建URL</span>NSURL <span class="token operator">*</span>url <span class="token operator">=</span> <span class="token punctuation">[</span>NSURL URLWithString<span class="token punctuation">:</span>@<span class="token string">"http://www.baidu.com/"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.创建Request</span>NSURLRequest <span class="token operator">*</span>request <span class="token operator">=</span><span class="token punctuation">[</span>NSURLRequest requestWithURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.加载网页</span><span class="token punctuation">[</span>webView loadRequest<span class="token punctuation">:</span>request<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5.最后将webView添加到界面</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>webView<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心代码2：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 创建WKWebView</span>WKWebView <span class="token operator">*</span>webView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>WKWebView alloc<span class="token punctuation">]</span> initWithFrame<span class="token punctuation">:</span><span class="token punctuation">[</span>UIScreen mainScreen<span class="token punctuation">]</span><span class="token punctuation">.</span>bounds<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置访问的URL</span>NSURL <span class="token operator">*</span>url <span class="token operator">=</span> <span class="token punctuation">[</span>NSURL URLWithString<span class="token punctuation">:</span>@<span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据URL创建请求</span>NSURLRequest <span class="token operator">*</span>request <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLRequest requestWithURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// WKWebView加载请求</span><span class="token punctuation">[</span>webView loadRequest<span class="token punctuation">:</span>request<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将WKWebView添加到视图</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>webView<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DSBridge-for-IOS"><a href="#DSBridge-for-IOS" class="headerlink" title="DSBridge  for  IOS"></a>DSBridge  for  IOS</h1><p><img src="https://github.com/wendux/DSBridge-IOS/raw/master/img/dsbridge.png" alt="dsBridge"></p><p><a href="https://github.com/wendux/DSBridge-IOS" target="_blank" rel="noopener"><img src="https://img.shields.io/cocoapods/v/dsBridge.svg?style=flat" alt="cocoapods"></a>  <img src="https://img.shields.io/badge/language-object--c-yellow.svg" alt> <a href="https://travis-ci.org/wendux/DSBridge-IOS" target="_blank" rel="noopener"><img src="https://travis-ci.org/wendux/DSBridge-IOS.svg?branch=master" alt></a> <a href="https://opensource.org/licenses/mit-license.php" target="_blank" rel="noopener"><img src="https://img.shields.io/packagist/l/doctrine/orm.svg" alt="MIT Licence"></a>  <img src="https://img.shields.io/badge/support-IOS%208%2B-green.svg" alt="support"> <img src="https://img.shields.io/badge/platform-ios%7Cosx-ff69b4.svg" alt="platform"> <a href="https://github.com/wendux/DSBridge-IOS/" target="_blank" rel="noopener"><img src="https://img.shields.io/github/last-commit/wendux/DSBridge-IOS.svg?color=blue" alt="GitHub last commit"></a> </p><blockquote><p>三端易用的现代跨平台 Javascript bridge， 通过它，你可以在Javascript和原生之间同步或异步的调用彼此的函数.</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>DSBridge v3.0 是一个里程碑版本，和v2.0相比，有许多变化，需要注意的是v3.0<strong>不兼容</strong>之前版本，但是我们也会继续维护v2.0分支，所以，如果你是v2.0的使用者，请放心继续使用v2.0，如果你是新用户，请使用&gt;=v3.0.</p><p><a href="https://github.com/wendux/DSBridge-IOS/issues/25" target="_blank" rel="noopener">DSBridge v3.0.0 更新列表</a> </p><p><a href="https://github.com/wendux/DSBridge-Android" target="_blank" rel="noopener">DSBridge-Android</a> </p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>Android、IOS、Javascript 三端易用，轻量且强大、安全且健壮。</li><li>同时支持同步调用和异步调用</li><li>支持以类的方式集中统一管理API</li><li>支持API命名空间</li><li>支持调试模式</li><li>支持API存在性检测</li><li>支持进度回调：一次调用，多次返回</li><li>支持Javascript关闭页面事件回调</li><li>支持Javascript 模态/非模态对话框</li><li>Android端支持腾讯X5内核</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-shell"><code class="language-shell">pod "dsBridge"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>请参考工程目录下的 <code>dsbridgedemo/</code> 文件夹. 运行并查看示例交互.</p><p>如果要在你自己的项目中使用 dsBridge :</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>新建一个类，实现API </p><pre class="line-numbers language-objective-c"><code class="language-objective-c">#import "dsbridge.h" ...@implementation JsApiTest//同步API - (NSString *) testSyn:(NSString *) msg{    return [msg stringByAppendingString:@"[ syn call]"];}//异步API- (void) testAsyn:(NSString *) msg :(JSCallback)completionHandler{    completionHandler([msg stringByAppendingString:@" [ asyn call]"],YES);}@end <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，DSBridge正式通过API类的方式集中、统一地管理API。</p></li><li><p>添加API类实例到 DWKWebView </p><pre class="line-numbers language-objective-c"><code class="language-objective-c">DWKWebView * dwebview=[[DWKWebView alloc] initWithFrame:bounds];// register api object without namespace[dwebview addJavascriptObject:[[JsApiTest alloc] init] namespace:nil];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在Javascript中调用原生 (Java/Object-c/swift) API ,并注册一个 javascript API供原生调用.</p><ul><li><p>初始化 dsBridge</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//cdn方式引入初始化代码(中国地区慢，建议下载到本地工程)</span><span class="token comment" spellcheck="true">//&lt;script src="https://cdn.jsdelivr.net/npm/dsbridge@3.1.4/dist/dsbridge.js"> //&lt;/script></span><span class="token comment" spellcheck="true">//npm方式安装初始化代码</span><span class="token comment" spellcheck="true">//npm install dsbridge@3.1.4</span><span class="token keyword">var</span> dsBridge<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dsbridge"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用原生API ,并注册一个 javascript API供原生调用.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步调用</span><span class="token keyword">var</span> str<span class="token operator">=</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"testSyn"</span><span class="token punctuation">,</span><span class="token string">"testSyn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步调用</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"testAsyn"</span><span class="token punctuation">,</span><span class="token string">"testAsyn"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注册 javascript API </span> dsBridge<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'addValue'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>在Object-c中调用Javascript API </p><pre class="line-numbers language-objective-c"><code class="language-objective-c">    [dwebview callHandler:@"addValue" arguments:@[@3,@4] completionHandler:^(NSNumber* value){           NSLog(@"%@",value);    }];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Object-C-API-签名"><a href="#Object-C-API-签名" class="headerlink" title="Object-C API 签名"></a>Object-C API 签名</h2><p> OC API 必须符合如下签名:</p><ol><li><p>同步API.</p><p><strong><code>(id) handler:(id) msg</code></strong></p><p>参数可以是任何类型, 但是返回值类型不能为 <strong>void。</strong> <strong>如果不需要参数，也必须声明</strong>，声明后不使用就行。</p><blockquote><p>如果同步API返回值类型为void，调用时则会导致Crash，请务必遵守签名规范。</p></blockquote></li><li><p>异步 API.</p><p><strong><code>(void) handler:(id)arg :(void (^)( id result,BOOL complete))completionHandler）</code></strong></p><p><code>JSCallback</code> 是一个block类型:</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">typedef void (^JSCallback)(NSString * _Nullable result,BOOL complete); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p>注意：API名字<strong>不能</strong>以”init”开始，因为oc的类中是被预留的, 如果以”init”开始，执行结果将无法预期(很多时候会crash)。</p></blockquote><h2 id="在Swift中使用"><a href="#在Swift中使用" class="headerlink" title="在Swift中使用"></a>在Swift中使用</h2><p>在 Swift中，你应该按照如下方式声明APIs:</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//必须给第一个参数前添加下划线"_"来显式忽略参数名。</span><span class="token atrule">@objc</span> <span class="token keyword">func</span> <span class="token function">testSyn</span><span class="token punctuation">(</span> <span class="token number">_</span> arg<span class="token punctuation">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span><span class="token string">"%@[Swift sync call:%@]"</span><span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token atrule">@objc</span> <span class="token keyword">func</span> <span class="token function">testAsyn</span><span class="token punctuation">(</span> <span class="token number">_</span> arg<span class="token punctuation">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span><span class="token string">"%@[Swift async call:%@]"</span><span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有两点必须注意:</p><ul><li>必须给Swift API添加 “@objc” 标注。</li><li>必须给第一个参数前添加下划线”_”来显式忽略参数名</li></ul><p>完整的示例在 <a href="https://github.com/wendux/DSBridge-IOS/blob/master/dsbridgedemo/JsApiTestSwift.swift" target="_blank" rel="noopener">这里</a> .</p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间可以帮助你更好的管理API，这在API数量多的时候非常实用，比如在混合应用中。DSBridge (&gt;= v3.0.0) 支持你通过命名空间将API分类管理，并且命名空间支持多级的，不同级之间只需用’.’ 分隔即可。</p><h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><p>在调试模式时，发生一些错误时，将会以弹窗形式提示，并且原生API如果触发异常将不会被自动捕获，因为在调试阶段应该将问题暴露出来。如果调试模式关闭，错误将不会弹窗，并且会自动捕获API触发的异常，防止crash。强烈建议在开发阶段开启调试模式，可以通过如下代码开启调试模式：</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">// open debug mode[dwebview setDebugMode:true];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="进度回调"><a href="#进度回调" class="headerlink" title="进度回调"></a>进度回调</h2><p>通常情况下，调用一个方法结束后会返回一个结果，是一一对应的。但是有时会遇到一次调用需要多次返回的场景，比如在javascript钟调用端上的一个下载文件功能，端上在下载过程中会多次通知javascript进度, 然后javascript将进度信息展示在h5页面上，这是一个典型的一次调用，多次返回的场景，如果使用其它Javascript bridge,  你将会发现要实现这个功能会比较麻烦，而DSBridge本省支持进度回调，你可以非常简单方便的实现一次调用需要多次返回的场景，下面我们实现一个倒计时的例子：</p><p>In Object-c</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">- ( void )callProgress:(NSDictionary *) args :(JSCallback)completionHandler{    value=10;    hanlder=completionHandler;    timer =  [NSTimer scheduledTimerWithTimeInterval:1.0                                              target:self                                            selector:@selector(onTimer:)                                            userInfo:nil                                             repeats:YES];}-(void)onTimer:t{    if(value!=-1){        hanlder([NSNumber numberWithInt:value--],NO);    }else{        hanlder(@"",YES);        [timer invalidate];    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In javascript</p><pre class="line-numbers language-javascript"><code class="language-javascript">dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"callProgress"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> value<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整的示例代码请参考demo工程。</p><h2 id="Javascript-弹出框"><a href="#Javascript-弹出框" class="headerlink" title="Javascript 弹出框"></a>Javascript 弹出框</h2><p>DSBridge已经实现了 Javascript的弹出框函数(alert/confirm/prompt)，这些对话框按钮、标签文字默认都是中文的，如果你想自定义这些文本可以参考 <code>customJavascriptDialogLabelTitles</code> API，如果你不想使用DSBridge实现的对话框，你可以通过设置<code>DSUIDelegate</code> 属性（是WKUIDelegate的代理属性）完全自定义。</p><p>另外注意，DSBridge实现的弹出框都是模态的，这会阻塞UI线程，如果你需要非模态的对话框，请参考<code>disableJavascriptDialogBlock</code> API.</p><h1 id="WKUIDelegate"><a href="#WKUIDelegate" class="headerlink" title="WKUIDelegate"></a>WKUIDelegate</h1><p>在 <code>DWKWebView</code> 中，请使用<code>DSUIDelegate</code> 代替 <code>UIDelegate</code> , 因为在<code>DWKWebView</code> 内部 <code>UIDelegate</code>已经设置过了，而 <code>DSUIDelegate</code> 正是  <code>UIDelegate</code> 的一个代理。</p><h2 id="API-列表"><a href="#API-列表" class="headerlink" title="API 列表"></a>API 列表</h2><h3 id="Object-C-API"><a href="#Object-C-API" class="headerlink" title="Object-C API"></a>Object-C API</h3><p>在Object-c中我们把实现了供 javascript调用的 API类的实例 成为 <strong>Object-c API object</strong>.</p><h5 id="addJavascriptObject-id-object-namespace-NSString-namespace"><a href="#addJavascriptObject-id-object-namespace-NSString-namespace" class="headerlink" title="addJavascriptObject:(id) object namespace:(NSString *) namespace"></a><code>addJavascriptObject:(id) object namespace:(NSString *) namespace</code></h5><p>添加一个 Object-c API object 到DWKWebView，并为它指定一个命名空间. 然后，在 javascript 中就可以通过<code>bridge.call(&quot;namespace.api&quot;,...)</code>来调用Object-c API object中的原生API了。</p><p>如果命名空间是空(nil或空字符串）, 那么这个添加的  Object-c API object就没有命名空间。在 javascript 通过 <code>bridge.call(&quot;api&quot;,...)</code>调用。</p><p>示例:</p><p><strong>In Object-c</strong></p><pre class="line-numbers language-objective-c"><code class="language-objective-c">@implementation JsEchoApi- (id) syn:(id) arg{    return arg;}- (void) asyn: (id) arg :(JSCallback)completionHandler{    completionHandler(arg,YES);}@end// register api object with namespace "echo"[dwebview addJavascriptObject:[[JsEchoApi alloc] init] namespace:@"echo"];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>In Javascript</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// call echo.syn</span><span class="token keyword">var</span> ret<span class="token operator">=</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"echo.syn"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token string">" I am echoSyn call"</span><span class="token punctuation">,</span> tag<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// call echo.asyn</span>dsBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"echo.asyn"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token string">" I am echoAsyn call"</span><span class="token punctuation">,</span>tag<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="removeJavascriptObject-NSString-namespace"><a href="#removeJavascriptObject-NSString-namespace" class="headerlink" title="removeJavascriptObject:(NSString *) namespace"></a><code>removeJavascriptObject:(NSString *) namespace</code></h5><p>通过命名空间名称移除相应的  Object-c API object.</p><h5 id="callHandler-NSString-methodName-arguments-NSArray-args"><a href="#callHandler-NSString-methodName-arguments-NSArray-args" class="headerlink" title="callHandler:(NSString *) methodName  arguments:(NSArray *) args"></a><code>callHandler:(NSString *) methodName  arguments:(NSArray *) args</code></h5><h5 id="callHandler-NSString-methodName-completionHandler-void-id-value-completionHandler"><a href="#callHandler-NSString-methodName-completionHandler-void-id-value-completionHandler" class="headerlink" title="callHandler:(NSString *) methodName  completionHandler:(void (^)(id value))completionHandler"></a><code>callHandler:(NSString *) methodName  completionHandler:(void (^)(id value))completionHandler</code></h5><h5 id="callHandler-NSString-methodName-arguments-NSArray-args-completionHandler-void-id-value-completionHandler"><a href="#callHandler-NSString-methodName-arguments-NSArray-args-completionHandler-void-id-value-completionHandler" class="headerlink" title="callHandler:(NSString *) methodName  arguments:(NSArray *) args completionHandler:(void (^ )(id value))completionHandler"></a><code>callHandler:(NSString *) methodName  arguments:(NSArray *) args completionHandler:(void (^ )(id value))completionHandler</code></h5><p>调用 javascript API.<code>methodName</code>  为javascript API 的名称，可以包含命名空间；参数以数组传递，<code>argumentss</code>数组中的元素依次对应javascript API的形参；  <code>completionHandler</code> 用于接收javascript API的返回值，<strong>注意： <code>completionHandler</code>将在主线程中被执行</strong>。</p><p>示例:</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">[dwebview callHandler:@"append" arguments:@[@"I",@"love",@"you"]  completionHandler:^(NSString * _Nullable value) {       NSLog(@"call succeed, append string is: %@",value);}];// call with namespace 'syn', More details to see the Demo project                    [dwebview callHandler:@"syn.getInfo" completionHandler:^(NSDictionary * _Nullable value) {        NSLog(@"Namespace syn.getInfo: %@",value);}];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="disableJavascriptDialogBlock-bool-disable"><a href="#disableJavascriptDialogBlock-bool-disable" class="headerlink" title="disableJavascriptDialogBlock:(bool) disable"></a><code>disableJavascriptDialogBlock:(bool) disable</code></h5><p><strong>小心使用</strong>. 如果你再javascript中调用弹窗函数(<code>alert</code>,<code>confirm</code>, 或 <code>prompt</code>)， 那么APP将会挂起，因为这些弹窗都是<strong>模态</strong>的，会阻塞APP主线程，此时javascript执行流也会阻塞。如果你想避免阻塞，可以通过此API禁止，禁止后，一旦 javascript中调用了这些弹窗函数，APP将弹出<strong>非模态</strong>对话框，并立即返回，(  <code>confirm</code> 会返回 <code>true</code>,  <code>prompt</code> 返回空字符串)。</p><p>如:</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">[dwebview disableJavascriptDialogBlock: true]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想恢复<strong>模态</strong>对话框，传 <code>false</code> 调用即可.</p><h5 id="setJavascriptCloseWindowListener-void-Nullable-void-callback"><a href="#setJavascriptCloseWindowListener-void-Nullable-void-callback" class="headerlink" title="setJavascriptCloseWindowListener:(void(^_Nullable)(void))callback"></a><code>setJavascriptCloseWindowListener:(void(^_Nullable)(void))callback</code></h5><p>当 Javascript中调用<code>window.close</code>时，DWKWebView会触发此监听器:</p><p>Example:</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">[dwebview setJavascriptCloseWindowListener:^{        NSLog(@"window.close called");}];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="hasJavascriptMethod-NSString-handlerName-methodExistCallback-void-bool-exist-callback"><a href="#hasJavascriptMethod-NSString-handlerName-methodExistCallback-void-bool-exist-callback" class="headerlink" title="hasJavascriptMethod:(NSString*) handlerName methodExistCallback:(void(^)(bool exist))callback"></a><code>hasJavascriptMethod:(NSString*) handlerName methodExistCallback:(void(^)(bool exist))callback</code></h5><p>检测是否存在指定的 javascript API，<code>handlerName</code>可以包含命名空间.</p><p>Example:</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">// test if javascript method exists.[dwebview hasJavascriptMethod:@"addValue" methodExistCallback:^(bool exist) {      NSLog(@"method 'addValue' exist : %d",exist);}];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="setDebugMode-bool-debug"><a href="#setDebugMode-bool-debug" class="headerlink" title="setDebugMode:(bool) debug"></a><code>setDebugMode:(bool) debug</code></h5><p>设置调试模式。在调试模式时，发生一些错误时，将会以弹窗形式提示，并且原生API如果触发异常将不会被自动捕获，因为在调试阶段应该将问题暴露出来。如果调试模式关闭，错误将不会弹窗，并且会自动捕获API触发的异常，防止crash。强烈建议在开发阶段开启调试模式。</p><h5 id="customJavascriptDialogLabelTitles-NSDictionary-dic"><a href="#customJavascriptDialogLabelTitles-NSDictionary-dic" class="headerlink" title="customJavascriptDialogLabelTitles:(NSDictionary*) dic"></a><code>customJavascriptDialogLabelTitles:(NSDictionary*) dic</code></h5><p>custom the  label text of  javascript dialog that includes alert/confirm/prompt, the default text language is Chinese.</p><p>自定义 javascript对话框上按钮、标签的文本，默认的文本语言是中文，你可以自定义英文，如：</p><pre class="line-numbers language-objective-c"><code class="language-objective-c">[dwebview customJavascriptDialogLabelTitles:@{ @"alertTitle":@"Notification", @"alertBtn":@"OK", @"confirmTitle":@"", @"confirmCancelBtn":@"CANCEL", @"confirmOkBtn":@"OK", @"promptCancelBtn":@"CANCEL", @"promptOkBtn":@"OK"}];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Javascript-API"><a href="#Javascript-API" class="headerlink" title="Javascript API"></a>Javascript API</h3><h5 id="dsBridge"><a href="#dsBridge" class="headerlink" title="dsBridge"></a>dsBridge</h5><p>“dsBridge” 在初始化之后可用 .</p><h5 id="dsBridge-call-method-arg-callback"><a href="#dsBridge-call-method-arg-callback" class="headerlink" title="dsBridge.call(method,[arg,callback])"></a><code>dsBridge.call(method,[arg,callback])</code></h5><p>同步或异步的调用Java API。</p><p><code>method</code>: Java API 名称， 可以包含命名空间。</p><p><code>arg</code>:传递给Java API 的参数。只能传一个，如果需要多个参数时，可以合并成一个json对象参数。</p><p><code>callback(String returnValue)</code>: 处理Java API的返回结果. 可选参数，<strong>只有异步调用时才需要提供</strong>.</p><h5 id="dsBridge-register-methodName-namespace-function-synApiObject"><a href="#dsBridge-register-methodName-namespace-function-synApiObject" class="headerlink" title="dsBridge.register(methodName|namespace,function|synApiObject)"></a><code>dsBridge.register(methodName|namespace,function|synApiObject)</code></h5><h5 id="dsBridge-registerAsyn-methodName-namespace-function-asyApiObject"><a href="#dsBridge-registerAsyn-methodName-namespace-function-asyApiObject" class="headerlink" title="dsBridge.registerAsyn(methodName|namespace,function|asyApiObject)"></a><code>dsBridge.registerAsyn(methodName|namespace,function|asyApiObject)</code></h5><p>注册同步/异步的Javascript API. 这两个方法都有两种调用形式：</p><ol><li><p>注册一个普通的方法，如:</p><p><strong>In Javascript</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">dsBridge<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'addValue'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dsBridge<span class="token punctuation">.</span><span class="token function">registerAsyn</span><span class="token punctuation">(</span><span class="token string">'append'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>arg3<span class="token punctuation">,</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">responseCallback</span><span class="token punctuation">(</span>arg1<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>arg2<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>arg3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>In Object-c</strong></p><pre class="line-numbers language-objective-c"><code class="language-objective-c">// call javascript method[dwebview callHandler:@"addValue" arguments:@[@3,@4] completionHandler:^(NSNumber * value){      NSLog(@"%@",value);}];[dwebview callHandler:@"append" arguments:@[@"I",@"love",@"you"] completionHandler:^(NSString * _Nullable value) {     NSLog(@"call succeed, append string is: %@",value);}];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p></li><li><p>注册一个对象，指定一个命名空间:</p><p><strong>In Javascript</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//namespace test for synchronous</span>dsBridge<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  tag<span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>  test1<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  test2<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"2"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//namespace test1 for asynchronous calls  </span>dsBridge<span class="token punctuation">.</span><span class="token function">registerAsyn</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  tag<span class="token operator">:</span><span class="token string">"test1"</span><span class="token punctuation">,</span>  test1<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">responseCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"1"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  test2<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">responseCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">"2"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为Javascript并不支持函数重载，所以不能在同一个Javascript对象中定义同名的同步函数和异步函数</p></blockquote><p><strong>In Object-c</strong></p><pre class="line-numbers language-objective-c"><code class="language-objective-c">[dwebview callHandler:@"test.test1" completionHandler:^(NSString * _Nullable value) {        NSLog(@"Namespace test.test1: %@",value);}];[dwebview callHandler:@"test1.test1" completionHandler:^(NSString * _Nullable value) {        NSLog(@"Namespace test1.test1: %@",value);}];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="dsBridge-hasNativeMethod-handlerName-type"><a href="#dsBridge-hasNativeMethod-handlerName-type" class="headerlink" title="dsBridge.hasNativeMethod(handlerName,[type])"></a><code>dsBridge.hasNativeMethod(handlerName,[type])</code></h5><p>检测Java中是否存在名为<code>handlerName</code>的API, <code>handlerName</code> 可以包含命名空间. </p><p><code>type</code>: 可选参数，<code>[&quot;all&quot;|&quot;syn&quot;|&quot;asyn&quot; ]</code>, 默认是 “all”.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//检测是否存在一个名为'testAsyn'的API(无论同步还是异步)</span>dsBridge<span class="token punctuation">.</span><span class="token function">hasNativeMethod</span><span class="token punctuation">(</span><span class="token string">'testAsyn'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//检测test命名空间下是否存在一个’testAsyn’的API</span>dsBridge<span class="token punctuation">.</span><span class="token function">hasNativeMethod</span><span class="token punctuation">(</span><span class="token string">'test.testAsyn'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 检测是否存在一个名为"testSyn"的异步API</span>dsBridge<span class="token punctuation">.</span><span class="token function">hasNativeMethod</span><span class="token punctuation">(</span><span class="token string">'testSyn'</span><span class="token punctuation">,</span><span class="token string">'asyn'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="dsBridge-disableJavascriptDialogBlock-disable"><a href="#dsBridge-disableJavascriptDialogBlock-disable" class="headerlink" title="dsBridge.disableJavascriptDialogBlock(disable)"></a><code>dsBridge.disableJavascriptDialogBlock(disable)</code></h5><p>调用 <code>dsBridge.disableJavascriptDialogBlock(...)</code> 和在Java中调用 <code>dwebview.disableJavascriptDialogBlock(...)</code> 作用一样.</p><p>示例:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//disable</span>dsBridge<span class="token punctuation">.</span><span class="token function">disableJavascriptDialogBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//enable</span>dsBridge<span class="token punctuation">.</span><span class="token function">disableJavascriptDialogBlock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="和-fly-js一起使用"><a href="#和-fly-js一起使用" class="headerlink" title="和 fly.js一起使用"></a>和 fly.js一起使用</h2><p>当dsBridge遇见  <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a>  时，将会打开一个新的世界。<a href="https://github.com/wendux/fly" target="_blank" rel="noopener">fly.js传送门</a></p><p>正如我们所知，在浏览器中，ajax请求受同源策略限制，不能跨域请求资源。然而，  <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a> 有一个强大的功能就是支持请求重定向：将ajax请求通过任何Javascript bridge重定向到端上，并且 <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a> 官方已经提供的 dsBridge 的 adapter, 可以非常方便的协同dsBridge一起使用。由于端上没有同源策略的限制，所以 fly.js可以请求任何域的资源。</p><p>另一个典型的使用场景是在混合APP中，由于<a href="https://github.com/wendux/fly" target="_blank" rel="noopener">Fly.js</a> 可以将所有ajax请求转发到端上，所以，开发者就可以在端上进行统一的请求管理、证书校验、cookie管理、访问控制等。</p><p>详情请参考 <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">https://github.com/wendux/fly</a>.  （DSBridge Android版 demo中包含fly.js的示例）</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你喜欢 DSBridge, 欢迎star，以便更多的人知道它, 谢谢 !</p>]]></content>
      
      
      <categories>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓-webview</title>
      <link href="/2021/07/26/an-zhuo-webview/"/>
      <url>/2021/07/26/an-zhuo-webview/</url>
      
        <content type="html"><![CDATA[<h4 id="1、android-webView-H5"><a href="#1、android-webView-H5" class="headerlink" title="1、android-webView-H5"></a>1、android-webView-H5</h4><p><a href="https://github.com/imchloeo/android-webView-H5" target="_blank" rel="noopener">原文</a></p><ul><li><p>使用安卓 webView 打包 H5 页面/网站，可以像 App 一样安装在安卓手机上，<a href="https://github.com/xiaoxcx/android-webView-H5" target="_blank" rel="noopener">代码地址</a></p></li><li><p>这里的代码算是个完整的项目了，只需要把 app/java/com.example.test/MainActivity.java 里面第137行的 url 改成你要打包的网页地址就可以了</p></li></ul><!-- #### 2、新增优化- 新增拍照、录制视频、调用相册功能```javawebView.setWebChromeClient(new WebChromeClient() {    //            WebChromeClient.CustomViewCallback mCallback;    // For Android >= 5.0    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)    // 调用安卓功能    @Override    public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {        Log.d(TAG, "onShowFileChooser( ValueCallback uploadMsg, String acceptType )");        getPermission();        mUploadCallbackAboveL = filePathCallback;        if (fileChooserParams.isCaptureEnabled()) {            String[] acceptTypes = fileChooserParams.getAcceptTypes();            Log.d(TAG, "acceptTypes=" + acceptTypes);            for (int i = 0; i < acceptTypes.length; i++) {                if (acceptTypes[i].contains("video")) {                    mVideoFlag = true;                    break;                }            }            if (mVideoFlag) {                recordVideo();                mVideoFlag = false;            } else {                takePhoto();            }        } else {            String[] acceptTypes1 = fileChooserParams.getAcceptTypes();            for (int i = 0; i < acceptTypes1.length; i++) {                if (acceptTypes1[i].contains("video")) {                    mPickVideoFlag = true;                    break;                }            }            if (mPickVideoFlag) {                pickVideo();                mPickVideoFlag = false;            } else {                pickPhoto();            }        }        return true;    }    //录音权限    @Override    public void onPermissionRequest(PermissionRequest request) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            //直接同意即可     deny是拒绝            request.grant(request.getResources());            // getPermission();        }    }    // 定位权限    @Override    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {        callback.invoke(origin, true, true);        super.onGeolocationPermissionsShowPrompt(origin, callback);        // getPermission();    }    // 视频窗口放大操作    @Override    public void onShowCustomView(View view, CustomViewCallback callback) {        showCustomView(view, callback);    }    // 视频窗口关闭操作    @Override    public void onHideCustomView() {        hideCustomView();    }});```#### 3、 权限代码封装```java//  获取权限public void getPermission(){    if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)            || PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)            || PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)            || PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)            || PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)    ) {        Toast.makeText(getApplicationContext(),"Please go to settings to open permissions",Toast.LENGTH_SHORT).show();        // 申请一个（或多个）权限，并提供用于回调返回的获取码（用户定义）        ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.WRITE_EXTERNAL_STORAGE,Manifest.permission.RECORD_AUDIO,Manifest.permission.CAMERA}, 100);        return;    } else {        return;    }}```#### 4、新增拍照、录制视频、调用相册功能调用```java//激活相册操作private void pickPhoto() {    Intent intent = new Intent();    intent.setAction(Intent.ACTION_PICK);    intent.setType("image/*");    startActivityForResult(intent, REQ_PHOTO);}//激活相册视频private void pickVideo() {    Intent intent = new Intent();    intent.setAction(Intent.ACTION_PICK);    intent.setType("video/*");    startActivityForResult(intent, REQ_PHOTO);}/** * 拍照 */private void takePhoto() {    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);    mImageUri = getImageUri();    intent.putExtra(MediaStore.EXTRA_OUTPUT, mImageUri);    startActivityForResult(intent, PHOTO_REQUEST);}public Uri getImageUri() {    File file = new File(Environment.getExternalStorageDirectory(), "/temp/" + System.currentTimeMillis() + ".jpg");    if (!file.getParentFile().exists()) {        file.getParentFile().mkdirs();    }    String path = file.getPath();    Uri imageUri;    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {        imageUri = Uri.fromFile(file);    } else {        //兼容android7.0 使用共享文件的形式        ContentValues contentValues = new ContentValues(1);        contentValues.put(MediaStore.Images.Media.DATA, path);        imageUri = this.getApplication().getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);    }    return imageUri;}/** * 录像*/private void recordVideo() {    Intent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);    intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 1);    //限制时长    intent.putExtra(MediaStore.EXTRA_DURATION_LIMIT, 120);    //开启摄像机    startActivityForResult(intent, VIDEO_REQUEST);}```#### 5、调用接口返回```java@Overrideprotected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {    super.onActivityResult(requestCode, resultCode, data);    Log.d(TAG, "onActivityResult===data=" + data);    if (requestCode == REQ_CAMERA || requestCode == REQ_VIDEO || requestCode == REQ_PHOTO) {        if (null == mUploadMessage && null == mUploadCallbackAboveL) return;        Uri result = data == null || resultCode != RESULT_OK ? null : data.getData();        if (mUploadCallbackAboveL != null) {            onActivityResultAboveL(requestCode, resultCode, data);        } else if (mUploadMessage != null) {            mUploadMessage.onReceiveValue(result);            mUploadMessage = null;        }    }}@TargetApi(Build.VERSION_CODES.LOLLIPOP)private void onActivityResultAboveL(int requestCode, int resultCode, Intent data) {    Log.d(TAG, "onActivityResultAboveL===data=" + data);    Uri[] results = null;    if (resultCode == Activity.RESULT_OK) {        if (data == null) {            results = new Uri[]{mImageUri};        } else {            String dataString = data.getDataString();            Log.d(TAG,  "onActivityResultAboveL===dataString=" + dataString);            ClipData clipData = data.getClipData();            if (clipData != null) {                results = new Uri[clipData.getItemCount()];                for (int i = 0; i < clipData.getItemCount(); i++) {                    ClipData.Item item = clipData.getItemAt(i);                    results[i] = item.getUri();                }            }            if (dataString != null)                results = new Uri[]{Uri.parse(dataString)};        }    }    if (results != null) {        mUploadCallbackAboveL.onReceiveValue(results);    } else {        results = new Uri[]{};        mUploadCallbackAboveL.onReceiveValue(results);    }    mUploadCallbackAboveL = null;}```#### 6、视频全屏播放操作```java/** 视频播放全屏 **/public void showCustomView(View view, WebChromeClient.CustomViewCallback callback) {    // if a view already exists then immediately terminate the new one    if (myView != null) {        callback.onCustomViewHidden();        return;    }    getWindow().getDecorView();    FrameLayout decor = (FrameLayout) getWindow().getDecorView();    flVideoContainer = new FullscreenHolder(this);    flVideoContainer.addView(view, COVER_SCREEN_PARAMS);    decor.addView(flVideoContainer, COVER_SCREEN_PARAMS);    myView = view;    setStatusBarVisibility(false);    customViewCallback = callback;}/** 隐藏视频全屏 */public void hideCustomView() {    if (myView == null) {        return;    }    setStatusBarVisibility(true);    FrameLayout decor = (FrameLayout) getWindow().getDecorView();    decor.removeView(flVideoContainer);    flVideoContainer = null;    myView = null;    customViewCallback.onCustomViewHidden();    webView.setVisibility(View.VISIBLE);}/** 全屏容器界面 */static class FullscreenHolder extends FrameLayout {    public FullscreenHolder(Context ctx) {        super(ctx);        setBackgroundColor(ctx.getResources().getColor(android.R.color.black));    }    @Override    public boolean onTouchEvent(MotionEvent evt) {        return true;    }}```#### 7、activity_main.xml页面，附加有视频全屏操作代码```xml<?xml version="1.0" encoding="utf-8"?><LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:orientation="horizontal">    <WebView        android:id="@+id/web_view"        android:layout_width="match_parent"        android:layout_height="match_parent" >    </WebView>    <FrameLayout        android:id="@+id/flVideoContainer"        android:layout_width="match_parent"        android:layout_height="match_parent">    </FrameLayout></LinearLayout>``` --><h4 id="8、权限分配页面"><a href="#8、权限分配页面" class="headerlink" title="8、权限分配页面"></a>8、权限分配页面</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;application        android:hardwareAccelerated ="true"        android:allowBackup="true"        android:icon="@mipmap/ic_launcher"        android:label="@string/app_name"        android:roundIcon="@mipmap/ic_launcher_round"        android:supportsRtl="true"        android:theme="@style/Theme.Hyoa"        android:usesCleartextTraffic="true"        tools:targetApi="m">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>hardwareAccelerated</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>configChanges</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orientation|screenSize|keyboardHidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>android.permission.INTERNET<span class="token punctuation">'</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ManifestOrder,WrongManifestParent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 拍照权限--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.CAMERA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-feature</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.hardware.camera<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uses-feature</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-feature</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.hardware.camera.autofocus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uses-feature</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 读写权限--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.READ_EXTERNAL_STORAGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ScopedStorage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 录音权限--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.RECORD_AUDIO<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.MODIFY_AUDIO_SETTINGS<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 粗略定位权限，允许一个程序通过网络获取粗略的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.ACCESS_COARSE_LOCATION<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 精确定位权限，允许一个程序访问精确位置(GPS定位) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.ACCESS_FINE_LOCATION<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 在Android10.0出来了一个新的权限：--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.ACCESS_BACKGROUND_LOCATION<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9、安卓手机中，H5页面回退操作"><a href="#9、安卓手机中，H5页面回退操作" class="headerlink" title="9、安卓手机中，H5页面回退操作"></a>9、安卓手机中，H5页面回退操作</h4><pre><code>@Overridepublic boolean onKeyUp(int keyCode, KeyEvent event) {    switch (keyCode) {        case KeyEvent.KEYCODE_BACK:            /** 回退键 事件处理 优先级:视频播放全屏-网页回退-关闭页面 */            if (myView != null) {                hideCustomView();            } else if (webView.canGoBack()) {                webView.goBack();            } else {                finish();            }            return true;        default:            return super.onKeyUp(keyCode, event);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6补充&amp;正则表达式</title>
      <link href="/2021/07/18/es6-bu-chong-zheng-ze-biao-da-shi/"/>
      <url>/2021/07/18/es6-bu-chong-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[20,30]</span><span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span>total<span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> sum1 <span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> sum2 <span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum1<span class="token punctuation">,</span>sum2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6,11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>剩余参数和解构配合使用</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lishi'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span><span class="token operator">...</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> students<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//wangwu</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//["zhangsan", "lishi"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES6的内置扩展对象"><a href="#ES6的内置扩展对象" class="headerlink" title="ES6的内置扩展对象"></a>ES6的内置扩展对象</h2><h2 id="Array的扩展方法"><a href="#Array的扩展方法" class="headerlink" title="Array的扩展方法"></a>Array的扩展方法</h2><p>扩展运算符</p><ul><li>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</li><li>如下例子中，逗号都当作参数中间的分隔符</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// ...ary</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>ary<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">///123相当于下面的代码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将类数组或可遍历对象转换为真正的数组</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> oDivs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oDivs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>oDivs<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oDivs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h2><p>将伪数组或可遍历对象转换为真正的数组</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arrayLike<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'0'</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">,</span>    <span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">,</span>    length<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//转成数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//["a", "b", "c"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">let</span> arrayLike<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'0'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">,</span>    <span class="token string">'length'</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//转成数组</span> <span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[2,4]</span> PS<span class="token punctuation">:</span>如果是对象，那么属性需要些对应的索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例方法：find()</p><ul><li>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</li></ul><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">let</span> ary <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>     id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span><span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'李四'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//找数组中元素Id等于2的值,但是只会匹配第一个</span> <span class="token keyword">let</span> target <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Object{id: 2, name: "李四"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例方法：findIndex()</p><ul><li>用于找出第一个符合条件的数组成员的位置（在数组中的索引），如果没有找到则返回-1</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token keyword">let</span> index <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例方法：includes()</p><ul><li>判断某个数组是否包含给定的值，返回布尔值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="String的扩展方法"><a href="#String的扩展方法" class="headerlink" title="String的扩展方法"></a>String的扩展方法</h2><p>模板字符串</p><ul><li>ES6中新增的创建字符串的方式，使用反引号定义</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token string">`zhangsan`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>模板字符串中可以解析变量</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello,my name is 张三</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>模板字符串中可以换行</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">`    &lt;div>         &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>         &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>         &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>    &lt;/div>`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模板字符串中可以调用函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'哈哈哈哈，我无敌'</span><span class="token punctuation">}</span><span class="token keyword">let</span> greet <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 哈哈哈`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//哈哈哈哈，我无敌 哈哈哈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例方法：startsWith-和endsWith"><a href="#实例方法：startsWith-和endsWith" class="headerlink" title="实例方法：startsWith()和endsWith()"></a>实例方法：startsWith()和endsWith()</h2><ul><li>startWith():表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith():表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello world!'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h2><ul><li>repeat方法表示将原字符串重复N次，返回一个新字符串</li></ul><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//xxx</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//hellohello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h2><p>ES6提供了新的数据结构set,他类似于数组，但是成员的值都是唯一的，没有重复的值</p><ul><li>Set本身是一个构造函数，用来生成set数据结构</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Set函数可以接受一个数组作为参数，用来初始化</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{1, 2, 3, 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例方法</p><ul><li>add(value)：添加某个值，返回Set结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示是否删除成功</li><li>has(value):返回一个布尔值，表示该值是否为Set的成员</li><li>clear():清除所有成员，没有返回值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//向Set结构中添加值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//删除set结构中的2值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//表示set结构中是否有1这个值，返回布尔值</span><span class="token comment" spellcheck="true">// PS:删除的是元素的值,不是代表的索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历</p><ul><li>Set结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//向Set结构中添加值</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2021/07/18/ajax/"/>
      <url>/2021/07/18/ajax/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_29569183/article/details/79259889" target="_blank" rel="noopener">原文1</a><br><a href="http://www.luyixian.cn/javascript_show_151046.aspx" target="_blank" rel="noopener">原文3</a></p><h4 id="ajax概述"><a href="#ajax概述" class="headerlink" title="ajax概述"></a>ajax概述</h4><ol><li>ajax是Asynchronous JavaScript XML的简写，不是一门新技术，而是对现有技术的综合利用，这一技术能够像服务器请求额外数据而无需刷新页面，带来了更改的用户体验</li><li>ajax技术的核心是XMLHttpRequest对象（简称XMR）；ajax的通信必须借助一些hack手段来实现，大多数是使用隐藏的框架或者内嵌框架</li><li>XHR为向服务器发送请求和解析服务器响应，提供了流畅的接口。能够以异步的方式从服务器获取到更多的信息，意味着当用户点击后，可以不必刷新页面也能获取新数据，也就是说可以使用XHR对象取得新数据，然后再通过DOM将新数据插入到页面中去</li><li>虽然ajax名字中有XML的成分，但是ajax通信与数据格式无关，这种技术就是无需刷新页面就可以从服务器中获取到数据，其不一定是XML数据</li></ol><h4 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h4><p>不同的浏览器使用的异步调用对象也有所不同，在IE浏览器中异步调用，使用的是XMLHttp组件中的XMLRequest对象，而在火狐浏览器中则直接使用XMLHtppRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式不同</p><ul><li>在IE浏览器中创建XMLHttpRequest对象的方式如下：</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> xmlHttpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在Netscape浏览器中穿件XMLHttpRequest对象的方式如下：</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> xmlHttpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于无法确定用户使用的是什么样的浏览器，所以在创建XMLHttpRequest对象的时候，最好将以上两种方法都加上，如下所示：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script language <span class="token operator">=</span> <span class="token string">"javascript"</span> type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> xmlHttpRequest<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义一个变量,用于存放XMLHttpRequest对象</span>    <span class="token keyword">function</span> <span class="token function">createXMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//创建XMLHttpRequest对象的方法</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//判断是否是IE浏览器,因为ActiveXObject是IE浏览器支持的控件</span>        <span class="token punctuation">{</span>            xmlHttpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建IE浏览器中的XMLHttpRequest对象</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器</span>        <span class="token punctuation">{</span>            xmlHttpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建其他浏览器上的XMLHttpRequest对象</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">createXMLHttpRequst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//调用创建对象的方法</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建HTTP请求"><a href="#创建HTTP请求" class="headerlink" title="创建HTTP请求"></a>创建HTTP请求</h4><p>在创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据，通常可以是网站中的数据，也可以是本地种的其他文件数据<br>创建HTTP请求可以使用XMLHttpRequest对象的open()方法，其语法代码如下所示：</p><blockquote><p>XMLHttpRequest.open(method,URL,flag,name,password)</p></blockquote><p>代码中的相关参数如下：</p><ul><li>method：用于指定HTTP的请求方法，其中有get、post、head、delete等方法，常用的为get和post方法</li><li>URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL</li><li>flag:该参数为可选参数，参数值为布尔型。该参数用于指定是否使用异步方式，true表示异步方式，false表示同步方式，其中默认为true</li><li>name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数</li><li>password：该参数为可选参数，用于输入密码。如果服务器需要验证，则必须使用该参数。通常可以使用以下代码来访问一个网站文件的内容</li></ul><blockquote><p>XMLHttpRequest.open(“get”,”<a href="http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true" target="_blank" rel="noopener">http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true</a>);</p></blockquote><ul><li>或者可以使用以下代码来访问一个本地文件内容：</li></ul><blockquote><p>xmlHttpRequest.open(“get”,”ajax.html”,true);</p></blockquote><ul><li>PS：如果HTML文件放在web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open方法，只能打开与HTML文件在同一个服务器上的文件，而在IE浏览器上则无此限制，但是会有警告显示</li></ul><h4 id="设置获取服务器返回数据的语句"><a href="#设置获取服务器返回数据的语句" class="headerlink" title="设置获取服务器返回数据的语句"></a>设置获取服务器返回数据的语句</h4><p>如果XMLHttpRequest对象的readyState属性的值等于4，表示异步调用完成，就可以通过XMLHttpRequest对象的reponseText属性reponseXml属性来获取数据</p><p>但是异步调用过程完成，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200的时候，才表示异步调用成功<br>因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的属性值是否等于200，代码如下所示：</p><pre class="line-numbers language-js"><code class="language-js">注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest<span class="token punctuation">.</span>status的返回值为<span class="token number">0</span>。因此，如果该文件在本地运行，则应该加上xmlHttpRequest<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span>的判断。通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示：xmlHttpRequest<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成.//设置获取数据的语句 state=200说明服务器成功响应返回的结果是正确的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token operator">||</span>xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用以下语句将返回结果以字符串形式输出</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>xmlHttpRequest<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//或者使用以下语句将返回结果以XML形式输出</span>        <span class="token comment" spellcheck="true">//docunment.write(xmlHttpRequest.responseXML);</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h4><p>在经过以上结果步骤设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法，其语法代码如下：</p><blockquote><p>XMLHttpRequest.send(data)</p></blockquote><p>其中data是个可选参数，如果是get请求的数据写在URL中，那这里可以使用null来替代。如果是post请求，data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数示例</p><blockquote><p>name=myValue&amp;value=myValue</p></blockquote><p>另外，get和post请求发送请求的代码实现上还有以下区别：</p><ul><li>get请求需要防止客户端和服务器交互过程乱编码问题，注意在服务器配置编码格式或者把get请求的url用encodeURL方法处理转换为utf-8，而post则默认是ut-8编码，服务器默认是IOS-8859-1，如果也遇到乱码问题，在服务器端设置如下代码：<blockquote><p>request.setCharacterEncoding(“utf-8”);</p></blockquote></li></ul><p>而且根据http协议，要求post请求需要额外设置请求头，如下：</p><blockquote><p>xhr.setRequestHeader(“Content-Type”,”application/x-www-form-urlencoded”)</p></blockquote><p>只有在使用send方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readstatechange事件，并调用函数</p><p>####　局部更新</p><p>在通过ajax的异步调用获得服务器端数据之后，可以使用JavaScript或者DOM来将网页中的数据进行局部更新，常用的局部更新的方式有以下3种：</p><ul><li>⑴ 表单对象的数据更新</li><li>⑶ DOM技术的局部刷新</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>AJAX实例<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string">"javascript"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            <span class="token keyword">var</span> xmlHttpRequest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个变量用于存放XMLHttpRequest对象</span>            <span class="token comment" spellcheck="true">//定义一个用于创建XMLHttpRequest对象的函数</span>            <span class="token keyword">function</span> <span class="token function">createXMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//IE浏览器的创建方式</span>                    xmlHttpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windew<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//Netscape浏览器中的创建方式</span>                    xmlHttpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//响应HTTP请求状态变化的函数</span>            <span class="token keyword">function</span> <span class="token function">httpStateChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断异步调用是否完成</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttpRequest<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//判断异步调用是否成功,如果成功开始局部更新数据</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttpRequest<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">||</span> xmlHttpRequest<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//查找节点</span>                        <span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDIv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//更新数据</span>                        node<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> xmlHttpRequest<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果异步调用未成功,弹出警告框,并显示出错信息</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"异步调用出错/n返回的HTTP状态码为:"</span> <span class="token operator">+</span> xmlHttpRequest<span class="token punctuation">.</span>status <span class="token operator">+</span> <span class="token string">"/n返回的HTTP状态信息为:"</span> <span class="token operator">+</span> xmlHttpRequest<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//异步调用服务器段数据</span>            <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建XMLHttpRequest对象</span>                <span class="token function">createXMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttpRequest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//创建HTTP请求</span>                    xmlHttpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"ajax.text"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//设置HTTP请求状态变化的函数</span>                    xmlHttpRequest<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> httpStateChange<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//发送请求</span>                    xmlHttpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"myDiv"</span><span class="token operator">></span>原数据<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"更新数据"</span> onclick<span class="token operator">=</span><span class="token string">"getData()"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6笔记</title>
      <link href="/2021/07/18/es6-bi-ji/"/>
      <url>/2021/07/18/es6-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6笔记"><a href="#ES6笔记" class="headerlink" title="ES6笔记"></a>ES6笔记</h2><p><a href="https://www.jianshu.com/p/bba25659f0d4" target="_blank" rel="noopener">原文</a></p><h2 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h2><p>ES全称是ECMAScript，他是ECMA国际标准化组织制定的</p><h2 id="为什么用ES6"><a href="#为什么用ES6" class="headerlink" title="为什么用ES6"></a>为什么用ES6</h2><p>每一次标准的诞生都意味着语言的完整性，功能的加强。javascript语言本身也有一些令人不满意的地方</p><ul><li><strong>变量提升特性</strong>增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6-新增语法"><a href="#ES6-新增语法" class="headerlink" title="ES6 新增语法"></a>ES6 新增语法</h2><p>let</p><p>ES6中新增了用于声明变量的关键字</p><h3 id="let-声明的变量只在所处于的块级有效"><a href="#let-声明的变量只在所处于的块级有效" class="headerlink" title="let 声明的变量只在所处于的块级有效"></a>let 声明的变量只在所处于的块级有效</h3><p>可以防止内层变量覆盖外层变量</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>块级：if{} for循环<br>注意：使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域的特性</p><h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ES6语法中变量必须先声明才能引用，不能使用后再声明，会出错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//a is not defined</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响，不会再去外部作用域查找是否有同名变量</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Cannot access 'tmp' before initialization</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="ES6_files/1.jpg" alt></p><p>图解：此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值，并且此时的函数没调用就不会被执行</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="ES6_files/2.jpg" alt></p><p>图解：此题的关键在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时因为它本身作用域下没有i变量，跟进作用域链去查找后，输出的是自己上一级（循环产生的块级作用域）作用域下的i值</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中，使用let关键字声明的变量才具有块级作用域，而var关键字是不具备这个特点的</li><li>可以防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区的特性，只要是let声明的变量，就和当前块级作用域绑定，和外部变量名重名也毫无关系（互不影响）</li></ul><h3 id="为什么需要使用let-const关键词来创建变量或常量"><a href="#为什么需要使用let-const关键词来创建变量或常量" class="headerlink" title="为什么需要使用let const关键词来创建变量或常量"></a>为什么需要使用let const关键词来创建变量或常量</h3><ul><li>解决ES5使用var初始化变量时会出现的变量提升问题</li><li>解决使用闭包时出错的问题</li><li>解决使用计数的for循环变量时候，会导致泄露为全局变量的问题</li><li>ES5只有全局作用域和函数作用域(对应var声明的全局变量和局部变量时)，没有块级作用域(ES6中{}中的代码块)，同理只能在顶层作用域window中和函数中声明函数，不能在块级作用域中声明函数</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>声明产量，常量就是值（内存地址），不能变化的量</p><h3 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> PI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>常量赋值后，值不能修改。如果值是一个内存地址（存了数组或对象），那么可以对它里边的元素进行修改，但不能重新赋值（比如直接赋值一个新数组|新对象|简单数据类型）</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Assignment to constant variable.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul><li>const声明的变量是一个常量</li><li>既然常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明const时，必须要给定值</li></ul><h2 id="let、const、var的区别"><a href="#let、const、var的区别" class="headerlink" title="let、const、var的区别"></a>let、const、var的区别</h2><ul><li>使用var声明的变量，其作用域为<strong>该语句所在的函数内，而且存在变量提升现象</strong></li><li>使用let声明的变量，其作用域为<strong>该语句所在的代码块内，不存在变量提升</strong></li><li>使用const声明的是常量，其作用域为<strong>该语句所在的代码块内，不存在变量提升</strong>。在后面出现的代码中<strong>不能修改该常量（内存地址）的值。适用于函数的定义、数学公式中一些恒定不变的值</strong></li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>变量接收到–对应的每一个值，如果数组长度少于【】内变量个数，则多出来的变量得到是undefined</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//c</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>方法一：变量匹配的是每一个元素的属性，接收到的值是每一个元素的值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span>personconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'zhangsan'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：左边也以对象的形式，里边的【值】变量接收的是对应元素属性的值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span>myName<span class="token punctuation">,</span>age<span class="token punctuation">:</span>myAge<span class="token punctuation">}</span><span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myAge<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul><li>结构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果解构不成功，变量跟数值个数不匹配的时候，该变量的值为undefined</li><li>数值解构用括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6中新增的定义函数的方式</p><pre class="line-numbers language-ES6"><code class="language-ES6">()=>{ };  //():代表是函数；  =>:这个是必须要的是符号，指向哪一个代码块； {}：函数体const fn = () =>{}  //代表把一个函数赋值给fn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>函数体中只有一句代码，且代码的执行结果就是返回值</strong>，可以省略大括号</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ES6写法</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token operator">+</span>num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果形参只有一个</strong>，可以省略小括号</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ES6</span><span class="token keyword">const</span> fn <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数<strong>不绑定this关键字</strong>（没有属于自己的this），箭头函数中的this，指向的是函数定义位置的上下文this。如下，箭头函数被定义在fn内，它的this就跟随fn的this变成了obj</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">}</span> <span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 是obj对象</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">const</span> resFn <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">resFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul><li>箭头函数中不绑定this，箭头函数中的this指向的是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，他就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this执行的问题（匿名函数的执行环境具有全局作用域），包括setTimeout和setInerval中使用this造成的问题</li></ul><p>关键点：对象没有作用域，say方法是被定义在全局作用域下的</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//100</span><span class="token comment" spellcheck="true">// 箭头函数this指向的是被声明的作用域里边,而对象是没有作用域的,所以箭头函数虽然在对象中被定义,但是this指向的是全局作用域    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><ul><li>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[20,30]</span><span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span>total<span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> sum1 <span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> sum2 <span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum1<span class="token punctuation">,</span>sum2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6,11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>剩余参数和解构配合使用</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lishi'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span><span class="token operator">...</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> students<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//wangwu</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//["zhangsan", "lishi"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES6的内置扩展对象"><a href="#ES6的内置扩展对象" class="headerlink" title="ES6的内置扩展对象"></a>ES6的内置扩展对象</h2><h2 id="Array的扩展方法"><a href="#Array的扩展方法" class="headerlink" title="Array的扩展方法"></a>Array的扩展方法</h2><p>扩展运算符</p><ul><li>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</li><li>如下例子中，逗号都当作参数中间的分隔符</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// ...ary</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>ary<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">///123相当于下面的代码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将类数组或可遍历对象转换为真正的数组</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> oDivs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oDivs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>oDivs<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oDivs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h2><p>将伪数组或可遍历对象转换为真正的数组</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arrayLike<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'0'</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">,</span>    <span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">,</span>    length<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//转成数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//["a", "b", "c"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">let</span> arrayLike<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'0'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">,</span>    <span class="token string">'length'</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//转成数组</span> <span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[2,4]</span> PS<span class="token punctuation">:</span>如果是对象，那么属性需要些对应的索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例方法：find()</p><ul><li>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</li></ul><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">let</span> ary <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>     id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span><span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'李四'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//找数组中元素Id等于2的值,但是只会匹配第一个</span> <span class="token keyword">let</span> target <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Object{id: 2, name: "李四"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例方法：findIndex()</p><ul><li>用于找出第一个符合条件的数组成员的位置（在数组中的索引），如果没有找到则返回-1</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token keyword">let</span> index <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例方法：includes()</p><ul><li>判断某个数组是否包含给定的值，返回布尔值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="String的扩展方法"><a href="#String的扩展方法" class="headerlink" title="String的扩展方法"></a>String的扩展方法</h2><p>模板字符串</p><ul><li>ES6中新增的创建字符串的方式，使用反引号定义</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token string">`zhangsan`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>模板字符串中可以解析变量</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello,my name is 张三</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>模板字符串中可以换行</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">`    &lt;div>         &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>         &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>         &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>    &lt;/div>`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模板字符串中可以调用函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'哈哈哈哈，我无敌'</span><span class="token punctuation">}</span><span class="token keyword">let</span> greet <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 哈哈哈`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//哈哈哈哈，我无敌 哈哈哈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例方法：startsWith-和endsWith"><a href="#实例方法：startsWith-和endsWith" class="headerlink" title="实例方法：startsWith()和endsWith()"></a>实例方法：startsWith()和endsWith()</h2><ul><li>startWith():表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith():表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello world!'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h2><ul><li>repeat方法表示将原字符串重复N次，返回一个新字符串</li></ul><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//xxx</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//hellohello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h2><p>ES6提供了新的数据结构set,他类似于数组，但是成员的值都是唯一的，没有重复的值</p><ul><li>Set本身是一个构造函数，用来生成set数据结构</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Set函数可以接受一个数组作为参数，用来初始化</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{1, 2, 3, 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例方法</p><ul><li>add(value)：添加某个值，返回Set结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示是否删除成功</li><li>has(value):返回一个布尔值，表示该值是否为Set的成员</li><li>clear():清除所有成员，没有返回值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//向Set结构中添加值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//删除set结构中的2值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//表示set结构中是否有1这个值，返回布尔值</span><span class="token comment" spellcheck="true">// PS:删除的是元素的值,不是代表的索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历</p><ul><li>Set结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//向Set结构中添加值</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css布局的几种方式</title>
      <link href="/2021/07/18/css-bu-ju/"/>
      <url>/2021/07/18/css-bu-ju/</url>
      
        <content type="html"><![CDATA[<h4 id="1-table-布局"><a href="#1-table-布局" class="headerlink" title="1 table 布局"></a>1 table 布局</h4><p>table是最简单的布局方式，其表格中的内容可以自动居中，这是之前运用的特别多的一种布局方式<br>现在，又有加入了display:table;display:table-cell来支持table布局</p><p>但是它也有自身的局限性，比如table比其他的html占更多的字节(造成下载时间延迟，占用服务器更多的流量资源)，table会阻拦浏览器渲染引擎的渲染顺序，会延迟页面的生成速度，让用户等待更久的时间，但是在某种情况下；当采用其他方式不能很好的达到自己的效果时，采用table布局能适应当前应用场景</p><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><ol><li>盒子模型</li></ol><p><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=f1a5cfd90633874488c8272e3066b29c/a9d3fd1f4134970a37cf81a69fcad1c8a6865dfe.jpg" alt></p><p>这是百度百科里面盒子模型的一张图，首先中间的content内容，即我们常说的内容区，我们通常设置的height和width就是设置的这部分的长度，内容区域外部是padding区域，这部分内容指的是内容区到边框的区域，即我们常说的内边框，然后就是border区，border区本身也是占据空间的，外边框外面是margin区，这部分指的是当前元素与其他元素的距离，即常说的外边距。<br>首先要明白我们常说的宽度和高度，指的是内容区的宽度和高度。<br>然后计算一个盒子占用的空间是content+padding+border+margin</p><ol start="2"><li>display/position</li></ol><p>display有如下几个值：</p><ul><li>block(元素表现为块级元素，有固定宽高，独占一行)</li><li>inline(元素表现为行内元素，不能设置宽高)</li><li>inline-block(对外表现为行内元素，对内表现为块级元素)行内块</li></ul><p>position有如下几个值：</p><ul><li>static(默认情况，存在文档流中)</li><li>relative(根据元素本身原来所应该处的位置偏移，不会改变布局的计算)</li><li>absolute(绝对定位，脱离文档流，不会对别的元素造成影响，相对的是父级最近的relative或者absolute定位元素)</li><li>fixed(绝对定位，脱离文档流，相对于的是屏幕，就是那些浮动的广告那样，怎么拉扯都是固定在同一个位置，而absolute元素，离开屏幕就不见了)</li></ul><ol start="3"><li>float布局</li></ol><p>最常用的一种布局，但是也较为复杂</p><p>首先，什么是浮动？<br>浮动是脱离文档流的，但不脱离文本流，这是什么意思呢？用过Word的应该知道有一种图片环绕的方式是文字环绕，就是这种效果</p><p>那么它有什么特点呢？</p><ul><li>对自身的影响<ul><li>float元素可以形成块，如span元素，可以让行内元素也拥有宽和高，因为块级元素具有宽高</li><li>浮动元素的位置尽量靠上</li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa和express</title>
      <link href="/2021/07/18/koa-he-express/"/>
      <url>/2021/07/18/koa-he-express/</url>
      
        <content type="html"><![CDATA[<h2 id="koa相关"><a href="#koa相关" class="headerlink" title="koa相关"></a>koa相关</h2><ul><li>koa-multer</li><li>koa-router</li><li>koa-bodyparser</li><li>koa-static</li></ul><p>koa-multer</p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>最近在学习koa的使用， 由于koa是相当基础的web框架，所以一个完整的web应用所需要的东西大都以中间件的形式引入，比如koa-router, koa-view等。<br>在koa的文档里有提到：koa的中间件模式与express的是不一样的，koa是洋葱型，express是直线型，至于为什么这样，网上很多文章并没有具体分析。<br>或者简单的说是async/await的特性之类。先不说这种说法的对错，对于我来说这种说法还是太模糊了。所以我决定通过源码来分析二者中间件实现的原理以及用法的异同。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>二者都以官网（github）文档为准</p><p>connect</p><p>下面是官网的用法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> connect <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// gzip/deflate outgoing responses</span><span class="token keyword">var</span> compression <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// store session state in browser cookie</span><span class="token keyword">var</span> cookieSession <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'secret1'</span><span class="token punctuation">,</span> <span class="token string">'secret2'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parse urlencoded request bodies into req.body</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// respond to all requests</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello from Connect!\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//create node.js http server and listen on port</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据文档我们可以看到，connect是提供简单的路由功能的：</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">fooMiddleware</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// req.url starts with "/foo"</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/bar'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">barMiddleware</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// req.url starts with "/bar"</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>connect的中间件是线性的，next过后继续寻找下一个中间件，这种模式直觉上也很好理解，中间件就是一系列数组，通过路由匹配来寻找相应路由的处理方法也就是中间件。事实上connect也是这么实现的。</p><p>app.use 就是往中间件数组中塞入新的中间件。中间件的执行则依靠私有方法 app.handle 进行处理，express也是相同的道理。</p><h3 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h3><p>相对connect，koa的中间件模式就不那么直观了，借用网上的图表示：</p><p><img src="koa_files/1.jpg" alt></p><p>也就是koa处理完中间件后还会回来走一趟，这就给了我们更加大的操作空间，来看看koa的官网实例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// x-response-time</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span> ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'X-Response-Time'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ms<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// logger</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ms<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// response</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> ctx <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显，当koa处理中间件遇到await next()的时候会暂停当前中间件进而处理下一个中间件，最后再回过头来继续处理剩下的任务，虽然说起来很复杂，但是直觉上我们会有一种隐隐熟悉的感觉：不就是回调函数吗。<br>这里暂且不说具体实现方法，但是确实就是回调函数。跟async/await的特性并无任何关系。</p><h3 id="源码简析"><a href="#源码简析" class="headerlink" title="源码简析"></a>源码简析</h3><p>connect与koa中间件模式区别的核心就在于next的实现，让我们简单看下二者next的实现。</p><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>connect的源码相当少加上注释也就200来行，看起来也很清楚，connect中间件处理在于proto.handle这个私有方法，同样next也是在这里实现的</p><p>通常我们都说connect的中间件模型是线性的, 也就是一个一个往下执行的, 如下图:</p><p><img src="koa_files/2.jpg" alt></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 中间件索引</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 递增</span> <span class="token keyword">var</span> layer <span class="token operator">=</span> stack<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 交由其他部分处理</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>layer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">defer</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// route data</span> <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname <span class="token operator">||</span> <span class="token string">'/'</span><span class="token punctuation">;</span> <span class="token keyword">var</span> route <span class="token operator">=</span> layer<span class="token punctuation">.</span>route<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归</span> <span class="token comment" spellcheck="true">// skip this layer if the route doesn't match</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> route<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!==</span> route<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// call the layer handle</span> <span class="token function">call</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>handle<span class="token punctuation">,</span> route<span class="token punctuation">,</span> err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删掉混淆的代码后 我们可以看到next实现也很简洁。一个递归调用顺序寻找中间件。不断的调用next。代码相当简单但是思路却很值得学习。</p><p>其中 done 是第三方处理方法。其他处理sub app以及路由的部分都删除了。不是重点</p><h3 id="koa-1"><a href="#koa-1" class="headerlink" title="koa"></a>koa</h3><p>#### </p><h4 id="koa-中间件机制以及异常捕获"><a href="#koa-中间件机制以及异常捕获" class="headerlink" title="koa 中间件机制以及异常捕获"></a>koa 中间件机制以及异常捕获</h4><h5 id="koa-中间件机制解析"><a href="#koa-中间件机制解析" class="headerlink" title="koa 中间件机制解析"></a>koa 中间件机制解析</h5><p>koa 的请求处理是典型的洋葱模型,下面是官方的配图，而这一模型的组成部分就是 middleware</p><p><img src="koa_files/1.jpg" alt></p><p>koa 中间件的执行机制，就是一个洋葱模型，每次请求进来，先执行前面的中间件，遇到 next，执行下一个中间件，以此重复，执行完所有中间件后，再从最后一个中间件往前执行</p><ul><li>这里的执行机制，根据和一个 node 群里的开发讨论，可以理解为上楼梯、下楼梯，每个台阶是一个中间件。上楼梯时，第一个台阶遇到的 next，就走下一个台阶。台阶走完后，再下楼梯，最后就又走到了第一个楼梯。</li></ul><p>下面给出一段 koa 的中间件代码，解释里面的执行逻辑：</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出结果是</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">4</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 koa 里的执行逻辑就是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// middleware1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">yield</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// middleware2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// middleware3</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>      <span class="token keyword">yield</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// middleware4</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// middleware3</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// middleware2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// middleware1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 koa 的中间件，类似于前面的中间件包含后面的中间件，遇到 next 就讲下一个中间件代码拿过来执行，以此重复。</p><h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><p>根据 koa 中间件逻辑，我们可以简单的捕获所有 koa 的中间件异常</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 异常捕获处理</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>      code<span class="token punctuation">:</span> <span class="token string">'00000'</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">'服务器异常'</span><span class="token punctuation">,</span>      desc<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 异常捕获逻辑，一定要放在第一个中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在业务逻辑前面try/catch以下，捕获异常，就能捕获到所有中间件异常了</p><p>最终代码执行顺序类似于：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// middleware1</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// middleware2</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// middleware3</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// middleware3</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// middleware2</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// xxx</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解其它中间件实现逻辑<br>根据 koa 的中间件执行机制，我们也能够很容易理解到 koa 常见的一些中间件逻辑了</p><p>比如，常用的koa-bodyparser、koa2-cors和koa-router</p><p>koa-bodyparser 应该也是针对 请求的content-type类型和get/post类型，对请求传参进行统一格式处理<br>koa2-cors则应该是对响应头信息做了处理，加了一些Access-Control-Allow-Origin/Access-Control-Allow-Methods等 cors 跨域相关的配置<br>koa-router应该也是针对请求的 url 和 method 做了处理，匹配不同的 url 后，执行对应的方法</p><p>koa的核心，应该就是中间件机制了，基本上所有的逻辑处理，都可以通过koa的中间件来实现。</p><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><p>当然这么看似乎没啥差别. 那直接给出结论吧(憋): connect的中间件是同步, 不会’等’其他异步操作, koa则可以’等’异步操作. 当然你不等也没啥问题.</p>]]></content>
      
      
      <categories>
          
          <category> Node内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node内容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node内容</title>
      <link href="/2021/07/18/node-nei-rong/"/>
      <url>/2021/07/18/node-nei-rong/</url>
      
        <content type="html"><![CDATA[<h4 id="Node的特点"><a href="#Node的特点" class="headerlink" title="Node的特点"></a>Node的特点</h4><p>单线程</p><ul><li>像Java、PHP等这样的后端语言，都是多线程的，即当有一个请求过来的时候，开启一个CPU，它使计算机能够在同一时间执行多个线程，</li><li>而node的单线程是指当遇到需要加载数据库、读取磁盘等请求的时候，它会将其放入“队列”中执行，待下一轮事件循环的时候再判断能否执行它的回调函数，若此时他的回调函数需要加载I/O，则放入“队列”中，它的特点是线程利用率100%</li></ul><p>事件驱动</p><ul><li>举例：当你在餐厅吃饭的时候，如果当时店内生意比较好时，你坐下来，服务员过来招待你，这时，另一桌也刚坐下并呼叫服务员。正常情况下，服务员肯定会想先给你个菜单让你自己看看，看好了再叫他，接着去招呼那一桌的客人了，完了再给你端茶送水什么的</li><li>这就是事件驱动，通过监听事件的状态变化来做出相应的操作，当你发出一个请求的时候，如果这个请求需要等待，那这个请求便会被放入“队列”中没在处理这个请求的同时，后续的无需请求也在被处理，事件处理结束后，调用请求的回调函数</li><li>注：在处理无需等待的事件时，事件循环是暂停的</li></ul><p>非阻塞I/O</p><ul><li>阻塞I/O就是当用户发一个读取文件描述符的操作的时候，进程就会被阻塞，直到要读取的数据全部准备好返回给用户。那非阻塞I/O呢，就与上面的情况相反，用户发起一个读取文件描述符操作的时候，函数立即返回，不作任何等待，进行继续执行。但是程序如何知道要读取的数据已经准备好了呢？简单的方法就是轮询，即事件循环</li></ul><pre class="line-numbers language-js"><code class="language-js">优点：   <span class="token number">1</span><span class="token punctuation">.</span>因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在Node上的代理服务器相比其他技术实现的服务器表现的要好的多   <span class="token number">2</span><span class="token punctuation">.</span>与Node代理服务器交互的客户端代码是由JavaScript语言编写的，因此客户端与服务器端都使用同一种语言编写，这是一件非常美妙的事情缺点：   <span class="token number">1</span><span class="token punctuation">.</span>Node是一个相对新的开源项目，所以不太稳定，它总是一直在变   <span class="token number">2</span><span class="token punctuation">.</span>缺少足够多的第三方库支持，看起来，就像是Ruby<span class="token operator">/</span>Rails当年的样子（但是第三方库现在已经很丰富了，此缺点，暂时都不存在了）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="什么是错误优先的回调函数？"><a href="#什么是错误优先的回调函数？" class="headerlink" title="什么是错误优先的回调函数？"></a>什么是错误优先的回调函数？</h4><p>错误优先的回调函数用于传递错误和数据。第一个参数始终应该是一个错误对象，用于检查程序是否发生了错误。其余的参数用于传递数据，例如：</p><pre class="line-numbers language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//handle the error</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//use the data object</span><span class="token punctuation">}</span><span class="token punctuation">)</span>解析：这个题目的主要作用在于检查，对于Node中异步操作的一些基本知识的掌握<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何避免回调地狱"><a href="#如何避免回调地狱" class="headerlink" title="如何避免回调地狱"></a>如何避免回调地狱</h4><p>可以有以下几种方式实现：</p><ul><li>模块化：将回调函数分割为独立的函数</li><li>使用Promise</li><li>使用yield来计算生成器或Promise</li><li>在ES6或者ES7中会有更多的操作<br>async await</li></ul><h4 id="如何使用Node监听80端口"><a href="#如何使用Node监听80端口" class="headerlink" title="如何使用Node监听80端口"></a>如何使用Node监听80端口</h4><p>此题有设置陷阱！在类UNIX系统中，不应该尝试监听80端口，因为这需要超级用户权限。因此不推荐应用中直接监听这个端口<br>目前来说，如果 一定要在应用中监听80端口的话，可以有通过在Node应用的前方再增加一层反向代理（例如Nginx）来实现，如下图所示。否则，建议监听大于1024的端口</p><ul><li>反向代理，指的是以代理服务器来接收Internet上的连接请求，然后将请求转发给内部网络上的服务器，并且将服务器返回的结果发送给客户端</li></ul><h4 id="什么是事件循环"><a href="#什么是事件循环" class="headerlink" title="什么是事件循环"></a>什么是事件循环</h4><p>Node采用的是单线程的处理机制（所以的I/O请求都采用非阻塞的工作方式），至少从Node.js开发者的角度是这样的。而在底层，Node.js借助libuv来作为抽象封装层，从而屏蔽不同的操作系统的差异，Node可以借助libuv来实现多线程<br>libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个事件循环，以异步的方式，将任务的执行结果，返回给V8引擎。可以简单用下图所示。</p><p>每一个I/O都需要一个回调函数–一旦执行完，便推到事件循环上用于执行</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout执行了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setImmediate执行了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'process.nextTick执行了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token function">setImmediate</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>node的事件循环机制：借助于libuv库来实现的</li></ol><ul><li>事件轮询机制主要分为6个阶段<ul><li><ol><li>timer计时器阶段</li></ol></li><li>计时和执行到点的定时器回调函数</li><li><ol start="2"><li>pending callbacks</li></ol></li><li>某些系统操作(例如TCP错误类型)的回调函数</li><li><ol start="3"><li>idle prepare</li></ol></li><li>准备工作</li><li><ol start="4"><li>poll轮询阶段(轮询队列)</li></ol></li><li>如果轮询队列不为空，依次同步取出轮询队列中第一个回调执行，直到轮询队列为空或者达到系统最大的限制</li><li>如果轮询队列为空<ul><li>如果之前设置过setImmediate函数</li><li>直接进入下一个check阶段</li><li>如果之前没有设置过setImmediate函数</li><li>在当前poll阶段等待<ul><li>直到轮询队列添加回调函数，就去执行第一个情况</li><li>如果定时器到点了，也会去下一个阶段</li></ul></li></ul></li><li><ol start="5"><li>check查阶段</li></ol></li><li>执行setImmediate设置的回调函数</li><li><ol start="6"><li>close callbacks关闭阶段</li></ol></li><li>执行close时间回调函数</li><li>关于process.nextTick能在任意阶段优先执行</li></ul></li></ul><p><a href="https://www.cnblogs.com/BR-Tao/p/11355904.html" target="_blank" rel="noopener">原文</a></p><h4 id="哪些工具可以用来保证一致性的代码风格"><a href="#哪些工具可以用来保证一致性的代码风格" class="headerlink" title="哪些工具可以用来保证一致性的代码风格"></a>哪些工具可以用来保证一致性的代码风格</h4><ul><li>JSLint</li><li>JSHint</li><li>ESLint</li><li>JSCS-推荐</li><li>区别<a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/JSLint,JSHint,ESLint.md" target="_blank" rel="noopener">详解</a></li></ul><h4 id="运算错误与程序员错误的区别"><a href="#运算错误与程序员错误的区别" class="headerlink" title="运算错误与程序员错误的区别"></a>运算错误与程序员错误的区别</h4><p>运算错误并不是bug，这是和系统相关的问题，例如请求超时或硬件故障。而程序员错误就是所谓的bug。</p><h4 id="使用NPM有什么好处？"><a href="#使用NPM有什么好处？" class="headerlink" title="使用NPM有什么好处？"></a>使用NPM有什么好处？</h4><p>通过NPM，可以安装和管理项目的依赖，并且能够只能依赖项的具体版本号。对于Node应用开发而言，可以通过package.json文件来管理信息，配置脚本，以及指明项目依赖的具体版本</p><h4 id="什么是Stub-举例使用场景"><a href="#什么是Stub-举例使用场景" class="headerlink" title="什么是Stub?举例使用场景"></a>什么是Stub?举例使用场景</h4><p>Stub是用于模拟一个组件或模块的函数或程序，在测试用例中，简单的来说，可以使用Stub来模拟一个方法，从而避免调用真实的方法，使用Stub,还可以返回虚拟的结果<br>举例说明，在一个读取文件的场景中，当不想读取一个真正的文件时：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> readFileStub <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>fs<span class="token punctuation">,</span><span class="token string">'readFile'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'filecontent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">expect</span><span class="token punctuation">(</span>readFileStub<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>called<span class="token punctuation">;</span>readFileStub<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="什么是测试金字塔？"><a href="#什么是测试金字塔？" class="headerlink" title="什么是测试金字塔？"></a>什么是测试金字塔？</h4><p>测试金字塔是指：当我们在编写测试用例时，底层的单元测试应该远比上层的端到测试端测试要多。</p><p>当谈论到HTTP API时，我们可能会涉及到：</p><ul><li>有很多针对模型的底层单元测试，但你需要测试模型健如何交互时，需要减少集成测试</li></ul><h4 id="最喜欢HTTP框架的原因"><a href="#最喜欢HTTP框架的原因" class="headerlink" title="最喜欢HTTP框架的原因"></a>最喜欢HTTP框架的原因</h4><ul><li>无</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node内容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是跨域？</title>
      <link href="/2021/07/18/shi-me-shi-kua-yu/"/>
      <url>/2021/07/18/shi-me-shi-kua-yu/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h4><ul><li><p>跨域，是指浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的，是浏览器施加的安全限制。</p></li><li><p>所谓同源是指，域名，协议，端口，均相同，只要有一个不同，就是跨域，有以下例子如：</p><ul><li><a href="http://www.123.com/index.html" target="_blank" rel="noopener">http://www.123.com/index.html</a> 调用 <a href="http://www.123.com/server.php" target="_blank" rel="noopener">http://www.123.com/server.php</a> （非跨域）</li><li><a href="http://www.123.com/index.html" target="_blank" rel="noopener">http://www.123.com/index.html</a> 调用 <a href="http://www.456.com/server.php" target="_blank" rel="noopener">http://www.456.com/server.php</a> （主域名不同:123/456，跨域）</li><li><a href="http://abc.123.com/index.html" target="_blank" rel="noopener">http://abc.123.com/index.html</a> 调用 <a href="http://def.123.com/server.php" target="_blank" rel="noopener">http://def.123.com/server.php</a> （子域名不同:abc/def，跨域）</li><li><a href="http://www.123.com:8080/index.html" target="_blank" rel="noopener">http://www.123.com:8080/index.html</a> 调用 <a href="http://www.123.com:8081/server.php" target="_blank" rel="noopener">http://www.123.com:8081/server.php</a> （端口不同:8080/8081，跨域）</li><li><a href="http://www.123.com/index.html" target="_blank" rel="noopener">http://www.123.com/index.html</a> 调用 <a href="https://www.123.com/server.php" target="_blank" rel="noopener">https://www.123.com/server.php</a> （协议不同:http/https，跨域）</li></ul></li><li><p>注意：localhost和127.0.0.1虽然都指向本机，但也属于跨域</p></li><li><p>浏览器执行JavaScript脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行</p></li></ul><h4 id="跨域会阻止什么操作？"><a href="#跨域会阻止什么操作？" class="headerlink" title="跨域会阻止什么操作？"></a>跨域会阻止什么操作？</h4><ul><li>浏览器是从两个方面去做这个同源策略的，一是针对接口的请求，二是针对Dom的查询</li></ul><h4 id="什么是同源策略及其限制内容？"><a href="#什么是同源策略及其限制内容？" class="headerlink" title="什么是同源策略及其限制内容？"></a>什么是同源策略及其限制内容？</h4><ul><li>同源策略是一种约定，它是浏览器最核心也是最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等共计。(即浏览器安全策略)</li><li>所谓同源是指“协议+域名+端口”三者相同，即便两个不同的域名指向同一个IP地址，也非同源</li></ul><h4 id="同源策略的限制内容有："><a href="#同源策略的限制内容有：" class="headerlink" title="同源策略的限制内容有："></a>同源策略的限制内容有：</h4><ul><li>cookie、locastorage、indexDB等存储性内容</li><li>DOM节点</li><li>AJAX请求发送后，结果被浏览器拦截了</li></ul><p>####　但是有三个标签是允许跨域加载资源的:</p><ul><li>&lt; img src=”xxx”&gt;</li><li>&lt; link href=”xxx”&gt;</li><li><script src="xxx"></script></li></ul><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h4><ul><li>1.如果是协议和端口造成的跨域问题，“前台”是无能为力的</li><li>2.在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议、域名和端口必须匹配”</li><li>3.那么，请求跨域了，但是请求到底有没有发出去呢？<ul><li>跨域并不是请求发不出去，是请求能发出去，服务器端能收到请求并且正常返回结果，只是浏览器被拦截了。但是有个疑问？明明可以通过表单的方式可以发起跨域请求，但是ajax就不会？</li><li>因为归根到底，跨域是为了阻止用户读取到另一个域名下的内容，ajax可以获取响应，浏览器认为这个不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起请求</li><li>同时也说明了跨域并不能完全阻止CSRF，因为请求毕竟了发出去了  <a href="https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369" target="_blank" rel="noopener">CSRF攻击</a></li></ul></li></ul><h4 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h4><ol><li>jsonp</li></ol><ul><li>在同源策略下，在某个服务器下的页面是无法获取到该服务器以外的数据的，即一般的ajax是不能进行跨域请求的，但img、iframe、script等标签是个例外，这些标签可以系通过src属性请求到其他服务器上的数据</li><li>利用<script> 标签的开放策略，我们可以实现跨域请求数据，当然这个是需要服务器的配合。</li><li>jquery中ajax的核心是通过xmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本</li><li>通过请求script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，这种跨域的数据的方式被称为JSONP</li><li>当我们正常的请求一个JSON数据的时候，服务器端返回的是一串JSON类型的数据</li><li>而我们使用JSONP模式来请求数据的时候，服务器端返回的是一段可执行的JavaScript代码，因为jsonp跨域的原理就是用动态加载<script>的src，所以我们只能把参数通过url的方式传递，所以jsonp的type类型只能是get</li></ul><ol start="2"><li><strong>jquery中的jsonp限制</strong></li></ol><ul><li>jsonp都是get和异步请求的，不存在其他的请求方式和同步请求，且jquery默认就会给jsonp的请求清除缓存</li></ul><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span><span class="token string">"http://crossdomain.com/jsonServerResponse"</span><span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span><span class="token string">"jsonp"</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//可以省略</span>    jsonpCallback<span class="token punctuation">:</span><span class="token string">"show"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//->自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span>    jsonp<span class="token punctuation">:</span><span class="token string">"callback"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//->把传递函数名的那个形参callback，可省略</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>cors</li></ol><ul><li>这个请求处理用的较多，当然这个cors需要浏览器的支持，IE8和IE9需要通过XDomainRequest 来实现</li><li>浏览器会自动进行cors通信，实现cors通信的关键是后端，只要后端实现了cors，就实现了跨域</li><li>服务器端设置Access-Control-Allow-Origin就可以开启cors，该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源</li><li>虽然设置cors和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况：简单请求和复杂请求</li></ul><p>1）简单请求</p><p>只要同事满足以下两大条件，就属于简单请求</p><p>条件1：使用以下方法之一</p><ul><li>get 、head 、post</li></ul><p>条件2：content-type的值仅限于以下三者之一</p><ul><li>text/plain、 multipart/form-data 、 application/x-www-form-urlencoded</li></ul><p>请求中的任意XMLHttpRequestUpload对象均没有注册任何事件监听器<br>XMLHttpRequestUpload对象可以使用XMLHttpRequest.upload属性访问</p><p>2）复杂请求（不是太了解，不是很清楚，后期补充学习）</p><ul><li>不符合以上条件的请求都是复杂请求</li><li>复杂请求的cors请求，会在正式通信之前，增加一次HTTP查询请求，称“预检”请求，该请求是option方法的，通过该请求来知道服务端是否允许跨域请求</li><li>当用PUT向后台请求时，属于复杂请求，后台需做如下配置：</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 允许哪个方法访问我</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 预检的存活时间</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Max-Age'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// OPTIONS请求不做任何处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义后台返回的内容</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/getData'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>接下来的是一个复杂请求的例子，并介绍cors请求的相关字段<span class="token comment" spellcheck="true">// index.html</span><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'name=xiamen'</span> <span class="token comment" spellcheck="true">// cookie不能跨域</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 前端设置是否带cookie</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'PUT'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:4000/getData'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'xiamen'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//得到响应头，后台需设置Access-Control-Expose-Headers</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//server1.js</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//server2.js</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> whitList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://localhost:3000'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//设置白名单</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> origin <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin  <span class="token keyword">if</span> <span class="token punctuation">(</span>whitList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置哪个源可以访问我</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许携带哪个头访问我</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许哪个方法访问我</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许携带cookie</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Credentials'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 预检的存活时间</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Max-Age'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许返回的头</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Headers'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// OPTIONS请求不做任何处理</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/getData'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'jw'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回一个响应头，后台需设置</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getData'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span>作者：浪里行舟链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span>cedc8b1cd84c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>postMessage(未用过，待学习处理)</li></ol><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li><li>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</li></ul><ol start="5"><li>websocket</li></ol><p>websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。websocket和HTTP都是应用层协议，都是基于TCP协议。<br><strong>但是websocke是一种双向通信协议，在建立连接之后，websocket的server与client都能主动向对方发送或接收数据</strong>，同时，websocket在建立连接时，需要借助HTTP协议，连接建立好之后，client与server之间的双向通信就与HTTP无关了</p><p>但是原生的websocket API使用起来不是很方便，我们使用Socket.io，它很好地封装了websocket接口，提供了更简单、灵活的接口，也对不支持websocket的浏览器提供了向下兼容<br>有以下例子如下：本地socket.html向localhost：3000发生数据和接收数据</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// socket.html</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"love you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向服务器发送数据 </span>    <span class="token punctuation">}</span>    socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收服务器返回的数据</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// server.js</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得安装ws</span><span class="token keyword">let</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span>port<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>Node中间件代理(两次跨域)</li></ol><p>实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略<br>代理服务器，需要做以下几个步骤：</p><ul><li>接受客户端请求</li><li>将请求 转发给服务器</li><li>拿到服务器响应数据</li><li>将响应转发给客户端</li></ul><p><img src="%E8%B7%A8%E5%9F%9F_files/1.jpg" alt=""></p><p><a href="https://cloud.tencent.com/developer/article/1467260">详解</a></p><ol start="6"><li>nginx反向代理</li></ol><p>其原理实现，类似于Node中间件代理，需要搭建一个中转nginx服务器，用于转发请求。<br>使用nginx反向代理实现跨域，是最简单的跨域方式，只需要修改nginx的配置，即可解决跨域问题，支持所有的浏览器，支持session，不需要修改任何代码，并且不会影响到服务器的性能</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理domain2接口，并且可以顺便修改cookie中的domain信息，方便当前域cookie写入，实现跨域登录</p><p>下载nginx，然后将nginx目录下的nginx.conf修改如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// proxy服务器</span>server <span class="token punctuation">{</span>    listen       <span class="token number">81</span><span class="token punctuation">;</span>    server_name  www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        proxy_pass   http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>domain2<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>  #反向代理        proxy_cookie_domain www<span class="token punctuation">.</span>domain2<span class="token punctuation">.</span>com www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span> #修改cookie里域名        index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        # 当用webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用        add_header Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  #当前端只跨域不带cookie时，可为<span class="token operator">*</span>        add_header Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Credentials <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过命令行nginx -s reload 启动nginx</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.html</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前端开关：浏览器是否读写cookie</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 访问nginx中的代理服务器</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://www.domain1.com:81/?user=admin'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// server.js</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向前台写cookie</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="token comment" spellcheck="true">// HttpOnly:脚本无法读取</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at port 8080...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>window.name + iframe</li><li>location.hash + iframe</li><li>document.domain + iframe</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>cors支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li><li>JSONP只支持GET请求，JSONP的优势在于支持老式的浏览器，以及可以向不支持cors的网站请求数据</li><li>不管是Node中间件代理，还是nginx反向代理，主要是通过同源策略对服务器不加限制</li><li>日常工作中，用的较多的跨域解决方案是cors和nginx反向代理</li></ul></script></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数节流和函数防抖</title>
      <link href="/2021/07/18/han-shu-jie-liu-he-han-shu-fang-dou/"/>
      <url>/2021/07/18/han-shu-jie-liu-he-han-shu-fang-dou/</url>
      
        <content type="html"><![CDATA[<p>什么是函数节流，什么是函数防抖<br>函数节流：一个函数执行一次后，只有大于设定的执行周期后，才会执行第二次</p><ul><li>有个需要频繁触发的函数，出于性能优化考虑，只能在规定时间内，只让函数触发生效一次，后面的不生效</li></ul><p>防抖函数：一个需要频繁触发的函数，在规定的时间内，只让最后一次生效，前面的不生效</p><p>fn:节流函数<br>delay:规定的延迟时间</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">html,body</span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">500%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//记录上一次函数的触发时间</span>    <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录当前函数的触发时间</span>        <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nowTime<span class="token operator">-</span>lastTime<span class="token operator">></span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 同步当前时间</span>        lastTime<span class="token operator">=</span>nowTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scoll函数被触发了'</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deBoun</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//记录上一次的延时器</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//清除上一次的延时器</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重新设置新的延时器</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//改变this指向问题</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">deBoun</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件被触发了'</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2021/07/18/qian-duan-xing-neng-you-hua/"/>
      <url>/2021/07/18/qian-duan-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><p>页面内容</p><ul><li>减少 HTTP 请求数</li><li>减少 DNS 查询</li><li>避免重定向</li><li>缓存 Ajax 请求</li><li>延迟加载</li><li>预先加载</li><li>减少 DOM 元素数量</li><li>划分内容到不同域名</li><li>尽量减少 iframe 使用</li><li>避免 404 错误</li></ul><p>服务器</p><ul><li>使用 CDN</li><li>添加 Expires 或 Cache-Control 响应头</li><li>启用 Gzip</li><li>配置 Etag</li><li>尽早输出缓冲</li><li>Ajax 请求使用 GET 方法</li><li>避免图片 src 为空</li></ul><p>Cookie</p><ul><li>减少 Cookie 大小</li><li>静态资源使用无 Cookie 域名</li></ul><p>CSS</p><ul><li>把样式表放在 <head><meta name="generator" content="Hexo 3.9.0"> 中<link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"><link rel="stylesheet" href="/css/prism-line-numbers.css" type="text/css"></head></li><li>不要使用 CSS 表达式</li><li>使用 <link> 替代 @import</li><li>不要使用 filter</li><li>JavaScript</li><li>把脚本放在页面底部</li><li>使用外部 JavaScript 和 CSS</li><li>压缩 JavaScript 和 CSS</li><li>移除重复脚本</li><li>减少 DOM 操作</li><li>使用高效的事件处理</li></ul><p>图片</p><ul><li>优化图片</li><li>优化 CSS Sprite</li><li>不要在 HTML 中缩放图片</li><li>使用体积小、可缓存的 favicon.ico</li></ul><p>移动端</p><ul><li>保持单个文件小于 25 KB</li><li>打包内容为分段（multipart）文档</li></ul><h2 id="页面内容"><a href="#页面内容" class="headerlink" title="页面内容"></a>页面内容</h2><h4 id="减少HTTP请求数"><a href="#减少HTTP请求数" class="headerlink" title="减少HTTP请求数"></a>减少HTTP请求数</h4><p>web前端80%的响应时间花在图片、样式、脚本等资源下载上。浏览器对每个域名的连接数是有限的，减少请求次数，是缩短响应时间的关键<br>通过简洁的设计减少页面所需的资源，进而减少HTTP请求，这是最直接的方式，前提是。。</p><p>有以下方法实现：</p><ul><li>合并JavaScript、css文件<ul><li>服务器端CDN自动合并</li><li>基于Node的文件合并工具实现合并</li></ul></li><li>使用css sprite：将背景图片合并成一个文件，通过background-image和background-position控制显示：<ul><li>sprite cow</li><li>spritebox</li><li>逐步被icon font和SVG sprite代替</li></ul></li><li>image Map:合并图片，然后使用坐标映射不同的区域<ul><li>缺点：仅仅适用于相连的图片，设置坐标过程乏味且容易出错；可访问性问题</li><li>inline assets ：使用Data URl scheme将图片嵌入html或者css中，或者将css、js、图片等直接嵌入html中(会增加文件大小，也可能产生浏览器兼容及其他问题)</li><li>未来趋势是使用内嵌svg</li><li>内容分片，将请求划分到不同的域名上</li></ul></li></ul><h4 id="减少DNS查询"><a href="#减少DNS查询" class="headerlink" title="减少DNS查询"></a>减少DNS查询</h4><p>用户输入URL后，浏览器首先要查询域名对应服务器的IP地址，一般要耗费20-120毫秒时间<br>DNS查询完成之前，浏览器无法从服务器下载任何数据</p><p>基于性能考虑，ISP、局域网、操作系统、浏览器都会有相应的DNS缓存机制</p><ul><li>IE缓存30分钟，可以通过注册表中DnsCacheTimeout项设置</li><li>Firefox混存1分钟，通过network.dnsCacheExpiration配置</li><li>等等</li></ul><p>首次访问、没有相应的DNS缓存时，域名越多，查询时间越长，所以应尽量减少域名数量，但是基于并行下载考虑，把资源分布到2个域名上(最多不超过4个)。这是减少DNS查询，同事保证并且下载的折中方案</p><h4 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h4><p>HTTP重定向的状态码是301、302</p><p>客户端收到服务器的重定向响应后，会根据响应头中location的地址再次发送请求，重定向会影响到用户体验，尤其是多次重定时，用户在一段时间内看不到任何内容，只看到浏览器进度条一直在刷新<br>有时重定向无法避免，在糟糕时也比抛出404好。虽然通过HTML meta refresh和JavaScript也能实现，但首选HTTP 3XX跳转，以保证浏览器(后退)功能正常工作，也利于SEO</p><ul><li>最浪费的重定向经常发生、而且很容易被忽略：URL末尾应该添加、但未添加。</li><li>比如访问<a href="http://astrology.yahoo.com/astrology" target="_blank" rel="noopener"></a>将被301重定向到[](<a href="http://astrology.yahoo.com/astrology/（注意末尾的" target="_blank" rel="noopener">http://astrology.yahoo.com/astrology/（注意末尾的</a> /）。)如果使用Apache，可以通过alias或mod_rewrite或DirectorySlash解决这个问题</li><li>网站域名变更：CNAME结合alias或mod_rewrite或其他服务器类似功能实现跳转</li></ul><h4 id="缓存ajax请求"><a href="#缓存ajax请求" class="headerlink" title="缓存ajax请求"></a>缓存ajax请求</h4><p>ajax可以提高用户体验，但[异步]不意味着[及时]，优化ajax响应速度提高性能仍是需要关注的主题<br>最重要的优化方式是缓存响应结果，</p><p>以下规则也关乎 Ajax 响应速度：</p><ul><li>启用 Gzip</li><li>减少 DNS 查询</li><li>压缩 JavaScript 和 CSS</li><li>避免重定向</li><li>配置 Etag</li></ul><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>页面初始化时哪些内容是绝对必需的？不在答案之列的资源，都可以延迟加载：比如：</p><ul><li>非首屏使用的数据、样式、脚本、图片等</li><li>用户交互时才会显示的内容</li></ul><p>延迟渲染，将首屏以外的HTML放在不渲染的元素中，如隐藏<textarea>，或者type属性为非执行脚本的<script>标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容</p><h4 id="预先加载"><a href="#预先加载" class="headerlink" title="预先加载"></a>预先加载</h4><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p><ul><li>无条件预先加载：页面加载完成（load）后，马上获取其他资源。以 google.com 为例，首页加载完成后会立即下载一个 Sprite 图片，此图首页不需要，但是搜索结果页要用到。</li><li>有条件预先加载：根据用户行为预判用户去向，预载相关资源。比如 search.yahoo.com 开始输入时会有额外的资源加载。</li><li>有「阴谋」的预先加载：页面即将上线新版前预先加载新版内容。网站改版后由于缓存、使用习惯等原因，会有旧版的网站更快更流畅的反馈。为缓解这一问题，在新版上线之前，旧版可以利用空闲提前加载一些新版的资源缓存到客户端，以便新版正式上线后更快的载入（好一个「心机猿」:scream:）。</li><li>「双十一」、「黑五」这类促销日来临之前，也可以预先下载一些相关资源到客户端（浏览器、App 等），有效利用浏览器缓存和本地存储，降低活动当日请求压力，提高用户体验。</li></ul><h4 id="减少DOM元素数量"><a href="#减少DOM元素数量" class="headerlink" title="减少DOM元素数量"></a>减少DOM元素数量</h4><p>复杂的页面不仅下载的字节更多，JavaScript DOM 操作也更慢。例如，同是添加一个事件处理器，500 个元素和 5000 个元素的页面速度上会有很大区别。</p><p>从以下几个角度考虑移除不必要的标记：</p><p>是否还在使用表格布局？</p><ul><li>塞进去更多的 <div> 仅为了处理布局问题？也许有更好、更语义化的标记。</li><li>能通过伪元素实现的功能，就没必要添加额外元素，如清除浮动。</li><li>浏览器控制台中输入以下代码可以计算出页面中有多少 DOM 元素：</li></ul><p>document.getElementsByTagName('*').length;<br>对比标记良好的的网站，看看差距是多少。</p><p>为什么不使用表格布局？</p><ul><li>更多的标签，增加文件大小；</li><li>不易维护，无法适应响应式设计；</li><li>性能考量，默认的表格布局算法会产生大量重绘</li></ul><p>####划分内容到不同域名</p><p>浏览器一般会限制每个域的并行线程（一般为 6 个，甚至更少），使用不同的域名可以最大化下载线程，但注意保持在 2-4 个域名内，以避免 DNS 查询损耗。</p><p>例如，动态内容放在 csspod.com 上，静态资源放在 static.csspod.com 上。这样还可以禁用静态资源域下的 Cookie，减少数据传输，详见 Cookie 优化。</p><h4 id="尽量减少-iframe-使用"><a href="#尽量减少-iframe-使用" class="headerlink" title="尽量减少 iframe 使用"></a>尽量减少 iframe 使用</h4><p>使用 iframe 可以在页面中嵌入 HTML 文档，但有利有弊。</p><iframe> 优点：<ul><li><p>可以用来加载速度较慢的第三方资源，如广告、徽章；</p></li><li><p>可用作安全沙箱；</p></li><li><p>可以并行下载脚本。</p></li><li><iframe> 缺点：</li><li><p>加载代价昂贵，即使是空的页面；</p></li><li><p>阻塞页面 load 事件触发；Iframe 完全加载以后，父页面才会触发 load 事件。 Safari、Chrome 中通过 JavaScript 动态设置 iframe src 可以避免这个问题。</p></li><li><p>缺乏语义。</p></li></ul><p>####　避免 404 错误</p><p>HTTP 请求很昂贵，返回无效的响应（如 404 未找到）完全没必要，降低用户体验而且毫无益处。</p><p>一些网站设计很酷炫、有提示信息的 404 页面，有助于提高用户体验，但还是浪费服务器资源。尤其糟糕的是外部脚本返回 404，不仅阻塞其他资源下载，浏览器还会尝试把 404 页面内容当作 JavaScript 解析，消耗更多资源。</p></script></textarea></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝和浅拷贝</title>
      <link href="/2021/07/18/shen-kao-bei-he-qian-kao-bei/"/>
      <url>/2021/07/18/shen-kao-bei-he-qian-kao-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><h2 id="支持图表类型"><a href="#支持图表类型" class="headerlink" title="支持图表类型"></a>支持图表类型</h2><p>数据类型分为基本数据类型和对象数据类型，其中基本数据类型包括字符型、数字型、布尔型、空型、未定义型、和Symbol型</p><ul><li>基本数据类型是直接存储在堆栈中的数据</li><li>引用数据类型的特点是存储的是该对象在栈中的引用，其真实的数据存放在堆内存中<br>引用数据类型在栈中存储了指针，该指针向堆栈该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</li></ul><p><img src="README_files/1.jpg" alt></p><h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><p>深拷贝和浅拷贝只是针对Object和Array这样的引用数据类型的<br>其大致示意图如下：</p><p><img src="README_files/2.jpg" alt></p><p>浅拷贝只复制指向某个对象的指针，而不是复制对象本身，新旧对象还是共享一块内存。<br>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改变到原对象</p><h2 id="赋值和浅拷贝的区别"><a href="#赋值和浅拷贝的区别" class="headerlink" title="赋值和浅拷贝的区别"></a>赋值和浅拷贝的区别</h2><ul><li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象在堆栈中的地址，而不是堆中的数据。也就是说两个对象指向的是同一个存储空间，无论哪个对象发生变化，其实都是改变的存储空间的内容，因此两个对象是联动的</li><li>浅拷贝是按位拷贝对象，它会创建一个新的对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址(引用类型)，拷贝的就是内存地址，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即默认拷贝结构只是对对象进行浅拷贝的复制（逐个成员依次拷贝），即只复制对象空间而不复制资源 </li></ul><p>以下例子来看有哪些变化？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//对象赋值</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'zhangshan'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token string">'language'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"lishi"</span>obj2<span class="token punctuation">.</span>language<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"二"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>打印结果：<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"lishi"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>age<span class="token punctuation">:</span> <span class="token number">18</span>language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>length<span class="token punctuation">:</span> <span class="token number">3</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> <span class="token string">"lishi"</span>__proto__<span class="token punctuation">:</span> Objectnew_file<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">21</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"lishi"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>age<span class="token punctuation">:</span> <span class="token number">18</span>language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"二"</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"三"</span>length<span class="token punctuation">:</span> <span class="token number">2</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>length<span class="token punctuation">:</span> <span class="token number">3</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> <span class="token string">"lishi"</span>__proto__<span class="token punctuation">:</span> Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//浅拷贝</span> <span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>     <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'zhangshan'</span><span class="token punctuation">,</span>     <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'19'</span><span class="token punctuation">,</span>     <span class="token string">'language'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> obj3<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'lishi'</span> obj3<span class="token punctuation">.</span>language<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"二"</span><span class="token punctuation">,</span><span class="token string">"三"</span><span class="token punctuation">]</span> <span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> dst<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dst<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span>src<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> dst<span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj3'</span><span class="token punctuation">,</span>obj3<span class="token punctuation">)</span> 打印结果： <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"zhangshan"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">"19"</span><span class="token punctuation">,</span> language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span> age<span class="token punctuation">:</span> <span class="token string">"19"</span> language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">]</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> length<span class="token punctuation">:</span> <span class="token number">3</span> __proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> name<span class="token punctuation">:</span> <span class="token string">"zhangshan"</span> __proto__<span class="token punctuation">:</span> Object new_file<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">43</span> obj3  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"lishi"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">"19"</span><span class="token punctuation">,</span> language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span> age<span class="token punctuation">:</span> <span class="token string">"19"</span> language<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">]</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> length<span class="token punctuation">:</span> <span class="token number">3</span> __proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> name<span class="token punctuation">:</span> <span class="token string">"lishi"</span> __proto__<span class="token punctuation">:</span> Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上边的两个例子中，obj1是原始数据，obj2是赋值操作得到，而obj3是浅拷贝得到。通过打印结果，可以清晰的看到对原始数据的影响，其具体的数据印象，看下表：</p><table><thead><tr><th align="left">–</th><th align="left">和原数据是否指向同一对象</th><th align="left">第一层数据为基本数据类型</th><th align="left">原数据中包含的子对象</th></tr></thead><tbody><tr><td align="left">赋值</td><td align="left">是</td><td align="left">改变数据会使原数据一同改变</td><td align="left">改变数据会使原数据一同改变</td></tr><tr><td align="left">浅拷贝</td><td align="left">否</td><td align="left">改变数据不会使原数据一同改变</td><td align="left">改变数据会使原数据一同改变</td></tr><tr><td align="left">深拷贝</td><td align="left">否</td><td align="left">改变数据不会使原数据一同改变</td><td align="left">改变数据不会使原数据一同改变</td></tr></tbody></table><h2 id="浅拷贝的实现方式"><a href="#浅拷贝的实现方式" class="headerlink" title="浅拷贝的实现方式"></a>浅拷贝的实现方式</h2><p>1.Object.assign()<br>Object.assign()方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是<br>Object.assign()进行的是浅拷贝，拷贝是对象的属性的引用，而不是对象本身</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     a<span class="token punctuation">:</span><span class="token punctuation">{</span>         a<span class="token punctuation">:</span><span class="token string">"kobe"</span><span class="token punctuation">,</span>         b<span class="token punctuation">:</span><span class="token number">39</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> initalObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>initalObj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token string">"wade"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//wade</span><span class="token comment" spellcheck="true">// 注意:当Object只有一层的时候,是深拷贝,</span><span class="token keyword">let</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">'kobe'</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'wade'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//kobe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Array.prototype.concat()</p><p>concat() 方法用于连接两个或多个数组。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">'koke'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'wake'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修改新对象会改变原对象</span>打印结果：<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span> username<span class="token punctuation">:</span> <span class="token string">"wake"</span><span class="token punctuation">,</span>__proto__<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.slice() 方法可从已有的数组中返回选定的元素。请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">'kobe'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'wade'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>打印结果：<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>username<span class="token punctuation">:</span> <span class="token string">"wade"</span><span class="token punctuation">}</span>length<span class="token punctuation">:</span> <span class="token number">3</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于Array的slice和concat方法的补充说明：</strong>Array的slice和concat方法不会修改原数组，只会返回一个浅赋值了原数组中的元素的一个新数组</p><p>原数据的元素会按照下述规则拷贝：</p><ul><li>如果该元素是个对象引用（不是实际的对象）,slice会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。</li><li>如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变</li><li>而对于字符串、数字及布尔值来说（指的不是String、Number或者Boolean对象），slice会拷贝这些值到新的数组里。</li><li>在别的数组里修改这些字符串或者数字或者是布尔值，将不会影响到另一个数组</li></ul><p>举例如下:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">'kobe'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>打印结果：<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>username<span class="token punctuation">:</span> <span class="token string">"kobe"</span><span class="token punctuation">}</span>length<span class="token punctuation">:</span> <span class="token number">3</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过打印结果可以发现，其原数组中的值不受影响</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深拷贝的实现方式"><a href="#深拷贝的实现方式" class="headerlink" title="深拷贝的实现方式"></a>深拷贝的实现方式</h2><p>1.JSON.parse(JSON.stringfy())</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">'kobe'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr4 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>arr4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'hahha'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr4<span class="token punctuation">)</span>打印结果：<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>username<span class="token punctuation">:</span> <span class="token string">"kobe"</span><span class="token punctuation">}</span>length<span class="token punctuation">:</span> <span class="token number">3</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>username<span class="token punctuation">:</span> <span class="token string">"hahha"</span><span class="token punctuation">}</span>length<span class="token punctuation">:</span> <span class="token number">3</span>__proto__<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：用JSON.stringfy()将对象转换成JSON字符串，再用JSON.parse()把字符串解析成对象，一来一回，就产生了新的对象<br>而且对象还会开辟出新的栈，从而实现了深拷贝</p><p><strong>但是，这种方法虽然可以实现数组或者对象的深拷贝，但不能处理函数</strong></p><ul><li>因为JSON.stringfy方法是讲一个js对象或者数组转换为一个JSON字符串，不能接受函数</li></ul><p>2.手写递归方法实现</p><p>递归方法实现深度克隆原理：遍历对象、数组直到里边都是基本数据类型，然后再去复制，这就是深拷贝</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义监测数据类型的功能函数</span><span class="token keyword">function</span> <span class="token function">checkedType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现深度克隆--对象/数组</span><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断拷贝的数据类型</span>    <span class="token comment" spellcheck="true">//初始化变量result成最终克隆的数据</span>    <span class="token keyword">let</span> result<span class="token punctuation">,</span>targetType <span class="token operator">=</span><span class="token function">checkedType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>targetType<span class="token operator">===</span><span class="token string">"Object"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//因为数组也是对象,所以先进行判断</span>        result<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType<span class="token operator">===</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> target    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历目标数据</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取遍历数据结构的每一项值</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//判断目标结构里的每一个值是否还存在对象或者数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"Object"</span> <span class="token operator">||</span> <span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取到value值是基本的数据类型或者是函数</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">checkedType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Number</span><span class="token function">checkedType</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//String</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">其中slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">的意思是从第8位开始</span><span class="token punctuation">(</span>包含第<span class="token number">8</span>位<span class="token punctuation">)</span><span class="token function">到最后一位之前</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>的意思就是最后一位，不包含最后一位<span class="token punctuation">)</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>这个是用来判断数据类型，如果target是数字，得出的结果是<span class="token punctuation">[</span>object Number<span class="token punctuation">]</span><span class="token punctuation">,</span>从<span class="token number">0</span>开始，其第<span class="token number">8</span>位就是N，然后最后一位__<span class="token punctuation">]</span>__的前一位就是r，所以取得Number<span class="token punctuation">;</span>如果target是字符串，得出结果是<span class="token punctuation">[</span>object String<span class="token punctuation">]</span><span class="token punctuation">,</span>从<span class="token number">0</span>开始，其第<span class="token number">8</span>位就是S，最后一位的前一位是g，取得String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.函数库lodash</p><p>该函数库也有提供_.cloneDeep用来做Deep Copy</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token punctuation">{</span>        f<span class="token punctuation">:</span><span class="token punctuation">{</span>            g<span class="token punctuation">:</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token operator">===</span>obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span>打印结果：<span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> f<span class="token punctuation">:</span> <span class="token punctuation">{</span> g<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token boolean">false</span>   <span class="token comment" spellcheck="true">//深拷贝结果为false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中常用的一些方法</title>
      <link href="/2021/07/18/shu-zu-zhong-chang-yong-de-yi-xie-fang-fa/"/>
      <url>/2021/07/18/shu-zu-zhong-chang-yong-de-yi-xie-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="Array-数组-10个常用方法"><a href="#Array-数组-10个常用方法" class="headerlink" title="Array(数组)10个常用方法"></a>Array(数组)10个常用方法</h4><p>1、push 在数组末尾添加一个或多个元素，并返回数组的长度, 可以添加任意类型的值作为数组的一个元素。<br>    语法：arr.push(newelement1,newelement2,….,newelementX)</p><pre class="line-numbers language-js"><code class="language-js">示例代码：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// arr:[1,2,6];返回值为3</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// arr:[1,2,6,"aa"];返回值为4</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// arr: [1,2,6,"aa",undefined];返回值为5</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1,2,6,"aa",undefined,{a: "A", b: "B"}];返回值为6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、unshift 在最前面添加一个或多个元素，并返回数组的长度,可以添加任意类型的值作为数组的一个元素。</p><pre><code>语法：arr.unshift(newelement1,newelement2,....,newelementX)</code></pre><pre class="line-numbers language-js"><code class="language-js">示例代码：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// arr:[9, 1, 2];返回值为3</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// arr:['aa',9, 1, 2];返回值为4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、pop 删除最后一个元素,并返回删除元素的值；如果数组为空则返回undefine。该方法会改变原始数组</p><pre class="line-numbers language-js"><code class="language-js">语法：arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>示例代码<span class="token number">1</span>：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// arr: [1, 2, 3, "aa"];返回值为5</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// arr: [1, 2, 3];返回值为"aa"</span>示例代码<span class="token number">2</span>：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 返回值为undefine</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、shift 删除数组第一个元素,并返回被删除的元素;如果数组为空则返回undefine。该方法会改变原始数组</p><pre><code>语法：arr.shift()</code></pre><pre class="line-numbers language-js"><code class="language-js">示例代码<span class="token number">1</span>：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// arr: ["aa", 3, 4,5];返回值为1</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// arr: [3, 4, 5];返回值为"aa"</span>示例代码<span class="token number">2</span>：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 返回值为undefine</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、slice截取数组,得到截取的数组;不改变原始数组,得到新的数组.与String的substring()方法类似。</p><pre><code>语法：slice(start,end)</code></pre><pre class="line-numbers language-js"><code class="language-js">ps<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>start从<span class="token number">0</span>开始<span class="token number">2</span><span class="token punctuation">.</span>包含start位置元素，不包含end位置元素<span class="token number">3</span><span class="token punctuation">.</span>end可以省略，省略表示截取从start位置到数组结束示例代码：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// a1: [2,3,4,5] ;arr不会被改变</span><span class="token keyword">var</span> a2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// a2: [2,3] ;arr不会被改变</span><span class="token keyword">var</span> a3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// a3: [4] ;arr不会被改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、splice剪接数组，向/从数组中添加/删除项目，然后返回被删除的项目，该方法会改变原始数组，索引从0开始</p><pre><code>语法：splice(index,howmany,item1,.....,itemX)</code></pre><pre class="line-numbers language-js"><code class="language-js">ps<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>index <span class="token operator">=</span><span class="token operator">></span> 必需。整数，规定添加<span class="token operator">/</span>删除项目的位置，使用负数可从数组结尾处规定位置。<span class="token number">2</span><span class="token punctuation">.</span>howmany <span class="token operator">=</span><span class="token operator">></span> 可省略。要删除的项目数量。如果设置为 <span class="token number">0</span>，则不会删除项目，如果省略，则会删除index位置及其后面的所有元素。<span class="token number">3</span><span class="token punctuation">.</span>item1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> itemX <span class="token operator">=</span><span class="token operator">></span> 可选。向数组添加的新项目。<span class="token number">4</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。如果从数组中删除了元素，则返回的是含有被删除的元素的数组。示例代码<span class="token punctuation">:</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//以下注释结果分别对数组arr进行操作</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// arr:[1]; 返回值为数组[2,3,4,5]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// arr:[1, 4, 5]; 返回值为数组[2,3]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// arr:[1, "A",2,3, 4, 5]; 未删除元素，返回值为空数组[]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// arr:[1, "A", "B", 4, 5]; 返回值为数组：[2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、concat 合并两个或多个数组，得到新数组，原始数组不改变，如果要进行concat()操作的参数是数组，那么添加的是数组中的元素，而不是数组。</p><pre><code>语法：arr.concat(arr1,arr2,......,arrN)</code></pre><pre class="line-numbers language-js"><code class="language-js">示例代码<span class="token punctuation">:</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// arr:[1,2,3,4,5,6,7]</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// arr:[1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、indexOf 数组元素索引，并返回元素索引，不存在返回-1,索引从0开始</p><pre><code>语法：arr.indexOf(searchvalue,fromindex)</code></pre><pre class="line-numbers language-js"><code class="language-js">ps<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>searchvalue <span class="token operator">=</span><span class="token operator">></span> 必需。规定需检索的字符串值。<span class="token number">2</span><span class="token punctuation">.</span>fromindex <span class="token operator">=</span><span class="token operator">></span> 可选。元素开始检索的位置。如省略，则从数组的首个元素开始<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法对大小写敏感！示例代码：<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//返回值为0</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//返回值为-1</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//返回值为4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、join 数组转字符串,与toString()方法类似</p><pre><code>语法：arr.join(separator)</code></pre><pre class="line-numbers language-js"><code class="language-js">ps<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>separator <span class="token operator">=</span><span class="token operator">></span> 可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。<span class="token number">2</span><span class="token punctuation">.</span>返回一个字符串。<span class="token number">3</span><span class="token punctuation">.</span>该字符串是通过把数组arr中的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 separator 字符串而生成的。示例代码：<span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0-1-2-3-4</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 0,1,2,3,4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10、reverse 颠倒数组中元素的顺序，该方法会改变原来的数组，而不会创建新的数组。</p><pre><code>语法：arr.reverse()</code></pre><pre class="line-numbers language-js"><code class="language-js">示例代码：<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//a：[5, 4, 3, 2, 1] 返回值为数组[5, 4, 3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组去重</title>
      <link href="/2021/07/18/shu-zu-qu-chong/"/>
      <url>/2021/07/18/shu-zu-qu-chong/</url>
      
        <content type="html"><![CDATA[<ol><li>利用ES6 set去重(ES6中最常用)</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {}, {}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不考虑浏览器的兼容性问题，这种去重的方法代码是最少的。但是这种方法还无法去掉”{}”队形，后边高阶方法中会添加去掉重复”{}”的方法</li></ul><ol start="2"><li>利用双重for循环，然送splice去重(ES5中常用)</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果第一个等于第二个，splice方法删除第二个，并把j向前移动</span>                arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "true", 15, false, undefined, NaN, NaN, "NaN", "a", {…}, {…}]     //NaN和{}没有去重，两个null直接消失了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值</li><li>快速学习更多常用的ES6语法，看我<a href="https://segmentfault.com/a/1190000016068235" target="_blank" rel="noopener">《学习ES6笔记──工作中常用到的ES6语法》</a>。</li></ul><ol start="3"><li>利用indexOf()去重</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, "true", true, 15, false, undefined, null, NaN, NaN, "NaN", 0, "a", {…}, {…}]  //NaN、{}没有去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新建一个空数组，利用for循环原数组，判断结果数据中是否存在当前元素，如果有相同的值，则跳过，不同的值，则push进新数组中</li></ul><ol start="4"><li>相邻元素sort()方法去重</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把arr[0]的值赋值给array</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [0, 1, 15, "NaN", NaN, NaN, {…}, {…}, "a", false, null, true, "true", undefined]      //NaN、{}没有去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对</li></ul><ol start="5"><li>利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进,未理解，待学习）</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> array <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "true", 15, false, undefined, null, NaN, 0, "a", {…}]    //两个true直接去掉了，NaN和{}去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>利用includes</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//includes检测数组是否有某个值,如果没有对应的值，就array.push()</span>            array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {…}, {…}]     //{}没有去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>利用hasOwnProperty()  (待理解)</li></ol><p><a href="https://segmentfault.com/a/1190000016909382" target="_blank" rel="noopener">详解</a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里是引入一个空对象来对数组中的元素进行判断，如果对象中没有这个元素，将这个元素设为对象的属性并返回true，如果有这个元素就说明之前已经遍历到了</span>    <span class="token comment" spellcheck="true">//是重复的元素，返回false。因为是讲数组元素类型+元素本身转为字符串设置的对象属性和，多以遇到NaN时，默认下一个NaN与上一个相等，所以这种方法不能去重NaN</span>    <span class="token comment" spellcheck="true">//从性能上考虑，时间复杂度为O(N),但是开辟了一个对象，所以占用了内存，但是对于V8引擎来说，这点可以忽略不计</span>    <span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">false</span><span class="token punctuation">:</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//return arr.filter(function(item,index,arr){</span>        <span class="token comment" spellcheck="true">//console.log(obj.hasOwnProperty(typeof item + item)?false:(obj[typeof item + item]=true))</span>        <span class="token comment" spellcheck="true">//return obj.hasOwnProperty(typeof item + item)?false:(obj[typeof item + item]=true)</span>    <span class="token comment" spellcheck="true">//})</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {…}]   //所有的都去重了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>利用filter</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//简化版 这个数组把我们能考虑到的基本类型都考虑到了，但是NaN是一个特殊的值，在进行indexOf的时候，NaN是在数组中取不到的，所以就把NaN给去掉了，因为indexOf也是进行了一个遍历，所以这种方法的时间复杂度为O(n^2)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span>index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//return arr.filter(function(item,index,arr){</span>        <span class="token comment" spellcheck="true">// 当前元素，在原始数组中的第一个索引 = 当前索引，否则返回当前元素</span>        <span class="token comment" spellcheck="true">//return arr.indexOf(item,0) === index;  //array.indexOf(item,start) ；该方法返回某个元素在数组中的位置。</span>        <span class="token comment" spellcheck="true">// item    必须。查找的元素</span>        <span class="token comment" spellcheck="true">// start 可选。规定检索的位置，它的合法取值是 0 到 stringObject.length - 1。|</span>    <span class="token comment" spellcheck="true">//})</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, "NaN", 0, "a", {…}, {…}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>利用递归去重</li></ol><ul><li><p>sort()方法对于数组排序，在其中参数使用了比较函数compareFunction，那么会根据compareFunction的返回值进行排序。具体规定如下：</p></li><li><p>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p></li><li><p>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</p></li><li><p>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</p></li><li><p>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</p></li><li><p>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</p></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//排序后更加方便去重</span>        <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">===</span>array<span class="token punctuation">[</span>index<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//arrayObject.splice(index,howmany,item1,.....,itemX)</span>            <span class="token punctuation">}</span>            <span class="token function">loop</span><span class="token punctuation">(</span>index<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//递归loop，然后数组去重</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">loop</span><span class="token punctuation">(</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//index的索引是从0开始的，故需要减去1</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, 2, "true", false, null, 0, true, 15, NaN, NaN, "NaN", "a", {…}, {…}, undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>利用Map数据结构去重</li></ol><p><a href="https://www.jianshu.com/p/6a9b1b076fe1" target="_blank" rel="noopener">ES6 map的使用以及数组去重</a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>：添加新的键值<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//如果有该key的值</span>            map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 后面的true 代表该 key 值在原始数组中重复了，false反之</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果没有该key值,添加</span>            array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "a", "true", true, 15, false, 1, {…}, null, NaN, NaN, "NaN", 0, "a", {…}, undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中，由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果</li></ul><ol start="11"><li>利用reduce+includes  (待学习理解) </li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>prev<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token operator">?</span>prev<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">...</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {…}, {…}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="12"><li>[…new Set(arr)]</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代码就是这么少----（其实，严格来说并不算是一种，相对于第一种方法来说只是简化了代码）</span><span class="token comment" spellcheck="true">// [1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {…}, {…}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li>lodash </li></ol><pre class="line-numbers language-js"><code class="language-js">_<span class="token punctuation">.</span><span class="token function">uniq</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => [2, 1] 需要引入lodash*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行内元素和块级元素</title>
      <link href="/2021/07/18/xing-nei-yuan-su-he-kuai-ji-yuan-su/"/>
      <url>/2021/07/18/xing-nei-yuan-su-he-kuai-ji-yuan-su/</url>
      
        <content type="html"><![CDATA[<h2 id="display详解"><a href="#display详解" class="headerlink" title="display详解"></a>display详解</h2><p>CSS中的display属性</p><p>display是前端开发中常用的一个属性，其中最常见的有：</p><ul><li>none</li><li>block</li><li>inline</li><li>inline-block</li><li>inherit</li></ul><h2 id="display-none"><a href="#display-none" class="headerlink" title="display:none"></a>display:none</h2><ul><li>none这个值表示的是此元素将不被显示出来，这个大多都能理解，没什么可解释的</li></ul><h2 id="display-block"><a href="#display-block" class="headerlink" title="display:block"></a>display:block</h2><ul><li>使用了display：block之后，此元素将显示为块元素，此元素前后将带有换行符</li></ul><p>当然这个需要回顾下块级元素以及行元素是什么有什么特点（br、hr为空元素）</p><ul><li>块级元素特点<ul><li>总是以一个块的形式表现处理，占领一行，若干同级块元素从上之下依次排列（使用float元素除外）</li><li>可以设置高度、宽度、各个方向上的margin和padding</li><li>当宽度缺省时，他的宽度是容器的100%，除非设置了固定的宽度才会固定显示</li><li>块级元素中可以容纳其他块级元素或者行内元素</li><li>常见的块级元素有 p 、div、 h1、 li等</li><li>块级元素的display属性值默认为block</li></ul></li><li>行内元素特点<ul><li>他不会单独占据一行，而是只占领自身的宽度和高度所在的空间，若干同级行内元素会从左到右、从上到下依次排列</li><li>行内元素不可以设置高度、宽度，其高度是由字体的大小决定，其宽度由内容的长度控制</li><li>行内元素只能设置左右的margin和padding，而不能设置上下的margin和padding。因此可以通过设置左右的padding值来改变行内元素的宽度</li><li>常见的行内元素有a、em、img等</li><li>行内元素一般不可以包含块级元素</li><li>块级元素的display一般为inline</li></ul></li></ul><p><strong>通过对一个行内元素设置display：block;可以将行内元素设置为块级元素，进而设置它的宽和高</strong></p><p>应用：</p><ul><li>如果要制作导航栏的时候，需要使用到ul li和a标签的组合使用，但是a是行内元素，无法设置他的宽和高，这时，可以在a的样式表中，将display：block</li><li>这样就可以设置他的宽和高了。当然这也包括能使用margin和padding设置我们自己想要的效果了</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- list-style属性是修改列表的项目标记，可以自定义 --></span>        *{padding: 0;margin:0;list-style: none;}        ul li{float: left;}        a{display:block;width: 30px;height: 30px;background: yellow;margin: 5px; text-decoration: none;text-align: center;line-height: 30px;}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：  <img src="display%E8%AF%A6%E8%A7%A3_files/1.jpg" alt></p><h2 id="display：inline"><a href="#display：inline" class="headerlink" title="display：inline"></a>display：inline</h2><ul><li>此元素会被显示为内联元素，元素前后没有换行符</li><li>他的作用即可以将一个块级元素换为行内元素，那么这个块级元素就不能再设置宽度和高度以及上下的margin和padding</li></ul><h2 id="display：inline-block"><a href="#display：inline-block" class="headerlink" title="display：inline-block"></a>display：inline-block</h2><p>display：inline-block是什么呢？通过名字可以知道这是inline和block的结合，即设置了inline-block属性的元素<br>，既具有block元素可以设置的宽度和高度属性的特点，还有inline元素不换行的特点</p><ul><li>举例：</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">ul,li,a,*</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token selector">li</span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> thin solid red<span class="token punctuation">;</span><span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：   <img src="display%E8%AF%A6%E8%A7%A3_files/2.jpg" alt></p><p>通过图中可以看到实现了横向的排列，当然也可以设置宽和高。但是虽然设置了padding和margin的值都为0，但是他们之间还会有距离<br>这个因为inline元素自身出现的问题，inline-block结合了两者，所以也出现了这样的问题。这个空袭是空白符，再浏览器中，空白符<br>是不会被浏览器忽略的，多个连续的空白符浏览器会自动将其合并生成一个。我们编码的时候写的空格，换行时都会产生空白符，所有自<br>然而然的两个元素之间会有空白符，如果将上述例子中的a标签写成一行，空白符也就会消失，菜单栏就会变得紧凑起来</p><p>解决办法：明白了空白符归根结底是一个字符，只要我们将ul中的字符大小设置为0，那么空白符也就不存在了。但是这时a的字体大小也<br>会继承ul的字体大小，那么就不见了，那么该怎么办，只需要将a中再设置一个字体不为0的大小覆盖即可</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">       <span class="token selector">&lt;strong> ul</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">&lt;/strong>        ul,li,a,*</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token selector">li</span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> thin solid red<span class="token punctuation">;</span>&lt;strong><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>&lt;/strong><span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图： <img src="display%E8%AF%A6%E8%A7%A3_files/3.jpg" alt></p><p>通过inline-block完成一个常见的三列布局<br>其html代码如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;div id="header">我是header&lt;/div>&lt;div id="content">    &lt;div id="left">我是left&lt;/div>    &lt;div id="center">我是center&lt;/div>    &lt;div id="right">我是right&lt;/div>&lt;/div>&lt;div id="footer">我是footer&lt;/div><span class="token id">#header</span>,<span class="token id">#footer</span></span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">800</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">800</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#aaa</span><span class="token punctuation">;</span>&lt;strong><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&lt;/strong><span class="token punctuation">}</span><span class="token selector">//解决inline元素产生的空白符问题<span class="token id">#left</span>,<span class="token id">#right</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fadaac</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#center</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#dadada</span><span class="token punctuation">;</span>&lt;strong><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>&lt;/strong><span class="token punctuation">}</span>//这里一定要重新设置font-size。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结</title>
      <link href="/2021/07/18/xue-xi-zong-jie/"/>
      <url>/2021/07/18/xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>前端学习总结，带答案:<a href="https://blog.csdn.net/Coco_998/article/details/82958819" target="_blank" rel="noopener">詳解</a></p><h4 id="1-express和koa的对比，两者中间件的原理，koa捕获异常多种情况说一下-詳解"><a href="#1-express和koa的对比，两者中间件的原理，koa捕获异常多种情况说一下-詳解" class="headerlink" title="1.express和koa的对比，两者中间件的原理，koa捕获异常多种情况说一下:詳解"></a>1.express和koa的对比，两者中间件的原理，koa捕获异常多种情况说一下:<a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/koa&express.md" target="_blank" rel="noopener">詳解</a></h4><h4 id="2-你项目里用到第三方登录涉及的oAuth-JWT-协议的实现原理，以及你本地的实现原理，第三方登录怎么样保证安全性（未总结）"><a href="#2-你项目里用到第三方登录涉及的oAuth-JWT-协议的实现原理，以及你本地的实现原理，第三方登录怎么样保证安全性（未总结）" class="headerlink" title="2.你项目里用到第三方登录涉及的oAuth(JWT)协议的实现原理，以及你本地的实现原理，第三方登录怎么样保证安全性（未总结）"></a>2.你项目里用到第三方登录涉及的oAuth(JWT)协议的实现原理，以及你本地的实现原理，第三方登录怎么样保证安全性（未总结）</h4><h4 id="3-说下快排完整性（未总结）"><a href="#3-说下快排完整性（未总结）" class="headerlink" title="3.说下快排完整性（未总结）"></a>3.说下快排完整性（未总结）</h4><h4 id="4-React和Vue的主要区别，你开发过程中如何选择技术栈"><a href="#4-React和Vue的主要区别，你开发过程中如何选择技术栈" class="headerlink" title="4.React和Vue的主要区别，你开发过程中如何选择技术栈"></a>4.React和Vue的主要区别，你开发过程中如何选择技术栈</h4><ul><li>答：两者之间的技术栈构成，</li><li>React使用react+redux(mobx)+webpack</li><li>vue使用vue+vuex+webpack</li><li>小型应用我会选择vue-webpack</li><li>中、大型应用我会选择使用react-webpack</li></ul><h4 id="5-express里边的登录的session服务怎么样实现分布式服务"><a href="#5-express里边的登录的session服务怎么样实现分布式服务" class="headerlink" title="5.express里边的登录的session服务怎么样实现分布式服务"></a>5.express里边的登录的session服务怎么样实现分布式服务</h4><ul><li><p>其实就是用户的登录状态，如果登录了一个网站，若关闭了这个网站，过一段时间，再次打开的时候，依然还是登录状态。</p><ul><li>这里通过session，服务器上能够保存用户的登录状态，直到我们退出登录或者保存的登录状态过期。</li><li>session登录验证的大致流程为：客户端若在未登录的状态下请求主页，那么服务器将该请求重定向到登录页面；</li><li>客户端在登录后，服务器需要记录保存该客户端的登录状态，并给予一个活动期限，这样下一次服务器请求主页的时候，就能够判断该客户端的登录状态，</li><li>若登录状态有效，直接返回给客户端需要的页面，否则重定向到登录页面</li></ul></li><li><p>对于session的过期时间，如果没有设置session的过期时间，服务器会根据自己配置中默认有效期，将长期不与服务器交互的session进行删除</p><ul><li>session登录需要安装的以下依赖有npm install express –save、npm install body-parser –save、npm install express-session –save、npm install ejs –save</li><li><a href="https://www.cnblogs.com/mingjiatang/p/7495321.html" target="_blank" rel="noopener">详解参考</a></li></ul></li></ul><h4 id="6-ajax是同步还是异步，怎么样实现同步"><a href="#6-ajax是同步还是异步，怎么样实现同步" class="headerlink" title="6.ajax是同步还是异步，怎么样实现同步"></a>6.ajax是同步还是异步，怎么样实现同步</h4><ul><li>ajax即可以处理同步请求，也可以处理异步请求</li><li>以下是相关数据请求参数 //参数1 ：method：请求的类型；GET 或 POST //参数2 ：url：文件在服务器上的位置 //参数3 ：async：true（异步）或 false（同步）</li><li>一般默认值为true，为异步，异步请求可以完全不影响用户的体验效果，无论请求的时间长或者短，用户都在专心的操作页面的其他内容，并不会有等待的感觉</li></ul><ul><li><p>什么是同步请求：</p><ul><li>同步请求即是当前发出请求后，浏览器什么都不能做，必须得等到请求完成返回数据之后，才会执行后续的代码，相当于是排队等候；前一个人办理完自己的事物，下一个人才能接着办。也就是说，当JS代码加载到当前Ajax的时候会把页面里所有的代码停止加载，页面此时处于一个假死状态，当这个AJAX执行完毕后才会继续运行其他代码页面解除假死状态</li><li>在数据响应之前，客户端不能进行其他操作</li><li>它是指的当发送方发出数据后，等待接收方发回响应以后才发下一个数据包的通讯方式（对于一个表单提交的过程中，当用户填写所有信息后，提交到服务器，等待服务器的回应（检验数据），是一次性的。若信息填写错误，就要重新填写）</li></ul></li><li><p>什么是异步请求：</p><ul><li>异步请求就当发出请求的同事，浏览器可以做任何事情，ajax发送请求，不会影响页面的加载与用户的操作，相当于是在两条线上，各走各的，互不影响</li><li>在响应之前，客户端可以继续进行其他操作，不受影响</li><li>它是指当发送方发出数据后，不用等待接收方回响应，就可发送下一个数据包的通讯方式。（对于一个表单提交事件，当用户填写完一条信息后，该信息会自动向服务器提交，然后服务器响应客户端，在此过程中，用户依然在填写表单的信息，即向服务器请求多次，节省了用户的时间，提高了用户的体验）</li></ul></li></ul><p><a href="https://www.cnblogs.com/yangguoe/p/8461932.html" target="_blank" rel="noopener">详解</a></p><h4 id="7-ajax实现过程"><a href="#7-ajax实现过程" class="headerlink" title="7.ajax实现过程"></a>7.ajax实现过程</h4><ul><li><p>实现一个AJAX异步调用和局部刷新，通常需要以下几个步骤：</p><ul><li>创建XMLHttpRequests对象，也就是创建一个异步调用对象</li><li>创建一个新的HTTP请求，并指定该HTTP请求的方法、URL以及验证信息</li><li>设置响应HTTP请求状态变化的函数</li><li>发送HTTP请求</li><li>获取异步调用返回的数据</li><li>使用JS和DOM操作实现页面局部刷新</li></ul></li><li><p>其实现步骤如下：<a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/ajax%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B.md" target="_blank" rel="noopener">详解</a></p></li><li><p>AJAX运行步骤与状态值说明　</p><ul><li>在AJAX实际运行当中，对于访问XMLHttpRequest（XHR）时并不是一次完成的，而是分别经历了多种状态后取得的结果，对于这种状态在AJAX中共有5种，分别是：</li><li>0 - (未初始化)还没有调用send()方法</li><li>1 - (载入)已调用send()方法，正在发送请求</li><li>2 - (载入完成)send()方法执行完成，</li><li>3 - (交互)正在解析响应内容</li><li>4 - (完成)响应内容解析完成，可以在客户端调用了</li><li>对于上面的状态，其中“0”状态是在定义后自动具有的状态值，而对于成功访问的状态（得到信息）我们大多数采用“4”进行判断。</li></ul></li></ul><h4 id="8-call和apply的区别"><a href="#8-call和apply的区别" class="headerlink" title="8.call和apply的区别"></a>8.call和apply的区别</h4><ol><li>call和apply作用都是把obj绑定到thisObj的作用，即改变this的指向，然而唯一的区别就是apply传递的参数必须得是数组的形式传递，而call则直接使用连续参数传递</li></ol><pre class="line-numbers language-js"><code class="language-js">obj<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisObj<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisObj<span class="token punctuation">,</span><span class="token punctuation">[</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>call和apply使用在什么地方？</li></ol><ul><li>当一个对象需要调用另外一个对象里边的方法的时候，就可以用到call和apply，call和apply可以理解成是继承另外一个对象的方法，以下代码举例：</li></ul><pre class="line-numbers language-js"><code class="language-js">首先<span class="token punctuation">,</span>我们先建立两个对象，obj1和obj2<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"全局中的name"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"obj1中的name"</span><span class="token punctuation">,</span>    func1<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    func2<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>va obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"obj2中的name"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果obj2对象要调用obj1中的func1方法，则</li></ul><blockquote><p>obj1.func1.call(obj2);  //输出：obj2中的name</p></blockquote><blockquote><p>obj1.func1.apply(obj2); //输出：obj2中的name</p></blockquote><ul><li>call和apply第一个参数都是表示obj1绑定的对象，如果obj1要绑定到this，此时的obj1就是绑定到全局，如下：</li></ul><blockquote><p>obj1.func1.call(this); //输出：全局中的name</p></blockquote><blockquote><p>obj1.func1.apply(this); //输出：全局中的name</p></blockquote><ul><li>如果obj2对象要调用obj1中的func2方法，则</li></ul><blockquote><p>obj1.func2.call(obj2,1,2);</p></blockquote><blockquote><p>obj1.func2.apply(obj2,[1,2]);</p></blockquote><ul><li>此时func2方法是有参数的，call和apply中的第二个参数开始是传给func2方法的参数，但是call参数是直接连续传递的，而apply传递参数是以一个数组传递</li></ul><p><a href="https://segmentfault.com/a/1190000012116140" target="_blank" rel="noopener">详解</a></p><ol start="3"><li>bind的使用</li></ol><blockquote><p>区别：bind同样实现了改变this指向的功能，但是它不会立即执行，而是会重新创建一个绑定函数，新函数被调用时，使用bind()方法里面的第一个参数作为this</p></blockquote><pre class="line-numbers language-js"><code class="language-js">bind，从第二个参数开始，同样以参数列表的形式，但是会提前放在新绑定函数的参数之前<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"- age: "</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"popo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "popo" 作为新函数的第一个参数。</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// logs    name: popo- age: 13</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"bobo"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// logs    name: popo- age: bobo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://segmentfault.com/a/1190000012116140" target="_blank" rel="noopener">详解</a></p><h4 id="9-JavaScript闭包"><a href="#9-JavaScript闭包" class="headerlink" title="9.JavaScript闭包"></a>9.JavaScript闭包</h4><p>闭包的用处、特性、优点、缺点</p><ol><li>变量作用域</li></ol><ul><li>要理解闭包，首先要了解JavaScript的特殊的变量作用域</li><li>变量无非就是两种：全局变量和局部变量</li><li>JavaScript语言的特别之处就在于：其函数内部可以直接读取全局变量，但是在函数外部却无法读取函数内部的局部变量</li><li>PS：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量</li></ul><ol start="2"><li>闭包的概念</li></ol><ul><li>能够读取其他函数内部变量的函数。</li><li>或简单理解为定义在一个函数内部的函数，内部函数持有外部函数内变量的引用。</li><li>在本质上，闭包是将函数内部和函数外部连接起来的桥梁</li></ul><ol start="3"><li>闭包的特性</li></ol><ul><li>封闭性：外界无法访问闭包内部的数据，如果在闭包内声明变量，外界是无法访问的，除非闭包主动向外界提供访问接口</li><li>持久性：一般的函数，调用完毕后，系统自动注销函数，而对于闭包来说，在外部函数被调用之后，闭包结构依然存在</li></ul><ol start="4"><li>闭包的特点</li></ol><ul><li>缺点：由于闭包携带包含它函数的作用域，因此比其他函数占用的内存更多，泄露内存</li><li>优点：减少创建全局变量，减少传递给函数的参数量，延长变量声明周期</li></ul><p><a href="https://blog.csdn.net/sunlizhen/article/details/83305911" target="_blank" rel="noopener">详解1</a></p><p>闭包考题1：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 形成闭包</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> fun2 <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2，第一次打印为2</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3  第二次因为count还在，把之前的count给覆盖了，故而count++ 为3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>闭包考题2：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// var n = 1, o;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return 了一个对象</span>    fun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// var m = 1;</span>      <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一次传入为0时，相当于是 var n = 1, o;此时o没有被定义；此时的fun()执行的是外部函数，</span>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//a.fun(1)此时为fun函数内部的fun对象调用，并传入值1，使得m=1,此时m=1,n承接了外部函数的n，得到值为0  => 外部函数n=1,o=0</span>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined,0,0,0  因为以上都是基于在a的前提下进行调用，此时的值和都为0</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined,0,1,2,3,50  因为以上的基于上一结果的承接，结果，，</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined,0,1,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>闭包常见的应用场景</p><ol><li>匿名自动执行函数</li></ol><ul><li>对于一些我们使用的变量，如果不加上var关键字，则默认会添加到全局对象的属性上去，这样的临时变量加入全局对象会有很多的坏处</li><li>如：别的函数可能无用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)</li><li>除了每次使用变量都是var关键字外，我们在实际情况下经常遇到这样的情况，即有的函数只需要执行一次，其内部变量无需维护</li><li>如：UI的初始化，我们可以使用闭包：</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    table<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    tree<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>dm<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dm<span class="token punctuation">.</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> row <span class="token operator">=</span> dm<span class="token punctuation">.</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>row<span class="token punctuation">.</span>cells<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">drawCell</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里创建了一个匿名函数，并立即执行它，由于外部无法引用它内部的变量，因此在函数执行完后，会立即释放资源，关键是不污染全局对象</li></ul><ol start="2"><li>结果缓存</li></ol><ul><li>开发过程中可能会遇到很多情况，若有一个处理过程很耗时的函数对象，每次调用都会话费很长时间</li><li>那么我们需要将计算处理的值存储起来，当再次调用的时候，首先从缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值；若找到了，直接返回查找的值即可</li><li>闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> CacheSearchBox <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> cache <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        attachSearchBox<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>dsid<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dsid <span class="token keyword">in</span> cache<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> cache<span class="token punctuation">[</span>dsid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> fsb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uikit<span class="token punctuation">.</span>webctrl<span class="token punctuation">.</span>SearchBox</span><span class="token punctuation">(</span>dsid<span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">[</span>dsid<span class="token punctuation">]</span> <span class="token operator">=</span> fsb<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">delete</span> cache<span class="token punctuation">[</span>count<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> fsb<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    clearSearchBox<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>dsid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dsid <span class="token keyword">in</span> cache<span class="token punctuation">)</span><span class="token punctuation">{</span>            cache<span class="token punctuation">[</span>dsid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CachedSearchBox<span class="token punctuation">.</span><span class="token function">attachSearchBox</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这样可以在第二次调用的时候，就会从缓存中读取到该对象</li></ul><ol start="3"><li>封装</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//变量作用域为函数内部，外部无法访问</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        getName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        setNmae<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">{</span>            name <span class="token operator">=</span> newName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接访问，结果为undefined</span><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"abruzzi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>得到结果如下：undefined<span class="token keyword">default</span>abruzzi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>实现类和继承</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        getName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        setName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">{</span>            name <span class="token operator">=</span> newName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> Jack <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//继承自Person</span>    Jack<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加私有方法</span>    Jack<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,my name is jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    j<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    j<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义了Person,就像一个类，当new一个Person对象，可以访问它的方法</li><li>定义了一个Jack，继承Person，并添加自己的方法</li></ul><p><a href="https://blog.csdn.net/qq_34986769/article/details/52171174" target="_blank" rel="noopener">详解2</a></p><h4 id="10-跨域方法以及怎么样实现的与原理"><a href="#10-跨域方法以及怎么样实现的与原理" class="headerlink" title="10.跨域方法以及怎么样实现的与原理"></a>10.跨域方法以及怎么样实现的与原理</h4><p>什么是跨域？以及怎么做跨域处理等详细解释<br><a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/%E8%B7%A8%E5%9F%9F.md" target="_blank" rel="noopener">详解</a></p><h4 id="11-数组去重"><a href="#11-数组去重" class="headerlink" title="11.数组去重"></a>11.数组去重</h4><p><a href="https://segmentfault.com/a/1190000016418021#item-4" target="_blank" rel="noopener">原文</a><br><a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D.md" target="_blank" rel="noopener">详解</a></p><h4 id="12-http状态码"><a href="#12-http状态码" class="headerlink" title="12.http状态码"></a>12.http状态码</h4><p>http状态码：</p><ul><li>当访问一个网页时，浏览器向网页所在的服务器发出请求，当浏览器接受并显示网页前，服务器会返回一个包含HHTP状态码的信息头用以响应浏览器的请求</li></ul><p>常见的HTTP状态码：</p><ul><li>200请求成功</li><li>301重定向</li><li>404客户端请求的语法错误，服务器无法理解</li><li>500服务器端在执行时发生错误，无法完成请求</li></ul><p>状态码分类：</p><table><thead><tr><th>分类</th><th>描述</th><th>状态码</th></tr></thead><tbody><tr><td>1xx</td><td>指示信息，表示请求已接收，继续处理</td><td>100    继续    初始的请求已经接受，请客户端继续发送剩余部分101    切换协议    请求这要求服务器切换协议，服务器已确定切换</td></tr><tr><td>2xx</td><td>成功，表示请求已被成功接收、理解、接受</td><td>200：ok请求正常处理；204：请求处理成功，但没有资源可返回；206:对资源的某一部分的请求</td></tr><tr><td>3xx</td><td>重定向，要完成请求必须进行下一步的操作</td><td>301：永久重定向，请求的资源已经被永久的移动到新的URL中，今后任何新的请求都应该使用新的URL替代；302临时性重定向，资源只是临时被移动，客户端应继续使用原有URL；304缓存中读取，未修改，所请求的资源未修改，服务器返回状态码，不返回任何资源，客户端通常会缓存访问过的资源</td></tr><tr><td>4xx</td><td>客户端错误，请求有语法错误或请求无法实现</td><td>400：请求报文中存在语法错误；401：请求未经授权，需要有同感HTTP认证的认证信息；403：服务器收到请求，但是拒绝提供服务；404：无法找到资源</td></tr><tr><td>5xx</td><td>服务器端错误，服务器未能实现合法的请求</td><td>500：服务器子执行时发生错误；503服务器处于超负载或者正在停机维护</td></tr></tbody></table><p><a href="https://segmentfault.com/a/1190000018264501" target="_blank" rel="noopener">HTTP详解</a></p><h4 id="Node了解多少"><a href="#Node了解多少" class="headerlink" title="Node了解多少"></a>Node了解多少</h4><p><a href="https://blog.csdn.net/qq_20381469/article/details/51497172" target="_blank" rel="noopener">面试题</a></p><h4 id="为什么要初始化css样式"><a href="#为什么要初始化css样式" class="headerlink" title="为什么要初始化css样式"></a>为什么要初始化css样式</h4><p>浏览器差异</p><ul><li>不同的浏览器对有些标签的默认值是不同的，如果没对css初始化会出现浏览器之间的页面显示差异</li></ul><p>提高编码质量</p><ul><li>如果不初始化，整个页面做完会很糟糕，重复的css样式很多</li></ul><p>最简单的初始化方式是(但是不建议)</p><blockquote><p>*{margin:0;padding:0}</p></blockquote><p>淘宝样式初始化</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td </span><span class="token punctuation">{</span> <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">body, button, input, select, textarea </span><span class="token punctuation">{</span> <span class="token property">font</span><span class="token punctuation">:</span><span class="token number">12</span>px/<span class="token number">1.5</span>tahoma, arial, <span class="token entity" title="\5b8b">\5b8b</span><span class="token entity" title="\4f53">\4f53</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">h1, h2, h3, h4, h5, h6</span><span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">address, cite, dfn, em, var </span><span class="token punctuation">{</span> <span class="token property">font-style</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">code, kbd, pre, samp </span><span class="token punctuation">{</span> <span class="token property">font-family</span><span class="token punctuation">:</span>couriernew, courier, monospace<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">small</span><span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">ul, ol </span><span class="token punctuation">{</span> <span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span> <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span> <span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">sup </span><span class="token punctuation">{</span> <span class="token property">vertical-align</span><span class="token punctuation">:</span>text-top<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">sub</span><span class="token punctuation">{</span> <span class="token property">vertical-align</span><span class="token punctuation">:</span>text-bottom<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">legend </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#000</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">fieldset, img </span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">button, input, select, textarea </span><span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">table </span><span class="token punctuation">{</span> <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span> <span class="token property">border-spacing</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>腾讯QQ官网样式初始化</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body,ol,ul,h1,h2,h3,h4,h5,h6,p,th,td,dl,dd,form,fieldset,legend,input,textarea,select</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">font</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token string">"宋体"</span>,<span class="token string">"Arial Narrow"</span>,HELVETICA<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">a</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#2d374b</span><span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span> <span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#cd0200</span><span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">}</span> <span class="token selector">em</span><span class="token punctuation">{</span><span class="token property">font-style</span><span class="token punctuation">:</span>normal<span class="token punctuation">}</span> <span class="token selector">li</span><span class="token punctuation">{</span><span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span> <span class="token selector">img</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">}</span> <span class="token selector">table</span><span class="token punctuation">{</span><span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span><span class="token property">border-spacing</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">word-wrap</span><span class="token punctuation">:</span>break-word<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新浪官网样式初始化</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#333</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"SimSun"</span>,<span class="token string">"宋体"</span>,<span class="token string">"Arial Narrow"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">ul,ol</span><span class="token punctuation">{</span><span class="token property">list-style-type</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">select,input,img,select</span><span class="token punctuation">{</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">a</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#009</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#800080</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">a<span class="token pseudo-class">:hover</span>,a<span class="token pseudo-class">:active</span>,a<span class="token pseudo-class">:focus</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#c00</span><span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网易官网样式初始化</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html </span><span class="token punctuation">{</span><span class="token property">overflow-y</span><span class="token punctuation">:</span>scroll<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">body </span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">29</span>px<span class="token number">00</span><span class="token punctuation">;</span> <span class="token property">font</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token string">"\5B8B\4F53"</span>,sans-serif<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#ffffff</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,blockquote,p</span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">table,td,tr,th</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">li</span><span class="token punctuation">{</span><span class="token property">list-style-type</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">img</span><span class="token punctuation">{</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>top<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">ol,ul </span><span class="token punctuation">{</span><span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">h1,h2,h3,h4,h5,h6</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span> <span class="token property">font-weight</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">address,cite,code,em,th </span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span> <span class="token property">font-style</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="为什么要设置同源策略"><a href="#为什么要设置同源策略" class="headerlink" title="为什么要设置同源策略"></a>为什么要设置同源策略</h4><p>什么是同源？</p><ul><li>两个页面地址中的协议、域名、端口号不一致，则表示同源</li></ul><p>同源策略限制：</p><ul><li>不能通过ajax请求不同域的数据，不能通过脚本操作不同域下的DOM</li></ul><p>为什么要用同源策略</p><ul><li>设备同源限制，主要是为了安全，如果没有同源限制，在浏览器中的cookie等其他数据可以任意读取，不同域下的DOM任意操作，ajax任意请求的话，如果浏览了恶意网站的话，那么就会泄露这些隐私数据</li></ul><h4 id="axios有哪些特点"><a href="#axios有哪些特点" class="headerlink" title="axios有哪些特点"></a>axios有哪些特点</h4><ul><li>Axios是基于promise的HTTP库，支持promise所有的API</li><li>它可以拦截请求和响应</li><li>它可以转换请求数据和响应数据，并对响应回来的内容自动转换（它可以转换请求数据和响应数据，并对响应回来的内容自动转换成JSON类型的数据）</li><li>安全性更高，客户端支持防御XSRF</li></ul><p>它有哪些常用方法</p><ul><li>axios.get(url,config)  //get请求用于列表和信息查询</li><li>axios.delete(url[,config]) //删除</li><li>axios.post(url[,data[,config]]) //post请求用于信息的添加</li><li>axios.put(url[,data[,config]])  //更新操作</li></ul><p>axios相关配置属性</p><ul><li>URL是用于请求的服务器URL</li><li>method是创建请求时使用的方法，默认是get</li><li>baseURL讲自动加在url前面，除非url是一个绝对的URL，它可以通过设置一个baseurl便于为axios实例的方法传递相对url</li><li>transformRequest允许在想服务器发送前，修改请求数据，只能用在put、post和patch这几个方法中</li><li>header是即将被发送的自定义请求头</li></ul><blockquote><p>headers:{‘X-Requested-With’:’XMLHttpRequest’},</p></blockquote><ul><li><code>params</code>是即将与请求一起发送的URL参数，必须是一个无格式对象(plainobject)或URLSearchParams对象</li></ul><blockquote><p>params:{ID:12345},</p></blockquote><ul><li><code>auth</code>表示应该使用HTTP基础验证，并提供凭据;这将设置一个<code>Authorization</code>头，覆写掉现有的任意使用<code>headers</code>设置的自定义<code>Authorization</code>头</li></ul><blockquote><p>auth:{username:’janedoe’,password:’s00pers3cret’},</p></blockquote><ul><li>‘proxy’定义代理服务器的主机名称和端口;<code>auth</code>表示HTTP基础验证应当用于连接代理，并提供凭据;这将会设置一个<code>Proxy-Authorization</code>头，覆写掉已有的通过使用<code>header</code>设置的自定义<code>Proxy-Authorization</code>头。</li></ul><blockquote><p>proxy:{host:’127.0.0.1’,port:9000,auth::{username:’mikeymike’,password:’rapunz3l’}},</p></blockquote><h4 id="cookie和webstrage的区别以及cookie怎么样使用？原生cookie怎么样封装"><a href="#cookie和webstrage的区别以及cookie怎么样使用？原生cookie怎么样封装" class="headerlink" title="cookie和webstrage的区别以及cookie怎么样使用？原生cookie怎么样封装"></a>cookie和webstrage的区别以及cookie怎么样使用？原生cookie怎么样封装</h4><p>cookie的优点：具有极高的扩展性和可用性</p><ul><li>通过良好的编程，控制保存在cookie中的session对象的大小</li><li>通过加密和安全传输技术，减少cookie被破解的可能性</li><li>只有在cookie中存放不敏感的数据，即使被盗取也不会有很大的损失</li><li>控制cookie的生命期，使之不会永远有效。这样的话，偷盗者很有可能拿到的就是一个过期的cookie</li></ul><p>cookie的缺点：</p><ul><li>cookie的长度和数量的限制，每个domain最多只能有20条cookie，每个cookie长度不能超过4k，否则会被截掉</li><li>安全性问题，如果cookie被人拦掉了，那个人就可以获取到所有的session信息，加密的话也不起什么作用</li><li>有些状态不可能保存在客户端，例如：为了防止重复提交表单，我们需要在服务端保存一个计数器，若把计数器保存在客户端，则起不到什么作用</li></ul><p>在html5中web storage包括两种存储方式：sessionstorage和localstorage</p><ul><li>sessionstorage用于本地存储一个session钟的数据，这个数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li><li>因此sessionstorage不是一种持久化的本地存储，仅仅是会话级别的存储</li><li>而localstorage用于持久化的本地存储，除非主动删除数据，否则数据是永远也不过期的</li></ul><p>web storage的概念和cookie相似，区别是它是为了更大的容量存储设计的。</p><ul><li>cookie大小受限，并且每次都请求一个新的页面的时候后，cookie都会被发送过去，另外cookie还需要指定作用域，不可以跨域调用</li><li>cookie的作用是与服务器进行交互，作为HTTP规范的一部分存在，而web storage仅仅是为了在本地存储数据而生</li><li>localstorage和sessionstrage都具有相同的操作方法。例如：setItem,getItem,removeItem等</li></ul><p>原生cookie的封装(不太懂，不知何用途)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//cookie设置、读取、删除的封装</span><span class="token comment" spellcheck="true">//设置cookie</span><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">,</span>iDay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> oDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oDate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>oDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>iDay<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">';express='</span><span class="token operator">+</span>oDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取cookie</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除cookie</span><span class="token keyword">function</span> <span class="token function">removeCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setcCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cookie有什么限制吗？</p><ul><li>cookie是HTTP头中的一个字段，虽然HTTP本身对这个字段并没有多少限制，但是cookie最终还是存储在浏览器里，</li><li>所以不同的浏览器对cookie的存储都有一些限制，正常情况下是数量限制是20个、50个、或者不限制 /每个域名，总大小有4097个字节左右大小，谷歌浏览器中的大小为8000+</li><li>每个浏览器的cookie数量限制至少是20个，只要满足IE浏览器的cookie使用大小，就能满足其他的所有浏览器</li></ul><h4 id="对跨域了解吗。jsonp的限制"><a href="#对跨域了解吗。jsonp的限制" class="headerlink" title="对跨域了解吗。jsonp的限制"></a>对跨域了解吗。jsonp的限制</h4><p>详细见跨域一栏</p><h4 id="浏览器那些地方用到了异步"><a href="#浏览器那些地方用到了异步" class="headerlink" title="浏览器那些地方用到了异步"></a>浏览器那些地方用到了异步</h4><p>首先，JS是一门脚本语言，它的执行顺序是从上到下逐行执行的，浏览器只有一个JavaScript引擎，所以浏览器只能同时执行一个任务，那么异步操作是怎么实现的呢？</p><ul><li>浏览器的JavaScript引擎确实是单线程的，但是浏览器本身是多线程的，</li><li>浏览器包含JavaScript引擎线程界面渲染线程</li><li>浏览器事件触发线程</li><li>HTTP请求线程</li></ul><p>所以触发异步操作的时候，会有单独的线程去操作，JavaScript引擎线程不会受到阻塞，依然继续解析JS代码</p><h4 id="css弹性布局，哪些地方用到过"><a href="#css弹性布局，哪些地方用到过" class="headerlink" title="css弹性布局，哪些地方用到过"></a>css弹性布局，哪些地方用到过</h4><p>CSS弹性盒子</p><ul><li>弹性盒子是CSS3的一种新布局模式，是一种当页面需要适应不同的屏幕大小以及设备类型时，确保元素拥有恰当的行为的布局方式</li><li>引入弹性盒子布局模式的目的是提供一种更加有效的方式来对一个容器中的子元素进行排序、对齐和分配空白空间</li></ul><p>CSS弹性盒子内容</p><ul><li>弹性盒子由弹性容器和弹性子元素组成</li><li>弹性容器通过设置display属性的值为flex或inline-flex将其定义为弹性容器</li><li>弹性容器内包含了一个或多个弹性子元素</li></ul><p>注意：弹性容器外以及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局</p><ul><li>弹性子元素通常在弹性盒子内一行显示，默认情况每个容器只有一行</li><li>以下元素展示了弹性子元素在一行内显示，从左到右</li></ul><h4 id="position属性有哪些值，分别有什么含义"><a href="#position属性有哪些值，分别有什么含义" class="headerlink" title="position属性有哪些值，分别有什么含义"></a>position属性有哪些值，分别有什么含义</h4><p><a href="https://blog.csdn.net/Zetang_Wu/article/details/81589687" target="_blank" rel="noopener">原文</a></p><p>position属性有以下四个取值：</p><ul><li>static：静态定位，是position属性的默认值，表示无论怎么设置top、bottom、right、left属性，元素的位置（与外部位置）都不会发生改变</li><li>relative：相对定位。表示用top、bottom、right、left属性，可以设置元素相对于初始位置的相对位置。不占用原页面空间</li><li>absolute：绝对定位。表示用top、bottom、right、left属性可以设置元素相对于其父元素（除了设置了static的父元素以外）左上角的位置，如果父元素设置了static，子元素会继续追溯到祖辈元素一直到body。占据原位置空间</li><li>fixed:绝对定位，相对于浏览器窗口进行定位，同样是使用top、bottom、right、left</li><li>四种取值中，除了static之外，其他属性都可以通过z-index进行层次分级</li></ul><p>relative</p><ul><li>定位为relative的元素，脱离正常的文本流中，但其在文本流中的位置依然存在</li><li>元素脱离正常的文本流，意思是外观位置发生了变化，即是实际页面上可以看到的变化，文本流的位置依然存在是指默认的位置（设置以前的位置）还在，相当“虽然设置了位置偏移，但元素的灵魂还在”</li></ul><p><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/1.jpg" alt></p><p>它是默认参照父级的原始点为原始点定位元素，无父级则以文本流的顺序在上一个元素的底部为原始点定位元素位置，并配合top、bottom、right、left设置偏移确定元素定位</p><ul><li>一般情况下，以父级的左上角为原定，在没有父级的时候，它是参照浏览器左上角，如果在没有父级元素的情况下，存在文本，则以文本的底部为原始点进行定位并将文字断开</li><li>如果父级没有设置position属性，仍旧以父级的左上角为原点进行定位</li><li>如果父级设定position属性，不管是取哪个值，都以父级的左上角为原点进行定位。如果父级有padding属性，那么就以内容区域的左上角为原点，进行定位，</li><li>以上三点可以总结出，无论父级存在不存在，无论有没有trbl，均是以父级的左上角进行定位，但是父级的padding属性会对其影响</li></ul><p>absolute</p><p>定位为absolute的层脱离正常文本流，但与relative的区别是其在正常流中的位置不再存在（这是与relative的第一个不同点）</p><ul><li>跟relative一样，这里也是实际上可以看到布局发生了变化，跟relative不同的是，此时它的“灵魂”不在原地，也不在新的位置，而是不复存在了（即它不占用页面位置）</li></ul><p>在这里要区分跟Fixed值混淆，absolute并不是永远根据浏览器窗口进行定位的，这个较为复杂</p><ul><li>一般情况下以父级的左上角定位，在没有父级的时候，它是参照浏览器左上角（这里与relative完全一致）</li><li>如果在没有父级元素的情况下，存在文本，则以他前面的最后一个文字的右上角为原点进行定位，但是不断开文字，覆盖于上方（这里是与relative的第二个不同点）</li><li>如果父级没有设定position属性，那么当前的absolute则以浏览器左上角为原点进行定位，位置由偏移设置（top、bottom、left、right）决定（这里与relative完全一致）</li><li>如果父级设定position属性（无论是absolute还是relative），则以父级的左上角为原点进行定位，位置由偏移设置决定（这里与relative完全一致）</li><li>即使父级有padding属性，对其也不起作用，简单一点来说，它只坚持一点，就以父级左上角为原点进行定位，父级的padding对齐根本没有影响（这里是与relative的第三个不同点）</li></ul><p><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/1.png" alt></p><p>fixed</p><p>其实fixed和absolute是一样的，唯一的区别在于：absolute元素是根据最近的定位上下文确定位置，而fixed永远根据浏览器进行定位</p><ul><li>fixed元素与文档流无关，可重叠也不回影响其他元素布局，只一致根据浏览器左上角定位</li></ul><p>relative和absolute的区别</p><table><thead><tr><th>特征</th><th>relative</th><th>absolute</th></tr></thead><tbody><tr><td>在正常流中的位置</td><td>存在</td><td>不存在</td></tr><tr><td>无父元素但存在文本</td><td>以文字底部为原点并会断开文字</td><td>以最后一个文字右上角为原点并不断开文字</td></tr><tr><td>父元素的padding属性对元素位置有无影响</td><td>有影响</td><td>无影响</td></tr></tbody></table><p>z-index属性</p><ul><li>z-index，又称为对象的层叠顺序，它用一个整数来定义堆叠的层次，整数值越大，则被层叠在越上面，当然这是指同级元素间的堆叠，如果两个对象的此属性具有同样的值，那么将依据它们在HTML文档中流的顺序层叠，写在后面的将会覆盖前面的。</li><li>需要注意的是，父子关系是无法用z-index来设定上下关系 的，一定是子级在上父级在下。</li></ul><p>总的来说就是：</p><ul><li>1.先看元素的父子关系，子级在上父级在下；</li><li>2.再看元素的z-index定义的整数值大小，数值大在上，数值小在下；</li><li>3.如果是同一级元素并且z-index值相同，就看元素在html文档中流的顺序，先写的会被后写的覆盖。</li><li>注：使用static 定位或无position定位的元素z-index属性是无效的。</li></ul><h4 id="ES6用过吗，新增了那些东西，你用到过什么"><a href="#ES6用过吗，新增了那些东西，你用到过什么" class="headerlink" title="ES6用过吗，新增了那些东西，你用到过什么"></a>ES6用过吗，新增了那些东西，你用到过什么</h4><p><a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/ES6.md" target="_blank" rel="noopener">详解</a></p><h4 id="js的this理解，-如何改变this的指向"><a href="#js的this理解，-如何改变this的指向" class="headerlink" title="js的this理解， 如何改变this的指向"></a>js的this理解， 如何改变this的指向</h4><p><a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/%E6%94%B9%E5%8F%98this%E6%8C%87%E5%90%91.md" target="_blank" rel="noopener">详解</a></p><h4 id="JavaScript的事件机制-amp-amp-settimeout的机制-不懂，待理解"><a href="#JavaScript的事件机制-amp-amp-settimeout的机制-不懂，待理解" class="headerlink" title="JavaScript的事件机制&amp;&amp;settimeout的机制(不懂，待理解)"></a>JavaScript的事件机制&amp;&amp;settimeout的机制(不懂，待理解)</h4><p>JavaScript是一门单线程语言，异步操作都是放到事件循环队列里面，等待主执行栈来执行的，并没有专门的异步执行线程</p><p><a href="https://www.jianshu.com/p/3facc9bd87f3" target="_blank" rel="noopener">原文</a></p><ol><li>setTimeout运行机制</li></ol><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确答案：1 3 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//答：A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setTimeout 和 setInterval的运行机制是将指定的代码移出本次执行，等到下一轮 Event Loop 时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮 Event Loop 时重新判断。</li><li>这意味着，setTimeout指定的代码，必须等到本次执行的所有同步代码都执行完，才会执行。</li><li>优先关系：异步任务要挂起，先执行同步任务，同步任务执行完毕才会响应异步任务。</li></ul><ol start="2"><li>定时获取接口更新数据</li></ol><pre class="line-numbers language-JS"><code class="language-JS">for (var i = 0; i < 4; i++) {    setTimeout(function () {        console.log(i);    }, 1000);}//输出结果为，隔1s后一起输出：4 4 4 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么会出现这样的情况呢？答：因为有队列插入的时间，即使执行时间从1000改成0，还会是输出四个4，那么这个问题，该如何解决呢？</p></blockquote><ul><li>利用闭包实现setTimeout间歇调用 ES6</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行后，会每隔1秒输出一个值，分别是：0,1,2,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>利用JS中基本类型的参数传递是按值传递的特征实现 ES5</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">output</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行后，会每隔1S输出一个值，分别是：0,1,2,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基于promise的解决方案(不理解promise)</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成全部的异步操作</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">output</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//同步操作完成后，输出最后的i</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行后，会隔1s输出一个值，分别是：0 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用ES7中的async await特性的解决方案（推荐）</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> sleep <span class="token operator">=</span> <span class="token punctuation">(</span>timeountMS<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>timeountMS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//声明一个立即执行anyns</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遇到过兼容性的问题吗，要如何处理"><a href="#遇到过兼容性的问题吗，要如何处理" class="headerlink" title="遇到过兼容性的问题吗，要如何处理"></a>遇到过兼容性的问题吗，要如何处理</h4><p><a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98.md" target="_blank" rel="noopener">详解</a><br><a href="https://blog.csdn.net/xustart7720/article/details/73604651/" target="_blank" rel="noopener">原文</a></p><h4 id="平时如何学习前端的，最近在看的一本书"><a href="#平时如何学习前端的，最近在看的一本书" class="headerlink" title="平时如何学习前端的，最近在看的一本书"></a>平时如何学习前端的，最近在看的一本书</h4><p>待写</p><h4 id="内存泄露的排除定位和解决方法-待定"><a href="#内存泄露的排除定位和解决方法-待定" class="headerlink" title="内存泄露的排除定位和解决方法(待定)"></a>内存泄露的排除定位和解决方法(待定)</h4><p><a href="https://blog.csdn.net/DepressedPrince/article/details/88133707" target="_blank" rel="noopener">内存泄露</a></p><h4 id="js垃圾回收机制"><a href="#js垃圾回收机制" class="headerlink" title="js垃圾回收机制"></a>js垃圾回收机制</h4><p><a href="https://segmentfault.com/a/1190000018605776?utm_source=tag-newest" target="_blank" rel="noopener">详解1</a><br><a href="https://www.cnblogs.com/psxiao/p/11569548.html" target="_blank" rel="noopener">详解2</a></p><h4 id="websocket实现原理-其底层原理是什么？怎么说？待解释"><a href="#websocket实现原理-其底层原理是什么？怎么说？待解释" class="headerlink" title="websocket实现原理(其底层原理是什么？怎么说？待解释)"></a>websocket实现原理(其底层原理是什么？怎么说？待解释)</h4><p> // ▄█▀█●</p><p> 只需要发送一次请求，就可以源源不断的接收结果</p><p>WebSocket：WebSocket是一种在单个TCP连接上进行全双工通信的协议。WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</p><h4 id="缓存机制，协商协议"><a href="#缓存机制，协商协议" class="headerlink" title="缓存机制，协商协议"></a>缓存机制，协商协议</h4><p>什么是缓存？</p><ul><li>浏览器缓存是浏览器对之前请求过的文件进行缓存，以便下一次访问时重复使用，节省宽带，提高访问速度，降低服务器压力</li><li>HTTP缓存机制主要在HTTP响应头中设定，响应头中相关字段为Expires、Cache-Control、Last-Modified、Etag</li><li>Expires因为是对时间设定的，且时间是Greenwich Mean Time （GMT），而不是本地时间，所以对时间要求较高。</li></ul><p>浏览器缓存：</p><ul><li>浏览器第一次打开一个网页获取资源后，根据返回的header信息来告诉如何缓存资源</li></ul><p>浏览器第一次缓存</p><p><img src="https://images2015.cnblogs.com/blog/408483/201605/408483-20160525182843100-1556227104.png" alt></p><p>浏览器后续请求时</p><p><img src="https://images2015.cnblogs.com/blog/408483/201605/408483-20160525182943272-204994049.png" alt></p><ul><li><p>浏览器在请求某一资源时，会先获取该资源缓存的header信息，判断是否命中强缓存(cache-control和expire信息)，若命中直接从缓存中获取资源信息，包括缓存header信息，本次请求就不会与服务器进行通信</p></li><li><p>如果没有命中强缓存，浏览器会发送请求到服务器，请求会携带第一次返回的有关缓存的header字段信息(Last-Modifued/if-Modified-Since和Etag/if-none-match)，由服务器根据header信息来对比结果是否是协商缓存命中，</p></li><li><p>若命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是不返回资源内容，它会告知浏览器可以直接从缓存中获取；否则返回最新的资源内容</p><p>  缓存    |获取资源形式    |状态吗    |发送请求到服务器|<br>|—|—|—|—|<br>  强缓存    |从缓存取    |200（from cache）    |否，直接从缓存取|<br>  协商缓存    |从缓存取    |304（not modified）    |是，通过服务器告知浏览器缓存是否可用|</p></li></ul><p>为什么既有Last-Modified还有Etag(两者为什么并存，有什么好处)</p><ul><li><p>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p></li><li><p>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；</p></li><li><p>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</p></li><li><p>某些服务器不能精确的得到文件的最后修改时间。</p></li><li><p>这时，利用Etag能够更加准确的控制缓存，因为Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。</p></li><li><p>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p></li></ul><h4 id="js的继承的实现方法-理解的不是很全，需要进一步学习巩固"><a href="#js的继承的实现方法-理解的不是很全，需要进一步学习巩固" class="headerlink" title="js的继承的实现方法(理解的不是很全，需要进一步学习巩固)"></a>js的继承的实现方法(理解的不是很全，需要进一步学习巩固)</h4><ul><li>原型链继承</li><li>借用构造函数继承</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合继承</li><li>ES6中的继承</li></ul><p>ES6中的继承</p><ul><li>ES6中，新增了使用extend实现对class的继承，</li><li>但是在使用extend实现继承的时候，还有几点需要注意，子类在继承父类的时候，子类必须在constructor方法中调用super方法，否则新建实例时会报错，</li><li>这是因为子类渍二级的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性好方法，</li><li>然后再对其进行加工，加上子类自己的实例属性和方法，如果不调用super方法，子类就得不到this对象</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的，正确的继承之后，就可以创建实例了<br><a href="https://www.cnblogs.com/Yellow-ice/p/10473176.html" target="_blank" rel="noopener">详解</a></li></ul><h4 id="JS原型链"><a href="#JS原型链" class="headerlink" title="JS原型链"></a>JS原型链</h4><p>简单介绍：</p><ul><li><strong>proto</strong>称为内建原型对象，简称内建对象；prototype称为函数原型对象，简称函数原型</li></ul><p>规则：</p><ul><li>每个对象都有一个内建原型<strong>proto</strong>属性，包括prototype；内置对象Object.prototype的<strong>proto</strong>属性为null；但因为函数也是对象，所以每个函数也有一个内建原型<strong>proto</strong>属性</li><li>每个函数都有一个函数原型prototype属性</li><li>只有prototype所指的函数原型对象有constructor属性</li></ul><p>在js中，大部分东西都是对象，数组是对象，函数也是对象，对象更加是对象。不管我们给数组和函数定义什么内容，它们总有一些相同的方法和属性。比如说：hasOwnProperty(),toString()等<br>这说明一个对象所拥有的属性不仅仅是它本身拥有的属性，它还会从其他对象中继承一些属性。当JS在一个对象中找不到需要是属性时，它会到这个对象的父对象上去找，以此类推，就构成了对象的原型链</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name<span class="token punctuation">;</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am '</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">'obj2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  I am obj1</span>f2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  I am obj2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/3.jpg" alt></p><p><a href="https://www.jianshu.com/p/116ea3be6ef5" target="_blank" rel="noopener">详解</a></p><h4 id="在原型链上Object再往上是什么"><a href="#在原型链上Object再往上是什么" class="headerlink" title="在原型链上Object再往上是什么"></a>在原型链上Object再往上是什么</h4><p>obj.<strong>proto</strong>.<strong>proto</strong>……<strong>proto</strong> === null;</p><p>为什么原型链的终点是null,而不是Object.prototype?</p><p>那么如果当取它的原型时应该怎么办？Object.prototype.<strong>proto</strong>;应该返回什么</p><p>对于一个对象来说，它的属性有以下三种情况：</p><ul><li>如果属性存在，那么返回属性值</li><li>如果属性不存在，那么返回undefined</li><li>不管属性存在还是不存在，有可能抛出异常</li></ul><p>我们此时已经假设Object.prototype是终点了，所以此时不能是情况1，另外，抛出异常不是一个好的设计，所以不会是3，那么对于情况2，它不存在原型属性，返回undefined的话，也不是很友好，因为返回undefined，就说明原型是不存在的，这时候原型链上就会存在一个非对象的值<br>所以此时最佳的选择就是null，一方面，我们没法访问null的属性，所以起到了终止原型链的作用；另一方面，null在某种意义上来说，也是一种对象，即空对象，因为null一开始就是为了表示一个”空”的对象存在的，这样一来，就不会违反“原型链上只能有对象”的约定</p><p>所以，“原型链的终点是null”，虽然不是必须不可的，但是却是最合理的</p><p>Q：什么是原型链？</p><p>A：原型链是垃圾。</p><p>Q：在实践中应该如何运用原型链？</p><p>A：避免。</p><p>Q：精通原型链的前端好吗？</p><p>A：精通什么不好，去精通这种垃圾。说明对技术的优劣没有一点辨别和判断的能力。</p><p>补充：点到即可</p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><ol><li>额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.fahter</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid deeppink<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.big</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> darkorange<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.small</span></span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> darkmagenta<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.footer</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> darkslateblue<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.clear</span></span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fahter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>big<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>small<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>额外标签法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>父级添加overflow属性（父元素添加overflow:hidden）（不推荐）</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*通过触发BFC方式，实现清除浮动*/</span><span class="token selector"><span class="token class">.fahter</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid deeppink<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用after伪元素清除浮动（推荐使用）</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">   <span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.clearfix</span></span><span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fahter clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>big<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>small<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;div class="clear">额外标签法&lt;/div>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>visibility: hidden----将元素隐藏，但是在网页中该占的位置还是占着。display: none----将元素的显示设为无，即在网页中不占任何的位置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>使用before和after双伪元素清除浮动</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">:before</span></span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span></span><span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fahter clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>big<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>small<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常见布局的方法"><a href="#常见布局的方法" class="headerlink" title="常见布局的方法"></a>常见布局的方法</h4><ul><li>table表格布局(早期)</li><li>float浮动布局</li><li>flex布局(常用)</li><li>移动端的响应式布局</li><li>网格布局</li><li>绝对定位布局</li></ul><p><a href="https://blog.csdn.net/zhang6223284/article/details/81909600" target="_blank" rel="noopener">详解</a></p><h4 id="从输入一个url到浏览器页面展示都经历了哪些过程"><a href="#从输入一个url到浏览器页面展示都经历了哪些过程" class="headerlink" title="从输入一个url到浏览器页面展示都经历了哪些过程"></a>从输入一个url到浏览器页面展示都经历了哪些过程</h4><p>待编辑(已写完)</p><h4 id="new-一个对象的过程发生了什么"><a href="#new-一个对象的过程发生了什么" class="headerlink" title="new 一个对象的过程发生了什么"></a>new 一个对象的过程发生了什么</h4><p>JS的new操作到底干了些什么呢？我们一步一步来看。</p><p>比如我定义了一个function，并执行new操作：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>每一个函数中都会有一个叫prototype的属性，类型是object，即一个引用对象。<br>每一个对象中都会有一个叫<strong>proto</strong>的属性，类型也是object，也是一个引用对象。</p><ul><li>首先，当JavaScript引擎执行new操作时，会马上开辟一个块内存，创建一个空对象（并将this指向这个对象）。</li><li>接着，执行构造函数Foo()，对这个空对象进行构造（构造函数里有什么属性和方法都一一给这个空白对象装配上去，这就是为何它叫构造函数了）。</li><li>然而，给这个空对象添加了一个叫<strong>proto</strong>的属性，而且这个<strong>proto</strong>指向Foo()的prototype对象。换句话说，就是<strong>proto</strong> = prototype;</li></ul><p>再比如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age  <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">在<span class="token keyword">new</span>一个对象的时候 发生了什么？<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token keyword">this</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        __proto__<span class="token punctuation">:</span> Person<span class="token punctuation">.</span>prototype    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age  <span class="token operator">=</span> age    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系统会在内部创建一个this对象，将<strong>proto</strong>转到构造函数的prototype上面，最后再隐式的把this对象return出来，所以person就是一个this对象</p><h4 id="请简单说明什么是事件冒泡和事件捕获以及事件委托"><a href="#请简单说明什么是事件冒泡和事件捕获以及事件委托" class="headerlink" title="请简单说明什么是事件冒泡和事件捕获以及事件委托"></a>请简单说明什么是事件冒泡和事件捕获以及事件委托</h4><ol><li>事件冒泡和事件捕获</li></ol><p>事件冒泡会从当前触发的事件目标中，一级一级往上传递，依次触发，直到document为止<br>事件捕获会从document开始触发，一级一级往下传递，依次触发，直到真正事件目标为止<br>一言以蔽之，事件捕获是从外层元素到目标元素的过程，事件冒泡是从目标元素到外层元素的过程。如图：</p><p><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/2.jpg" alt></p><ol start="2"><li>事件委托</li></ol><p>为什么会有事件委托？事件使用过程中的一些性能和使用的问题：</p><ul><li>绑定事件越多，浏览器内存占用越大，严重影响性能</li><li>ajax的出现，局部刷新盛行，导致每次加载完之后，都要重新绑定事件</li><li>部分浏览器移除元素时，绑定的时间并没有被及时移除，导致内存泄露，严重影响性能</li><li>大部分ajax局部刷新，只是显示的数据，而操作却是大部分相同的，重复绑定，会导致代码的耦合性过大，严重影响后期的维护</li></ul><p>事件委托基础：</p><ul><li>事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown……）的函数委托到另一个元素；</li><li>对一个技术点的了解的更深，就能对这个技术运用的更好。</li><li>事件的冒泡，所以才可以在父元素来监听子元素触发的事件</li><li>DOM的遍历，一个父级元素包含的子元素过多，那么当一个事件被触发时，是否触发了某一种类型的元素呢</li><li>这是事件委托的两个基础，也是事件委托的核心，跟事件委托相关的技术点，都可以从这两点进行切入来寻求解决方案</li></ul><p><a href="https://juejin.im/entry/5896d04d61ff4b006b0e337a" target="_blank" rel="noopener">详解</a></p><h4 id="实现一个两边宽度固定中间自适应的三列-三栏-布局"><a href="#实现一个两边宽度固定中间自适应的三列-三栏-布局" class="headerlink" title="实现一个两边宽度固定中间自适应的三列(三栏)布局"></a>实现一个两边宽度固定中间自适应的三列(三栏)布局</h4><ol><li>流体布局</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>圣杯布局</p></li><li><p>双飞翼布局</p></li><li><p>Flex 布局</p></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span><span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span><span class="token property">order</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>table布局(最简单，但是不适用)<br><a href="https://zhuanlan.zhihu.com/p/25070186?refer=learncoding" target="_blank" rel="noopener">详解</a></li></ol><h4 id="es6有了解吗，请简单说一下promise机制，异步的承诺机制，顺势说一下解决回调地狱的问题"><a href="#es6有了解吗，请简单说一下promise机制，异步的承诺机制，顺势说一下解决回调地狱的问题" class="headerlink" title="es6有了解吗，请简单说一下promise机制，异步的承诺机制，顺势说一下解决回调地狱的问题"></a>es6有了解吗，请简单说一下promise机制，异步的承诺机制，顺势说一下解决回调地狱的问题</h4><p><a href="https://juejin.im/post/5b31a4b7f265da595725f322" target="_blank" rel="noopener">详解1</a></p><p>promise机制</p><ol><li>什么是promise以及promise出现的原因</li></ol><p>特点：<br>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（以失败）。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来。<br>一旦状态改变，就不会再变，任何时候都是可以得到这个结果的。Promise对象的状态改变只有两种可能：*从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就会凝固，不会再变了。再对Promise对象添加回调函数也会立即得到这个结果。有了Promise对象，就可以将异步操作以同步操作的流程表达出来。<br>缺点：<br>首先无法取消Promise，一旦新建他就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部跑出的错误无法反应到外部。当pending的时候，无法知道进展到了哪一步。</p><ol start="2"><li>回调地狱问题</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>在 Promise 出现以前，我们处理一个异步网络请求，大概是这样：<span class="token comment" spellcheck="true">// 请求 代表 一个异步网络调用。</span><span class="token comment" spellcheck="true">// 请求结果 代表网络请求的响应。</span><span class="token function">请求1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    处理请求结果<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>但是，需求变化了，我们需要根据第一个网络请求的结果，再去执行第二个网络请求，代码大概如下：<span class="token function">请求1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">请求2</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        处理请求结果<span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>看起来也不复杂；但是。。需求是永无止境的，于是乎出现了如下的代码：<span class="token function">请求1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">请求2</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">请求3</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">请求4</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">请求5</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">请求6</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>请求结果<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token operator">...</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>然后回调地狱就出现了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>promise是异步编程的一种解决方案，比传统的异步解决方案【回调函数】和【事件】更合理、更强大</li></ul><p>promise的常规写法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>请求<span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求2</span><span class="token punctuation">(</span>请求结果<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求3</span><span class="token punctuation">(</span>请求结果<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求4</span><span class="token punctuation">(</span>请求结果<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求5</span><span class="token punctuation">(</span>请求结果<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">处理异常</span><span class="token punctuation">(</span>异常信息<span class="token punctuation">)</span><span class="token punctuation">)</span>我们可以把 Promise 比作一个保姆，家里的一连串的事情，你只需要吩咐给他，他就能帮你做，你就可以去做其他事情了。比如，作为一家之主的我，某一天要出门办事，但是我还要买菜做饭送到老婆单位（请理解我在家里的地位。。）出门办的事情很重要，买菜做饭也重要。。但我自己只能做一件事。这时我就可以把买菜做饭的事情交给保姆，我会告诉她：<span class="token operator">-</span> 你先去超市买菜。<span class="token operator">-</span> 用超市买回来的菜做饭。<span class="token operator">-</span> 将做好的饭菜送到老婆单位。<span class="token operator">-</span> 送到单位后打电话告诉我。<span class="token comment" spellcheck="true">// 告诉保姆帮我做几件连贯的事情，先去超市买菜</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>买菜<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用买好的菜做饭</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>买好的菜<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>做饭<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把做好的饭送到老婆公司</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>做好的饭<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>送饭<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//送完饭后打电话通知我</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>送饭结果<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">电话通知我</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise 的写法更为直观，并且能够在外层捕获异步函数的异常信息。</p><p>ES6 出现了 generator 以及 async/await 语法，使异步处理更加接近同步代码写法，可读性更好，同时异常捕获和同步代码的书写趋于一致。上面的列子可以写成这样：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> 蔬菜 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">买菜</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> 饭菜 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">做饭</span><span class="token punctuation">(</span>蔬菜<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> 送饭结果 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">送饭</span><span class="token punctuation">(</span>饭菜<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> 通知结果 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">通知我</span><span class="token punctuation">(</span>送饭结果<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>是不是更清晰了有没有。需要记住的是，<span class="token keyword">async</span><span class="token operator">/</span><span class="token keyword">await</span>也是基于 Promise 实现的，所以，我们仍然有必要深入理解 Promise 的用法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="手写一下深拷贝"><a href="#手写一下深拷贝" class="headerlink" title="手写一下深拷贝"></a>手写一下深拷贝</h4><p>答案提示：JSON.parse(JSON.stringify(obj)) 用JSON实现深拷贝</p><h4 id="和-的却别，typeof-null的结果是什么"><a href="#和-的却别，typeof-null的结果是什么" class="headerlink" title="== 和 === 的却别，typeof null的结果是什么"></a>== 和 === 的却别，typeof null的结果是什么</h4><p>(1)  “==”叫做相等运算符，”===”叫做严格运算符。<br>(2) ==，equality -&gt; 等同  的意思， 两边值类型不同的时候，要先进行类型转换为同一类型后，再比较值是否相等。<br>===，identity -&gt; 恒等 的意思，不做类型转换，类型不同的结果一定不等。<br>(3) “==”表示只要值相等即可为真，而”===”则要求不仅值相等，而且也要求类型相同。</p><p>对于明确数据类型的用===更为可靠，JavaScript是一门弱类型语言，表达式运算赋值等操作都会导致类型转换。而一些隐式转换会带来一些意想不到的后果。</p><p>简单来说，==代表相同，===代表严格相同；可以这么理解，当进行双等号比较的时候，先检查两个操作数数据类型，如果相同，则进行===比较，如果不同，则愿意进行一次类型转换，转成成相同类型后再进行比较，而===比较时，如果类型不同，直接就是false<br>操作数1==操作数2，操作数1===操作数2</p><p>比较过程：<br>双等号==：</p><ul><li>如果两个值类型相同，再进行三个等号的比较</li><li>如果两个值类型不同，也有可能相等，需根据以下规则进行类型转换再比较<ul><li>如果是一个null，一个是undefined，那么相等(因为他们只是值相等，但类型不相等而已)</li><li>如果一个是字符串，一个是数值，把字符串转换成数值之后再进行比较</li></ul></li></ul><p>三等号===：</p><ul><li>如果类型不同，就一定不相等</li><li>如果两个都是数值，并且是同一个值，那么值相等；如果其中一个至少是NaN,那么不相等(判断一个值是否是NaN,只能使用isNaN()来判断)</li><li>如果两个都是字符串，每个位置的字符都一样，那么相等，否则不相等</li><li>如果两个值都是true，或者false，那么相等</li><li>如果两个值都引用同一个对象或者是函数，那么相等，否则不相等</li><li>如果两个值都为null，或者是undefined，那么相等</li></ul><p>typeof null的结果是什么</p><ul><li>答：object</li></ul><pre class="line-numbers language-js"><code class="language-js">解题思路：<span class="token keyword">null</span>在JavaScript中，表示什么都没有，<span class="token keyword">null</span>是一个只有一个值的特殊类型，表示一个空对象的引用，然后用<span class="token keyword">typeof</span>检查<span class="token keyword">null</span>，返回的是objectundefined在JavaScript中，表示是一个没有设置值的变量，<span class="token keyword">typeof</span>一个没有值的变量，会返回undefinedundefined和<span class="token keyword">null</span>的区别：<span class="token keyword">null</span>和undefined值相等，但是其类型不相等<span class="token number">1</span><span class="token punctuation">.</span> 定义：<span class="token number">1</span><span class="token punctuation">)</span>undefined是所有没有赋值变量的默认值，自动赋值 <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">null</span>主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址<span class="token number">2</span><span class="token punctuation">.</span> 何时使用<span class="token keyword">null</span>：当使用完一个比较大的独享时，需要对其进行释放内存时，设置为<span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="同步和异步的执行顺序"><a href="#同步和异步的执行顺序" class="headerlink" title="同步和异步的执行顺序"></a>同步和异步的执行顺序</h4><p>同步代码执行顺序优先高于异步代码执行顺序优先级<br>new promise(fn)中的fn是同步执行的<br>process.nextTick()&gt;promise.then()&gt;setTimeout()&gt;setImmediate</p><h4 id="get和post请求的区别"><a href="#get和post请求的区别" class="headerlink" title="get和post请求的区别"></a>get和post请求的区别</h4><ul><li>get一般是用于获取、查询资源信息</li><li>post一般是用于更新资源信息</li><li>get在浏览器回退的时候是无害的，而post会再次提交请求</li><li>get产生的URL地址可以被bookmark，而post不会</li><li>get请求会被浏览器主动cache，而post不会，除非手动设置</li><li>get请求只能进行URL编码，而post支持多种编码方式</li><li>get请求参数会被完整保留在浏览器历史记录里，而post中的参数不会被保留</li><li>get请求在URL中传送的参数长度是有限制的(2k)，而post没有</li><li>get请求的参数类型只接受ASCLL，而post没有限制</li><li>get比post更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息</li><li>get参数通过URL传递，post放在request body中</li><li>get请求会产生一个TCP数据包，而post会产生两个TCP数据包</li><li>get请求，浏览器会把http header和data一并发送出去，服务器响应200(返回数据)；而对于post来说，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 OK(返回数据)</li></ul><h4 id="一个有序的数组如何进行查找操作"><a href="#一个有序的数组如何进行查找操作" class="headerlink" title="一个有序的数组如何进行查找操作"></a>一个有序的数组如何进行查找操作</h4><ul><li>for or while循环</li><li>js中arr.find((n)=&gt;n&lt;0)、arr.findIndex((n)=&gt; n&lt;0)、[1,2,3].includes(2)</li><li>二分查找</li><li>等等。。。</li></ul><h4 id="定宽定高，如何垂直居中，那不定宽定高呢？"><a href="#定宽定高，如何垂直居中，那不定宽定高呢？" class="headerlink" title="定宽定高，如何垂直居中，那不定宽定高呢？"></a>定宽定高，如何垂直居中，那不定宽定高呢？</h4><p>position 元素已知宽度 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.father</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF8C00</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">600</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> rosybrown<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> -<span class="token number">150</span>px <span class="token number">0</span> <span class="token number">0</span> -<span class="token number">150</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               hello word!!!           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>position 元素未知宽度</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.father</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF8C00</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F00</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**.father{background-color: #FF8C00;height: 500px;width: 500px;position: relative;}        .child{background-color: #F00; width: 200px;height: 200px;position:absolute;left:0;top: 0;bottom: 0;right: 0;margin: auto;}        */</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           hello word!!!        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flex可以不知道宽</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.father</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF8C00</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*flex布局*/</span><span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*使子项目水平居中*/</span><span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*使子项目垂直居中*/</span><span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F00</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               hello word!!!           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTTPS的请求过程"><a href="#HTTPS的请求过程" class="headerlink" title="HTTPS的请求过程"></a>HTTPS的请求过程</h4><p>如图所示：</p><p><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/4.jpg" alt></p><p>其整个过程可以分为以下几步：</p><ul><li><ol><li>浏览器发起往服务器的443端口发起请求，请求携带了浏览器支持的加密算法和哈希算法</li></ol></li><li><ol start="2"><li>服务器收到请求后，选择浏览器支持的加密算法和哈希算法</li></ol></li><li><ol start="3"><li>服务器下降数字证书返回给浏览器，这里的数字证书可以是向某个可靠机构申请的，也可以是自制的</li></ol></li><li>(注释：证书包括以下内容：证书序列号；证书过期时间；站点组织名；站点DNS主机名；站点公钥；证书颁发者名；证书签名)</li><li><ol start="4"><li>浏览器进入数字证书认证环节，这部分是浏览器内置的TSL完成的</li></ol><ul><li><ol><li>首先浏览器会从内置的证书列表中索引，找到服务器下发证书对应的机构，如果没有找到，此时就会提示用户该证书是不是由权威机构颁发的，是不可信任的。如果查到了对应的机构，则取出该机构颁发的公钥</li></ol></li><li><ol start="2"><li>用机构的证书公钥解密得到证书的内容和证书签名，内容包括网站的网址、网站的公钥、证书的有效期等。浏览器会先验证证书签名的合法性（验证过程类似上面 Bob 和 Susan 的通信）。签名通过后，浏览器验证证书记录的网址是否和当前网址是一致的，不一致会提示用户。如果网址一致会检查证书有效期，证书过期了也会提示用户。这些都通过认证时，浏览器就可以安全使用证书中的网站公钥了。</li></ol></li><li><ol start="3"><li>浏览器生成一个随机数R，并使用网站公钥对R进行加密</li></ol></li></ul></li><li><ol start="5"><li>浏览器将加密的R传输给服务器</li></ol></li><li><ol start="6"><li>服务器用自己的私钥解密得到R</li></ol></li><li><ol start="7"><li>服务器以R为密钥使用了堆成加密算法加密网页内容并传输给浏览器</li></ol></li><li><ol start="8"><li>浏览器以R为密钥使用之前约定好的解密算法获取网页内容</li></ol></li></ul><h4 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h4><p>JS实现递归</p><ol><li>一般的递归实现n! </li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fact</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但是这样就会保持有10条记录，这样很容易造成栈溢出；可以这样理解，执行一个函数A，添加一个记录A，在函数A中调用函数B，添加一个记录B，等函数B执行完了之后，移除B，把控制器交给A。因为递归就是函数里面调用函数，所以会有10条记录</li></ul><ol start="2"><li>尾递归</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fact_iter</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fact_iter</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>product<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> product<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fact_iter</span><span class="token punctuation">(</span>num<span class="token number">-1</span><span class="token punctuation">,</span>num<span class="token operator">*</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这样就只保存了一条记录，不会造成栈溢出，而这个为什么只有一条记录呢？</li><li>这是因为函数fact_iter返回的是它本身，返回本身之后，就不再需要控制器了(就是没它什么事了，它把任务交给了下家了)，所以不会进栈，就不会有这条记录了</li></ul><h4 id="电脑里有很多大小不一样的照片，我现在要复制到U盘上，但是U盘容量固定，让你写一个程序，挑选一组照片，让U盘的剩余空间最小。"><a href="#电脑里有很多大小不一样的照片，我现在要复制到U盘上，但是U盘容量固定，让你写一个程序，挑选一组照片，让U盘的剩余空间最小。" class="headerlink" title="电脑里有很多大小不一样的照片，我现在要复制到U盘上，但是U盘容量固定，让你写一个程序，挑选一组照片，让U盘的剩余空间最小。"></a>电脑里有很多大小不一样的照片，我现在要复制到U盘上，但是U盘容量固定，让你写一个程序，挑选一组照片，让U盘的剩余空间最小。</h4><h4 id="后端会哪些语言"><a href="#后端会哪些语言" class="headerlink" title="后端会哪些语言"></a>后端会哪些语言</h4><p>Node、Python、Java、php等</p><h4 id="讲一下如何负载均衡"><a href="#讲一下如何负载均衡" class="headerlink" title="讲一下如何负载均衡"></a>讲一下如何负载均衡</h4><h4 id="Cookie和Session的区别和联系"><a href="#Cookie和Session的区别和联系" class="headerlink" title="Cookie和Session的区别和联系"></a>Cookie和Session的区别和联系</h4><p>其中，cookie和session出现的原因：由于http协议是无状态的，服务器无法确定这次请求和上次请求是否来自同一个客户端。<br>利用session和cookie可以让服务器知道不同的请求是否来自同一个客户端</p><ol><li>cookie定义</li></ol><ul><li>cookie是服务器在本地机器上存储的一小段文本并随每一个请求发送至同一服务器。cookie保存在客户端，主要内容包括：名字值，过期时间，路径等等</li></ul><ol start="2"><li>会话cookie和持久cookie区别</li></ol><ul><li>会话cookie：不设置过期时间，只要关闭浏览器窗口，cookie就消失了，会话cookie不保存在硬盘上，保存在内存里</li><li>持久cookie：设置过期时间，浏览器就会把cookie保存到硬盘上，关闭之后再次打开浏览器，这些cookie依然有效，直到超过设定的过期时间，存储在硬盘上的cookie可以在不同浏览器进程间共享。而对于保存在内存的cookie，不同的浏览器有不同的处理方式</li></ul><p>利用持久cookie自动登录：当用户在某个网站注册后，就会收到一个唯一用户ID的cookie，客户后来重新连接时，这个用户ID会自动返回，服务器对它进行检查，确定它是否为注册用户且选择了自动登录，从而使用户无需给出明确的用户名和密码，就可以访问浏览器上的资源</p><ol start="3"><li>session定义</li></ol><ul><li>session是在服务器端保存用户数据，浏览器第一次发送请求时，服务器自动生成了session ID来唯一标识这个并将其通过响应发送到浏览器，浏览器第二次发送请求会将前一次服务器响应中的session ID放在请求中并发送到服务器上，服务器从请求中提取出session ID，并和保存的所有session  ID进行对比，找到这个用户信息，一般这个session ID会有时间限制，默认是30分钟后销毁掉这次的session ID</li><li>Session和Cookie有一定关系，Session id存在Cookie中，每次访问的时候将Session id传到服务器进行对比。</li></ul><ol start="4"><li>Cookie和Session的区别</li></ol><ul><li>Cookie 在客户端（浏览器、易伪造、不安全），Session 在服务器端（会消耗服务器资源）。</li><li>Cookie 只能保存ASCII字符串，如果是Unicode字符或者二进制数据需要先进行编码。Cookie中也不能直接存取Java对象。</li><li>Session能够存取很多类型的数据，包括String、Integer、List、Map等，Session中也可以保存Java对象。</li></ul><h4 id="nodejs是单线程还是多线程的，为什么能去开很多异步请求去访问其他接口"><a href="#nodejs是单线程还是多线程的，为什么能去开很多异步请求去访问其他接口" class="headerlink" title="nodejs是单线程还是多线程的，为什么能去开很多异步请求去访问其他接口"></a>nodejs是单线程还是多线程的，为什么能去开很多异步请求去访问其他接口</h4><p>Node可以在不新增额外线程的情况下，依然可以对任务进行并发处理 —— Node.js是单线程的。但是它可以通过事件循环（event loop）来实现并发操作、</p><p>单线程解决高并发的思路就是采用非阻塞，异步编程的思想，简单概括就是，当遇到非常耗时的I/O操作时，采用非阻塞的方式，继续执行后面的代码，并且进入事件循环，当I/O操作完成时，程序会被通知I/O操作已完成，主要运行JavaScript的回调函数来实现<br>多线程虽然也能解决高并发，但是是以建立多个线程来实现，其缺点就是当遇到耗时的I/O操作时，当前线程会被阻塞，并且把CPU的控制权交给其他线程，这样代理的问题就是要非常频繁的进行线程的上下文切换</p><h4 id="event-loop讲讲"><a href="#event-loop讲讲" class="headerlink" title="event loop讲讲"></a>event loop讲讲</h4><p><a href="https://segmentfault.com/a/1190000016278115?utm_source=tag-newest" target="_blank" rel="noopener">详解</a></p><h4 id="一般你是如何操作数据库的？会哪些数据库"><a href="#一般你是如何操作数据库的？会哪些数据库" class="headerlink" title="一般你是如何操作数据库的？会哪些数据库"></a>一般你是如何操作数据库的？会哪些数据库</h4><h4 id="mysql的底层引擎，发布"><a href="#mysql的底层引擎，发布" class="headerlink" title="mysql的底层引擎，发布"></a>mysql的底层引擎，发布</h4><h4 id="mysql语言写的如何，怎么样判断sql语句的性能？如何优化？"><a href="#mysql语言写的如何，怎么样判断sql语句的性能？如何优化？" class="headerlink" title="mysql语言写的如何，怎么样判断sql语句的性能？如何优化？"></a>mysql语言写的如何，怎么样判断sql语句的性能？如何优化？</h4><h4 id="遍历数组处理用for循环还有什么方法吗"><a href="#遍历数组处理用for循环还有什么方法吗" class="headerlink" title="遍历数组处理用for循环还有什么方法吗"></a>遍历数组处理用for循环还有什么方法吗</h4><p><a href="https://www.cnblogs.com/woshidouzia/p/9304603.html" target="_blank" rel="noopener">原文</a></p><ul><li>foreach<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1 没有返回值</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//执行代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//参数：value数组中的当前项, index当前项的索引, array原始数组；</span><span class="token comment" spellcheck="true">//数组中有几项，那么传递进去的匿名回调函数就需要执行几次；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>map循环<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//map的回调函数中支持return返回值；return的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；</span><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> res <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>ary <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> item<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-->[120,230,240,420,10];  原数组拷贝了一份，并进行了修改</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-->[12,23,24,42,1]；  原数组并未发生变化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>forof遍历<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//可以正确响应break、continue和return语句</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> myArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>filter遍历<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不会改变原始数组,返回新数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//转为ES5的使用</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">></span><span class="token number">80</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//得到新数组 [84, 100]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>every遍历<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//every()是对数组中的每一项运行给定函数，如果该函数对每一项返回true,则返回true。</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array <span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>reduce()<pre class="line-numbers language-js"><code class="language-js"><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>reduceRight<pre class="line-numbers language-js"><code class="language-js"><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">方法的功能和reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">功能是一样的，不同的是reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>从数组的末尾向前将数组中的数组项做累加。<span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>首次调用回调函数callbackfn时，prevValue 和 curValue 可以是两个值之一。如果调用 <span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 时提供了 initialValue 参数，则 prevValue 等于 initialValue，curValue 等于数组中的最后一个值。如果没有提供 initialValue 参数，则 prevValue 等于数组最后一个值， curValue 等于数组中倒数第二个值。<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>preValue<span class="token punctuation">,</span>curValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> preValue <span class="token operator">+</span> curValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>find<pre class="line-numbers language-js"><code class="language-js"><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回数组中符合测试函数条件的第一个元素。否则返回undefined <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'王小毛'</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">getStu</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> element<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'李四'</span><span class="token punctuation">}</span>stu<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>getStu<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回结果为</span><span class="token comment" spellcheck="true">//{name: "李四", gender: "男", age: 20}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>ES6写法<br>stu.find((element) =&gt; (element.name == ‘李四’))</p><pre><code>- findIndex对于数组中的每个元素，findIndex 方法都会调用一次回调函数（采用升序索引顺序），直到有元素返回 true。只要有一个元素返回 true，findIndex 立即返回该返回 true 的元素的索引值。如果数组中没有任何元素返回 true，则 findIndex 返回 -1。findIndex 不会改变数组对象。```js[1,2,3].findIndex(function(x) { x == 2; });// Returns an index value of 1.[1,2,3].findIndex(x =&gt; x == 4);// Returns an index value of -1.</code></pre><ul><li>keys，values，entries<br>ES6 提供三个新的方法 —— entries()，keys()和values() —— 用于遍历数组。<br>它们都返回一个遍历器对象，可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 'a'</span><span class="token comment" spellcheck="true">// 'b'</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0 "a"</span><span class="token comment" spellcheck="true">// 1 "b"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="浏览器出于安全考虑有？"><a href="#浏览器出于安全考虑有？" class="headerlink" title="浏览器出于安全考虑有？"></a>浏览器出于安全考虑有？</h4><ul><li>同源策略</li><li>沙盒框架(Sandboxed frame)<ul><li>是对常规<iframe>表现行为的扩展，它能让顶级页面对其嵌入的子页面及这些子页面的子资源设置一些额外的限制</iframe></li><li>通过<iframe>的参数实现限制</iframe></li><li>Allow-scripts ：是否允许执行javascript脚本，没有则不允许</li><li>Allow-forms ： 是否允许使用form表单，没有则不允许</li><li>Allow-top-navigation : 是否允许嵌入子页面控制顶级窗口的地址跳转，没有则不允许</li><li>Allow-same-origin : 是否允许访问同源数据，没有则不允许</li></ul></li><li>Flash安全沙箱<ul><li>分为本地沙箱与远程沙箱</li><li>类似同源策略，在同一域内的资源会被放到一个安全组下，称为安全沙箱</li><li>Web站点通过crossdomain.xml文件配置可以提供允许的跨域访问本域上内容的权限(放置于站点根目录)</li></ul></li><li>Cookie的安全策略<ul><li>Domain 用于指定Cookie的有效域</li><li>Path 用于指定Cookie的有效URL路径</li><li>Secure 如果设置该属性，仅在HTTPS请求中提交Cookie</li><li>Http 其实是HttpOnly, 如果设置该属性，客户端javascript无法获取Cookie的值</li></ul></li><li>CSRF 的防御<ul><li>验证码</li><li>Referer Check</li></ul></li></ul><h4 id="会话与-Cookie：用户登录的原理是什么"><a href="#会话与-Cookie：用户登录的原理是什么" class="headerlink" title="会话与 Cookie：用户登录的原理是什么?"></a>会话与 Cookie：用户登录的原理是什么?</h4><p>首先，对于我们经常使用的网站，需要登录后才可进行进一步的操作</p><p>用户登录的原理是什么？</p><ul><li>每次在网站登录页面中输入用户名和密码时，这些信息都会发送到服务器中，服务器随后会将输入的密码与服务器中的密码进行验证，如果两者不匹配，则会得到一个错误的密码提示，如果两者匹配，则登录成功</li></ul><p>登录时发生了什么？</p><ul><li>登录后，web服务器会初始化一个会话session并在你浏览器中设置一些cookie变量，该cookie变量用于作为新建会话的一个引用</li></ul><p>单点登录</p><ol><li>什么是单点登录</li></ol><ul><li>单点登录，是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录</li></ul><h4 id="发送请求有哪些？"><a href="#发送请求有哪些？" class="headerlink" title="发送请求有哪些？"></a>发送请求有哪些？</h4><p>HTTP的发送请求：GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE<br>前台向后端发送请求的几种方式：link、script、img、ajax、表单提交、a标签的href发送请求、iframe的src属性发起请求</p><h4 id="web开发常见的几大安全问题"><a href="#web开发常见的几大安全问题" class="headerlink" title="web开发常见的几大安全问题"></a>web开发常见的几大安全问题</h4><p><a href="https://www.cnblogs.com/pretty-sunshine/p/11442326.html" target="_blank" rel="noopener">详解</a></p><p>SQL注入</p><ul><li>SQL注入是一种常见的Web安全漏洞，攻击者利用这个漏洞，或者利用潜在的数据库漏洞进行攻击。SQL注入，就是通过把SQL命令插入到web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器之子那个恶意的SQL命令，具体来说，它是利用现有的程序，将恶意的SQL命令，注入到后台数据库引擎执行的能力，它可以通过在web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是安装设计者意图去执行SQL语句</li></ul><p>XSS (Cross-Site Scripting)，跨站脚本攻击，因为缩写和 CSS重叠，所以只能叫 XSS。跨站脚本攻击是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击。</p><p>跨站脚本攻击有可能造成以下影响:</p><ul><li>利用虚假输入表单骗取用户个人信息。</li><li>利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li><li>显示伪造的文章或图片。</li></ul><p>CSRF(Cross Site Request Forgery)，即跨站请求伪造，是一种常见的Web攻击，它利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。</p><p>URL跳转漏洞<br>定义：借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。<br><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/6.jpg" alt></p><ul><li>黑客利用URL跳转漏洞来诱导安全意识低的用户点击，导致用户信息泄露或者资金的流失。其原理是黑客构建恶意链接(链接需要进行伪装,尽可能迷惑),发在QQ群或者是浏览量多的贴吧/论坛中。</li><li>安全意识低的用户点击后,经过服务器或者浏览器解析后，跳到恶意的网站中。</li><li>恶意链接需要进行伪装,经常的做法是熟悉的链接后面加上一个恶意的网址，这样才迷惑用户。<br><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/5.jpg" alt><br>诸如伪装成像如下的网址，你是否能够识别出来是恶意网址呢？</li></ul><pre><code>http://gate.baidu.com/index?act=go&amp;url=http://t.cn/RVTatrdhttp://qt.qq.com/safecheck.html?flag=1&amp;url=http://t.cn/RVTatrdhttp://tieba.baidu.com/f/user/passport?jumpUrl=http://t.cn/RVTatrd</code></pre><h4 id="利用js计算网页渲染执行需要花费的时间-浏览器运行时间"><a href="#利用js计算网页渲染执行需要花费的时间-浏览器运行时间" class="headerlink" title="利用js计算网页渲染执行需要花费的时间(浏览器运行时间)"></a>利用js计算网页渲染执行需要花费的时间(浏览器运行时间)</h4><p>在实际应用中可能需要计算一个页面渲染所要花费的时间，下面就通过代码实例介绍一下如何利用javascript实现此功能。<br>首先在网页的顶部放入一段代码用标记网页开始渲染的时间点，代码如下:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽量防止在页面的顶端，这样就更为精确，上面获取页面开始渲染的时间戳。<br>然后在页面中再加入一个类似的代码，能够获取页面渲染完毕的时间点，然后计算两者之间的时间差即可。<br>代码如下:</p><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> time<span class="token operator">=</span><span class="token string">"加载本页耗时 "</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" 毫秒"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方法：</p><ul><li>console.time(“A”)</li><li>运行代码段</li><li>console.timeEnd(“A”);<h4 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h4></li></ul><p>内容复杂，先不做了解</p><p><a href="https://www.jianshu.com/p/54cc04190252" target="_blank" rel="noopener">详解</a></p><h4 id="JS变量提升原理"><a href="#JS变量提升原理" class="headerlink" title="JS变量提升原理"></a>JS变量提升原理</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//变量提升  js的预处理</span>JS引擎在代码执行之前会做一个预处理的工作：<span class="token number">1</span><span class="token punctuation">.</span>收集变量<span class="token number">2</span><span class="token punctuation">.</span>收集函数依据： <span class="token operator">-</span> <span class="token keyword">var</span> 将<span class="token keyword">var</span>后边的变量定义但是不赋值，<span class="token keyword">var</span> username <span class="token operator">=</span> undefined；<span class="token operator">-</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 提前定义该函数console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结果为undefined</span><span class="token keyword">var</span> username <span class="token operator">=</span><span class="token string">'kobe'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//kobe</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//函数会正常执行</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fun()'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript中存在变量提升的问题，在ES6中引入的新关键词let可以解决这个问题</p><p>为什么会有变量提升？</p><ul><li>变量提升的根本原因是变量声明与赋值的分离，举例如下：var a = 2;这个代码是分两步执行的</li><li>首先是var a这一部分的变量声明，这个过程是在代码编译时进行的，然后是a=2;这一部分的变量赋值，这个过程在代码执行时进行的</li></ul><p>代码先编译一遍然后再执行，这样下面的变量提升的代码就容易解释了</p><pre class="line-numbers language-js"><code class="language-js">consol<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码编译过程中，a与b都进行了声明，代码执行的过程中先打印了a，因为a只是声明了还未赋值，所以其结果是undefined。后打印b，因为b的赋值在打印的前面，所以结果是3</p><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><p>JavaScript是一门具有自动垃圾收集机制的编程语言，开发人员不必关心内存分配的回收问题，这种垃圾回收机制的原理就是：<br><strong>找出那些不再继续使用的变量，然后释放其占用的资源</strong></p><p>垃圾回收器必须追踪到哪个变量有用，哪个变量没用，对于不再有用的变量打上标记，用来以后收回其占有的内存，具体到浏览器中，通常有两个策略</p><ul><li>标记清除<ul><li>javascript中最常用的垃圾收集方式就是标记清除。当变量进入环境时，会标记为”进入环境”，而当变量离开环境时，会标记为”离开环境”。垃圾收集器运行时会给所有存储在内存中的变量都加上标记，然后它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而再次之后在被标记的变量就是被视为准备删除的变量，因为环境中的变量已经无法访问到这些变量了。</li></ul></li><li>引用计数<ul><li>引用计数的含义是跟踪每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数为1.如果同一个只又被赋给另一个变量，则该值的引用次数加1。当这个值的引用次数为0时，则说明没有办法再访问这个值了，就可以将空间回收。这种垃圾收集策略不常见，因为目前javascript引擎不能再使用这种算法；但是在IE中访问原声Javascript对象时，这种算法可能会出现问题。</li></ul></li></ul><p>解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效的回收内存，应及时解除不再使用的全局对象、全集对象属性以及循环引用变量的引用。</p><h4 id="数组常用的方法有哪些"><a href="#数组常用的方法有哪些" class="headerlink" title="数组常用的方法有哪些"></a>数组常用的方法有哪些</h4><p>详见数组常用的一些方法目录</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>1.给你一个无序数字数组，里面是随机的书，并给出一个目标值，求这个数组的两个数，这个数的和等于目标值，要求这两个数并给出下标<br>你能想到最优的办法是什么吗（提示：快排，双指针）<br>其他解法：暴力for循环，使用ES6 map函数</p><p>2.给一个无序的数组，让我分割成m组，这个m组里和最大的一组是所有可能的分割情况最小的（二分答案法）</p><h4 id="webpack原理"><a href="#webpack原理" class="headerlink" title="webpack原理"></a>webpack原理</h4><p><a href="https://www.cnblogs.com/chengxs/p/11022842.html" target="_blank" rel="noopener">原文</a><br>一、前言</p><p>现在随着前端开发的复杂度和规模越来越大，鹰不能抛开工程化来独立开发，比如：react的jsx代码必须编译后才能在浏览器中使用，比如sass和less代码浏览器是不支持的。如果摒弃这些开发框架，开发效率会大幅下降。<br>在众多前端工程化工具中，webpack脱颖而出成为了当今最流行的前端构建工具。</p><p>二、webpack的原理</p><ol><li>核心概念</li></ol><ul><li>entry:一个可执行模块或者库的入口</li><li>chunk:多个文件组成一个代码块，可以将可执行的模块和他所依赖的模块组合成一个chunk,这是打包</li><li>loader:文件转换器，例如把ES6转为ES5，sass转为css等</li><li>plugin:扩展webpack功能插件。在webpack构建的生命周期节点上加入扩展hook，添加功能</li></ul><ol start="2"><li>webpack构建流程</li></ol><p>从启动构建到输出结果的一系列过程：</p><ul><li>初始化参数：解析webpack配置参数，合并shell传入webpack.config.js文件配置的参数，形成最后的配置结果</li><li>开始编译：上一步得到的参数初始化compile对象，注册所有的配置的插件，插件监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的run方法开始执行编译</li><li>确定入口：从配置的entry入口，开始解析文件构建AST语法树，找出依赖，递归下去</li><li>编译模块：递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤知道所有入口依赖的文件都经过了本步骤的处理</li><li>完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据entry配置生成代码块chunk</li><li>输出完成：输出所有的chunk到文件系统</li></ul><h4 id="proto-和prototype分别是什么"><a href="#proto-和prototype分别是什么" class="headerlink" title="proto 和prototype分别是什么"></a>proto 和prototype分别是什么</h4><p><a href="https://segmentfault.com/a/1190000013945101" target="_blank" rel="noopener">原文</a></p><ol><li>javascript 之 prototype与<strong>proto</strong></li></ol><p>首先什么是<strong>proto</strong>与prototype？</p><p><strong>prototype(显式原型)</strong></p><p>在每一个函数(请注意是函数)创建之后，都会有一个叫prototype的属性，这个属性指向的是函数的原型对象</p><p><strong>——proto——(隐式原型)</strong></p><p>JavaScript中任意对象都具有一个内置属性，在ES5之前并没有标准的方法访问这个属性，但是在绝大多数浏览器中都支持通过<strong>proto</strong>来访问这个属性，我们叫他隐式属性</p><ol start="2"><li>prototype和<strong>proto</strong>之间的联系</li></ol><p>首先有以下例子：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由上面可以看出函数foo的隐式原型指向其构造函数的显式原型</p><p>通过以上，可以得出以下结论么？？<br>某对象(万物皆对象).<strong>proto</strong> === 其构造函数.prototype 么？<br>答案当然不是。。举例如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'zarr'</span><span class="token punctuation">}</span><span class="token keyword">let</span> sonObj<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sonObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//=>zarr</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sonObj<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//=>false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sonObj<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//=>true</span>再有以下例子：<span class="token keyword">var</span> Obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//=>true</span><span class="token keyword">var</span> Func <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token string">'ds'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> func <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Func<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Func<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//=>false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Func<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//=>true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//=>undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上不是讲对象的隐式原型等于构造函数的原型？为什么这个时候又等于构造函数了？<br>这就要分析下Object.create的实现方式了，其源码解析如下：</p><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span>create <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    f<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>而对于<span class="token keyword">var</span> func <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Func<span class="token punctuation">)</span><span class="token punctuation">;</span>来说，Func <span class="token operator">=</span> f<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token keyword">return</span>出来的f<span class="token punctuation">.</span>prototype <span class="token operator">=</span> func<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>但是由于函数f在调用Object<span class="token punctuation">.</span>create方法之后就被销毁了，故f<span class="token punctuation">.</span>prototype也不存在了  然后就推理来说，就只能存在Func <span class="token operator">=</span> func<span class="token punctuation">.</span>__proto__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>对象有属性<strong>proto</strong>,指向该对象的构造函数的原型对象</li><li>方法除了有属性<strong>proto</strong>，还有属性prototype，prototype指向该方法的原型对象</li></ul><p>####　new和Object.create的区别</p><p>两者都能创建对象，区别：<br>见上部分讲解<br><a href="https://www.jianshu.com/p/165cb07b9de0" target="_blank" rel="noopener">详解</a></p><h4 id="哪种情况下proto和prototype的指向是同一个？"><a href="#哪种情况下proto和prototype的指向是同一个？" class="headerlink" title="哪种情况下proto和prototype的指向是同一个？"></a>哪种情况下proto和prototype的指向是同一个？</h4><p>一个实例对象的<strong>proto</strong>属性指向自身构造函数的原型链，即：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => true;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="typeof-array-null-undefined-NaN分别是什么"><a href="#typeof-array-null-undefined-NaN分别是什么" class="headerlink" title="typeof array null undefined NaN分别是什么"></a>typeof array null undefined NaN分别是什么</h4><ol><li>typeof</li></ol><p>JSON.parse(jsonstr); //可以将json字符串转换成json对象<br>JSON.stringify(jsonObj);//可以将json对象转换成json字符串</p><p>可以判断数据类型，有undefined、number、string、boolean、object、function</p><ol start="2"><li>null undefined NaN分别是什么</li></ol><p><a href="https://www.jianshu.com/p/e2386d64d07b" target="_blank" rel="noopener">原文</a></p><p><strong>undefined</strong></p><ul><li>var b;console.log(“b的数据类型为：”+typeof(b))</li><li>输出结果为 undefined</li><li>所以undefined的意思就是未被赋值，声明了一个变量却没有被赋值时会返回undefined</li></ul><p><strong>NaN</strong></p><ul><li>var c =NaN;console.log(“c的数据类型为：”+typeof(c));</li><li>c的数据类型为number</li></ul><p>但是NaN为什么会是number呢？有以下介绍：</p><ul><li>NaN是一个全局对象的属性</li><li>NaN属性的初始值就是NaN，和Number.NaN的值一样，在ES5中，NaN属性是不可配置的，不可写的属性，但是在ES3中，这个属性的值是可以被更改的，但是也应该避免覆盖</li><li>在编码中很少使用到NaN，通常都是在计算失败的时候，作为Math的某个方法的返回值出现的(例如：Math.sqrt(-1))或者尝试将一个字符串解析成数字但失败了的时候(parseInt(“blala”))</li></ul><p>可以看出对-1开平方会返回NaN，<br>再有以下例子：NaN == NaN;//false<br>NaN不等于任何值，连它本身也不等于，我们可以利用这一点去获取数组中的NaN<br>return arr != arr;</p><p><strong>null</strong></p><ul><li>var e= null;console.log(“e的数据类型为”+typeof(e));</li></ul><p>e的数据类型为Object</p><p>有以下介绍为：<br>值null是一个JavaScript字面量，表示空值，既没有对象被呈现，它是JavaScript原始值之一</p><p>null和undefined的区别：</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//object </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">===</span>undefined<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">==</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true (==会强制转换类型)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>null值的判断</strong></p><p>单独判断：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"is null"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时判断null和undefined(虽然这样判断是不妥的，但是==会强制转换，使得null和undefined相等)</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者写undefined</span><span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"is null"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Number,null,undefined转换规则</strong></p><p>六种数据类型转number规则：</p><ul><li>1、Number转Number，本来多少就是多少；</li><li>2、String转Number：数字字符串转成对应数字，空字符串转为0，其他均为NaN；</li><li>3、Boolean转Number：true为1，false为0；</li><li>4、null为0，undefined为NaN；</li><li>5、Object（包括对象、函数、数组、正则等）转Number调用其valueof（）方法，如果为NaN，调用toString（）方法，如果还是NaN，则结果为NaN。</li></ul><p>而对于null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</p><h4 id="判断数据类型是数组还是对象-constructor、instanceof、toString"><a href="#判断数据类型是数组还是对象-constructor、instanceof、toString" class="headerlink" title="判断数据类型是数组还是对象(constructor、instanceof、toString())"></a>判断数据类型是数组还是对象(constructor、instanceof、toString())</h4><p>平时遇到需要判断数据类型的时候第一反应是用typeof() 方法，但是用这种方法来判断是数组还是对象是判断不出来的，比如<br>判断出的结果都是object类型， 那么有什么办法可以帮助我们来区分这两种类型呢？</p><ol><li>方法1：constructor</li></ol><p>官方对其解释是constructor属性返回对创建此对象的数组函数的引用，但是有点不是很明白，其实constructor本来就是用来进行对象类型判断的，但是还有一个作用就是官方的解释：<br>每个对象实例都可以通过constructor对象访问它的构造函数，比如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Array()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>方法2：instanceof</li></ol><p>根据返回的布尔值来判断，使用instanceof可以用来判断一个变量是数组还是对象，原理如下：数组也是对象的一种，使用instanceof都会返回true</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token string">'bb'</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token string">'cc'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>toString()</li></ol><p>Object.prototype.toString.call()方法可以精准判断变量类型，它返回[object constructorName]的字符串格式，这里的constructorName就是call参数的函数名</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[object Array]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[object Object]</span><span class="token comment" spellcheck="true">// 可以看到 当call()当中用数组的时候打印出的是Array,  用对象的时候打印出的是Object;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="instanceOf和constructor的区别"><a href="#instanceOf和constructor的区别" class="headerlink" title="instanceOf和constructor的区别"></a>instanceOf和constructor的区别</h4><p><a href="https://www.cnblogs.com/menggirl23/p/10144282.html" target="_blank" rel="noopener">对比详解</a></p><h4 id="原型链断裂的原因"><a href="#原型链断裂的原因" class="headerlink" title="原型链断裂的原因"></a>原型链断裂的原因</h4><p><a href="http://www.zhangyunling.com/61.html" target="_blank" rel="noopener">原文</a></p><p>之前提到的对象的继承中，我们提到的常用的继承方式，就是组合继承，组合继承中，对于原型链中属性和方法的继承使用的就是原型链继承的方法，而原型链继承是有几个常见的问题的，并且一个必须要注意的问题，就是原型链的断链问题。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//有以下方法定义如下：</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhang"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token punctuation">}</span>A<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span>A<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    setAge<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    sayAge<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看起来很不错，age属性在实例内部，实例化后，每个实例有自己特有的age属性值（这里会有个默认值，可以通过setAge更改），而setAge和getAge在原型链上，每一个实例都可以共享这两个方法，看起来一切都这么完美。</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//zhang</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//28,读取的默认值</span>a<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//重新设置age的属性值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//22  读取新的属性值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//出错了，提示对象没有sayName方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出错了，没有sayName方法，原型链断链了。这就是原型链断链会出现的症状，至于原因呢?如下：</p><ul><li>一句话来总结出现断链的情况：对象的prototype被重新赋值（也就是赋值表达式），就会导致原型链断链。</li><li>有一段代码来表示：obj.prototype = newObj;</li><li>那么obj的原型链就会断了，如果之前prototype中，有定义一些属性或者方法，这行代码之后，就不会存在之前的那些属性和方法了。</li></ul><h4 id="如果让你实现一个promise怎么样实现-待理解"><a href="#如果让你实现一个promise怎么样实现-待理解" class="headerlink" title="如果让你实现一个promise怎么样实现(待理解)"></a>如果让你实现一个promise怎么样实现(待理解)</h4><p>简单来说，Promise 主要就是为了解决异步回调的问题。用 Promise 来处理异步回调使得代码层次清晰，便于理解，且更加容易维护。</p><p><a href="https://www.cnblogs.com/huansky/p/6064402.html" target="_blank" rel="noopener">原文</a></p><h4 id="如何学前端的，看了哪些书"><a href="#如何学前端的，看了哪些书" class="headerlink" title="如何学前端的，看了哪些书"></a>如何学前端的，看了哪些书</h4><h4 id="博客写了多少篇"><a href="#博客写了多少篇" class="headerlink" title="博客写了多少篇"></a>博客写了多少篇</h4><h4 id="你的技术亮点在哪里"><a href="#你的技术亮点在哪里" class="headerlink" title="你的技术亮点在哪里"></a>你的技术亮点在哪里</h4><h4 id="写一下实现合理化"><a href="#写一下实现合理化" class="headerlink" title="写一下实现合理化"></a>写一下实现合理化</h4><h4 id="你对三大框架的理解是什么-重点"><a href="#你对三大框架的理解是什么-重点" class="headerlink" title="你对三大框架的理解是什么(重点)"></a>你对三大框架的理解是什么(重点)</h4><p><a href="https://blog.csdn.net/sinat_42338962/article/details/95732142" target="_blank" rel="noopener">详解1</a></p><p>前端三大框架，指的是Angular、React、Vue</p><p><strong>Angular</strong></p><p>Angular原名AngularJS，诞生于2009年，Angular的出现，最大的特点就是把后端的一些开发模式移植到前端来实现，如MVC、依赖注入等，创新式的双向绑定简化了许多代码，但是现在被React、Vue后起之秀甩在脑后<br>Angular全面支持typescript和ES6语法，相比于React、Vue，它更完整。它自带许多功能模块，功能强大，各个文件单独存在，代码简洁。但是它的控制台报错信息太差了，大部分情况是无法看出问题出在哪里，这就给开发增加了难度，而react和vue相对来说，就更明确的知道错误在哪里<br>学习成本高，开发重</p><p><strong>React</strong></p><p>React是Facebook出牌，正式推出是2013年，相比于Angular较晚一些，但得益于其创新式的VituralDOM,性能方面比Angular较好。特点很多，VituralDOM、JSX、Diff算法等，支持ES6语法，采用函数式编程，门槛稍高，但也相对灵活，能让开发具有更多的可能性<br>虽然它本身功能有限，但是它有一个庞大是生态系统，无数开发人员为它提供开源包，这点是和vue类似的。但是JSX语法，代码可读性差<br>Vitual DOM,vue会跟踪每个组件的依赖关系，不需要重新渲染整个组件树，而对于react而言，每当应用的状态被改变时，全部组件都会被重新渲染，</p><p><strong>Vue</strong></p><p>Vue作为最后推出的框架(2014)，借鉴了前辈Angular、React的特点(如VirtualDOM、双向绑定、diff算法、响应式属性、组件化开发等)，并作了相关优化，更容易上手，比较适合初学者。有很多人说Vue不太适合做大型项目，但是Vue在这方面已经做的很好，当然，大量的响应式属性(监听属性)也许会用一定的性能损耗，但在硬件、网络大力发展的今天，这些细微的性能差异几乎感觉不到<br>vue是三大框架中最小的，最容易上手的，vue会跟踪每个组件的依赖关系，不需要重新渲染整个组件树<br>vue实现了数据的双向绑定，react数据流动是单向的</p><p><strong>总结</strong></p><ul><li>都是组件化开发，都能很好地解决分工与维护的问题</li><li>React、Vue轻量，体积小本来应该是算在react和vue的优点中，但是在一个大型的项目中，就比如一般的react要用的是react+redux+react-router或许还要加上发送请求的axios，如果有一些其他的需求还要再加包，vue也同样，vue+vuex+vue-router+vue-axios，这就导致react和vue体积小的优点在逐步减小。</li></ul><p>Angular工作重点在整个应用设计开发这一部分<br>React、Vue工作重点在页面设计显示这一部分<br>相比之下，Angular更大更安全，感觉上更复杂一些，学起来也好像更难一些<br>当然，三大应用框架，都可以使用vscode来开发，通过安装插件，可提高编程效率</p><h4 id="前端性能理解，优化有哪些-重点"><a href="#前端性能理解，优化有哪些-重点" class="headerlink" title="前端性能理解，优化有哪些(重点)"></a>前端性能理解，优化有哪些(重点)</h4><p><a href="https://csspod.com/frontend-performance-best-practices/" target="_blank" rel="noopener">详解</a></p><p>页面内容</p><ul><li>减少HTTP请求</li><li>减少DNS查询</li><li>避免重定向</li><li>缓存Ajax请求</li><li>延迟加载</li><li>预先加载</li><li>减少DOM元素数量</li><li>划分内容到不同的域名</li><li>减少iframe的使用</li><li>避免404错误</li></ul><p>服务器</p><ul><li>使用CDN</li><li>添加Expires或Cache-Control响应头</li><li>启用Gzip</li><li>配置Etag</li><li>尽早输出缓存</li><li>Ajax请求使用GET方法</li><li>避免图片src为空</li></ul><p>cookie</p><ul><li>减少cookie大小</li><li>静态资源使用无cookie域名</li></ul><p>css</p><ul><li>把样式表放在<head><meta name="generator" content="Hexo 3.9.0">中<link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"><link rel="stylesheet" href="/css/prism-line-numbers.css" type="text/css"></head></li><li>不要使用css表达式</li><li>使用<link>替代@import</li><li>不使用filter</li></ul><p>JavaScript</p><ul><li>把脚本放在页面底部</li><li>使用外部JavaScript和css</li><li>压缩JavaScript和css</li><li>移除重复脚本</li><li>减少DOM操作</li><li>使用高效的事件处理</li></ul><p>图片</p><ul><li>优化图片</li><li>优化css sprite</li><li>不要在html中缩放图片</li><li>使用体积小、可缓存的favicon.ico</li></ul><p>移动端</p><ul><li>保持单个文件小于25k</li><li>打包内容未分段文档</li></ul><p>为什么要提高前端性能呢?</p><ul><li>首先页面加载，不仅事关用户体验，也是搜索引擎排名考虑的一个因素</li><li>来自谷歌的数据表明，一个有10条数据0.4秒能加载完页面，变成30条数据0.9秒加载完之后，流量和广告收入下降90%</li><li>谷歌Map首页文件大小从100k减小到70k-80k后，流量在第一周涨了10%，接下来的三周涨了25%</li><li>亚马孙的数据表明：加载时间增加100毫秒，销量就下降1%</li><li>加载时间就是金钱</li></ul><h4 id="你遇到的最有难度的技术问题是什么"><a href="#你遇到的最有难度的技术问题是什么" class="headerlink" title="你遇到的最有难度的技术问题是什么"></a>你遇到的最有难度的技术问题是什么</h4><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><ol><li>无限循环跳转解决</li></ol><p>当前台跳转时，出现不断的无限循环跳转</p><p>原因：在一次登录过程中，如果没有把跳转的js代码放在判断中，判断当前页面是否是当前登录的页面，否则在浏览器加载跳转页面时，执行到该js代码时，又会重新进行一次跳转，这就造成了无限循环</p><p>解决办法：在跳转前加上判断，判断当前页面是否是要跳转的页面</p><ol start="2"><li>HTTP中的重定向和请求转发的区别</li></ol><p>本质区别：转发是服务器的行为，重定向是客户端的行为</p><p>转发过程：客户浏览器发送HTTP请求 -&gt; web服务器接受此请求 -&gt;调用内部的一个方法在容器内部完成请求处理和转发动作 -&gt; 将目标资源发送给客户；<br>在这里，转发的如今必须是同一个web容器下的url，其不能转向到其他web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是所客户是感觉不到服务器做了转发的。<br>转发的行为是浏览器只做了一次访问请求</p><p>重定向过程：客户浏览器发送HTTP请求 -&gt; web服务器接受否发送302状态码响应及对应新的location给客户浏览器 -&gt; 客户浏览器发现是302响应，则自动再发送一个新的HTTP请求，请求url是新的location地址 -&gt; 服务器根据此请求寻转资源并发送给客户。<br>在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有神秘request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化，<br>重定向行为是浏览器做了至少两次访问请求的</p><p>解释2：<br>假设你去办理某个执照，</p><p>重定向：你先去了A局，A局的人说:这个事不归我们管，你去B局，然后你就从A退了出来，自己乘车去了B局</p><p>转发：你先去了A局，A局看了之后，知道这个事情其实应该归B局来管，但是他没有把你退回来，而是让你坐了一会，自己到后边的办公室联系了B的人，让他们办好后，送了过来</p><h4 id="redux原理讲讲"><a href="#redux原理讲讲" class="headerlink" title="redux原理讲讲"></a>redux原理讲讲</h4><p><a href="https://zhuanlan.zhihu.com/p/50247513" target="_blank" rel="noopener">详解</a></p><p>为什么要用redux？</p><ul><li>在react中，数据在组件中是单向流动的，数据从一个方向父组件流向子组件(通过props),所以两个非父子组件之间通信就相对麻烦，redux的出现就是为了解决state里面的数据问题</li></ul><p>redux设计理念？</p><ul><li>redux是将整个应用状态存储到一个地方称为store，里面保存着一个状态树store tree，组件可以派发(dispatch)行为(action)给store,而不是直接通知其他组件，组件内部通过订阅store中的状态来刷新自己的视图。</li></ul><p>redux三大原则</p><ul><li>唯一数据源<ul><li>整个应用的state都被存储到一个状态树里面，并且这个状态树，只存在于唯一的store中</li></ul></li><li>保持只读状态<ul><li>state是只读的，唯一改变state的方法就是触发action，action是一个用于描述以发生时间的普通对象</li></ul></li><li>数据改变只能通过纯函数来执行<ul><li>使用纯函数来执行修改，为了描述action如何改变state的，你需要编写reducers</li></ul></li></ul><h4 id="了解web移动开发吗，移动端适配方案有哪些"><a href="#了解web移动开发吗，移动端适配方案有哪些" class="headerlink" title="了解web移动开发吗，移动端适配方案有哪些"></a>了解web移动开发吗，移动端适配方案有哪些</h4><p><a href="https://segmentfault.com/a/1190000008767416?utm_source=tag-newest" target="_blank" rel="noopener">原文</a></p><p>flutter、React Native、uni-app等</p><p>下面大致列下前端在实现适配上常采用的方式。百分比、em单位的使用就不必说了。</p><p><strong>viewport设置理想视口</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置理想视口，使得DOM宽度与屏幕宽度一样大，DOM文档主宽度即为屏幕宽度，1个css像素(1px)由多少设备像素显示由具体设备而不同</p><p><strong>动态设置视口缩放为1/dpr</strong></p><p>对于安卓，所有设备缩放设为1，对于IOS，根据dpr不同，设置其缩放为dpr的倒数，设置页面缩放可以使得1个css像素(1px)由1个设备像素来显示，从而提高显示精度；因此，设置1/dpr的缩放视口，可以画出1px的边框</p><p>不管页面中有没有设置viewport，若无，则设置，若有，则改写，设置其scale为1/dpr</p><p><strong>px单位的适配</strong></p><p>设置动态缩放视口后，在iPhone6上，缩放为0.5，即CSS像素2px最终显示效果为1px，而在scale=1的设备，CSS像素1px显示效果为1px，那么，为了达到显示效果一致，以px为单位的元素(比如字体大小)，其样式应有适配不同dpr的版本，因此，在动态设置viewport: scale的时候，同时在html根元素上加上data-dpr=[dpr]，但是这种方式还是不够，如果dpr为2，3之外的其他数值，px就没办法适配到。<br>因此我会选择都用rem为单位进行适配。<br>样式示例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>p <span class="token punctuation">{</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token punctuation">[</span>data<span class="token operator">-</span>dpr<span class="token operator">=</span><span class="token string">"2"</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">[</span>data<span class="token operator">-</span>dpr<span class="token operator">=</span><span class="token string">"3"</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>rem(一个CSS单位)</strong></p><p>定义：font size of the root element.<br>这个单位的定义和em类似，不同的是em是相对于父元素，而rem是相对于根元素。rem定义是根元素的font-size, 以rem为单位，其数值与px的关系，需相对于根元素<html>的font-size计算，比如，设置根元素font-size=16px, 则表示1rem=16px。关于rem更多的解读，建议可以阅读本文末附的腾讯一团队的文章《web app变革之rem》。<br>根据这个特点，可以根据设备宽度动态设置根元素的font-size，使得以rem为单位的元素在不同终端上以相对一致的视觉效果呈现。</html></p><ul><li>根元素fontSize公式：width/fontSize = baseWidth/baseFontSize</li><li>其中，baseWidth, baseFontSize是选为基准的设备宽度及其根元素大小，width, fontSize为所求设备的宽度及其根元素大小</li></ul><p><strong>flex布局</strong></p><p>flex布局对于屏幕适配也很有帮助，有些地方通过flex布局的实现方式，效果会比较合理。</p><p><strong>vm/vh:CSS单位</strong></p><p>vw(view-width), vh(view-height) 这两个单位是CSS新增的单位，表示视区宽度/高度，视区总宽度为100vw, 总高度为100vh。</p><p>视区指浏览器内部的可视区域大小：window.innerWidth/Height</p><h4 id="你有Native开发经验吗，讲下Android如何调用页面的资源"><a href="#你有Native开发经验吗，讲下Android如何调用页面的资源" class="headerlink" title="你有Native开发经验吗，讲下Android如何调用页面的资源"></a>你有Native开发经验吗，讲下Android如何调用页面的资源</h4><p>没有</p><h4 id="行内元素和块级元素有哪些，img属于什么元素"><a href="#行内元素和块级元素有哪些，img属于什么元素" class="headerlink" title="行内元素和块级元素有哪些，img属于什么元素"></a>行内元素和块级元素有哪些，img属于什么元素</h4><p><a href="https://gitee.com/xiaoxcx/learning_documents/blob/master/display(%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0).md" target="_blank" rel="noopener">详解</a></p><ul><li>常见的块级元素有 p 、div、 h1、 li等</li><li>常见的行内元素有a、em、img等</li></ul><h4 id="margin坍塌"><a href="#margin坍塌" class="headerlink" title="margin坍塌"></a>margin坍塌</h4><p>举例如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrapper</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span><span class="token number">0.8</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/7.jpg" alt></p><p>这里距离上边100px;现在给里面的小方块设置margin-top:100px;然后发现两个方块的位置没变动；<br>当给里边的小方块设置margin-top:150px;小方块带着大方块往下移了50px</p><p><strong>原理：父子嵌套元素在垂直方向的margin，父子元素是结合在一起的，他们的两个margin会取其中的最大的值</strong><br>正常情况下，父级元素应该相对于浏览器进行定位，子级相对父级进行定位，但是由于margin坍塌，父级相对浏览器定位，而子级没有相对父级定位，就像坍塌了一样</p><p><strong>解决办法：</strong></p><p>给父级设置边框或者内边距(不推荐使用)</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrapper</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">1</span>px solid black<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>触发bfc(块级格式上下文)，改变父级的渲染规则，方法：改变父级的渲染规则有以下四种方法：给父级盒子添加</p><ul><li>position:absolute/fixed</li><li>display:inline-block</li><li>float:left/right</li><li>overflow:hidden</li></ul><p>这四种方法都能触发bfc，但是使用的时候都会带来不同的麻烦，具体使用中还需根据情况选择没有影响的来解决margin坍塌</p><h6 id="margin合并"><a href="#margin合并" class="headerlink" title="margin合并"></a>margin合并</h6><p><strong>原理：两个兄弟结构的元素在垂直方向上的margin是合并的</strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html&lt;div class="box1">&lt;/div>&lt;div class="box2">&lt;/div>css*</span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box2</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>margin合并问题也可以使用bfc方法来解决</p><ul><li>给box2加上一层父级元素并加上overflow:hidden;</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;div class="box1">&lt;/div>&lt;div class="wrapper">    &lt;div class="box2">&lt;/div>&lt;/div><span class="token class">.wrapper</span></span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>给两个都加一层父级再加bfc</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这两种方法都改变了HTML结构,在开发中是不能采用的<br>所以在实际应用时,在margin合并这个问题上,我们一般不用bfc,而是通过只设置上面的元素的margin-bottom来解决距离的问题</p><h4 id="BFC原理"><a href="#BFC原理" class="headerlink" title="BFC原理"></a>BFC原理</h4><h4 id="写一下节点的增删改"><a href="#写一下节点的增删改" class="headerlink" title="写一下节点的增删改"></a>写一下节点的增删改</h4><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024977411904" target="_blank" rel="noopener">详解</a></p><p>操作DOM。由于HTML文档被浏览器解析后就是一个DOM树，要改变HTML结构，就要通过JavaScript来操作DOM<br>始终记住DOM是一个树形结构，操作一个DOM节点实际上有以下几个操作：</p><ul><li>更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML内容</li><li>遍历：遍历该DOM节点下的子元素，以便进行下一步操作</li><li>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点</li><li>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点</li></ul><p>在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点，最常用的方法就是document.getElementById()和document.getElementsByTagName(),以及css选择器document.getElementByClassName()</p><p>由于ID在HTML文档中是唯一的，所以document.getElementById()可以直接定位唯一的一个DOM节点，document.getElementByTagName()和document.getElementsByClassName()总是返回一组DOM节点，要精确地选择DOM，可以先定位其父节点，再从父节点开始选择，以缩小范围</p><p>例如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回ID为test的节点</span><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先定位ID为test-table的节点，再返回其内部所有的tr节点</span><span class="token keyword">var</span> trs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test-table"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//先定位ID为test-div的节点，再返回其内部所有class包含red的节点</span><span class="token keyword">var</span> reds <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test-div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementByClassName</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取节点test下的所有直属子节点</span><span class="token keyword">var</span> cs <span class="token operator">=</span> test<span class="token punctuation">.</span>child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取节点test下第一个、最后一个子节点</span><span class="token keyword">var</span> first <span class="token operator">=</span> test<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span><span class="token keyword">var</span> last <span class="token operator">=</span> test<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方法是使用querySelector()和querySelectorAll(),需要了解selector语法，然后使用条件来获取节点，更加方便</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过querySelctor()获取ID为q1的节点</span><span class="token keyword">var</span> q1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#q1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过querySelectorAll获取q1节点内的符合条件的所有节点</span><span class="token keyword">var</span> ps <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div.highlighted > p"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>更新DOM<br>拿到一个DOM节点后，可以对其进行更新，可以直接修改节点的文本，方法有以下两种：<br>一种是修改innerHtml属性，这个方式很强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树：</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取&lt;p id="p-id">&lt;/p></span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置文本为abc</span>p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span>P<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"ABC&lt;span style="</span>color<span class="token punctuation">:</span>red<span class="token string">">RED&lt;/span>XYZ"</span><span class="token punctuation">;</span>p的内部结构已修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用innerHTML时要注意，是否需要写入HTML，如果写入的字符串是通过网络拿到了，要注意对字符编码来避免XSS攻击<br>第二种是修改innerText或textContent属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取&lt;p id="p-id">...&lt;/p></span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'p-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置文本:</span>p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;script>alert("Hi")&lt;/script>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// HTML被自动编码，无法设置一个&lt;script>节点:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。另外注意IE&lt;9不支持textContent。</p><p>修改CSS也是经常需要的操作。DOM节点的style属性对应所有的CSS，可以直接获取或设置。因为CSS允许font-size这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名fontSize：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取&lt;p id="p-id">...&lt;/p></span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'p-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置CSS:</span>p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#ff0000'</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">'20px'</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>paddingTop <span class="token operator">=</span> <span class="token string">'2em'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入DOM</li></ol><p>当我们获得了某个DOM节点，想在这个DOM节点内插入新的DOM，应该如何做？<br>如果这个DOM节点是空的，例如，<div></div>，那么，直接使用innerHTML = ‘<span>child</span>‘就可以修改DOM节点的内容，相当于“插入”了新的DOM节点。<br>如果这个DOM节点不是空的，那就不能这么做，因为innerHTML会直接替换掉原来的所有子节点。<br>有两个办法可以插入新的节点。一个是使用appendChild，把一个子节点添加到父节点的最后一个子节点。例如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>把<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>添加到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>的最后一项：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span>    js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，HTML结构变成了这样：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何获取元素的父节点和兄弟节点"><a href="#如何获取元素的父节点和兄弟节点" class="headerlink" title="如何获取元素的父节点和兄弟节点"></a>如何获取元素的父节点和兄弟节点</h4><p>先获取此元素节点，然后使用parentNode来获取文档层次中的父元素<br>previousSibling   上一个兄弟节点<br>nextSibling    下一个兄弟节点</p><h4 id="JS如何获得用户来源"><a href="#JS如何获得用户来源" class="headerlink" title="JS如何获得用户来源"></a>JS如何获得用户来源</h4><p>使用 navigator.userAgent来获取用户源<br>使用 navigator.appVersion来获取app版本</p><h4 id="前端缓存"><a href="#前端缓存" class="headerlink" title="前端缓存"></a>前端缓存</h4><p><a href="https://www.jianshu.com/p/256d0873c398" target="_blank" rel="noopener">缓存详解</a></p><p>前端缓存主要是分为HTTP缓存和浏览器缓存。其中HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置；而浏览器缓存则主要由前端开发在前端js上进行设置。<br>缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。<br>对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</p><p><img src="%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_files/8.jpg" alt></p><h4 id="给你一个乱序数组，你怎么样排序"><a href="#给你一个乱序数组，你怎么样排序" class="headerlink" title="给你一个乱序数组，你怎么样排序"></a>给你一个乱序数组，你怎么样排序</h4><p><a href="https://blog.csdn.net/b954960630/article/details/79416755" target="_blank" rel="noopener">详解</a></p><ol><li>按字符编码排序:sort()<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> testArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>testArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-2,1000,23,300,34,500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>将数组元素倒序排：reverse()<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> testArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>testArray<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1000,500,300,34,53,-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>在sort()里面加个比较函数（从小到大排）<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> testArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传给sort一个比较函数，如果比较函数return值小于0，则表示a必须出现在b前面，否则在b后面。</span>testArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-2,23,34,300,500,1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>快速排序</li></ol><p>效率相比上面的方法最高。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> testArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'df'</span><span class="token punctuation">,</span> <span class="token string">'rtr'</span><span class="token punctuation">,</span> <span class="token string">'wy'</span><span class="token punctuation">,</span> <span class="token string">'dafd'</span><span class="token punctuation">,</span> <span class="token string">'dfs'</span><span class="token punctuation">,</span> <span class="token string">'wefa'</span><span class="token punctuation">,</span> <span class="token string">'tyr'</span><span class="token punctuation">,</span> <span class="token string">'rty'</span><span class="token punctuation">,</span> <span class="token string">'rty'</span><span class="token punctuation">,</span> <span class="token string">'ryt'</span><span class="token punctuation">,</span> <span class="token string">'afds'</span><span class="token punctuation">,</span> <span class="token string">'wer'</span><span class="token punctuation">,</span> <span class="token string">'te'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> testArray2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快速排序函数</span><span class="token keyword">var</span> quickSort <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将基准分离出</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用输出</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>testArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//afds,dafd,df,dfs,rtr,rty,rty,ryt,te,tyr,wefa,wer,wy</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>testArray2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-2,23,34,300,500,1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="你的项目有什么亮点"><a href="#你的项目有什么亮点" class="headerlink" title="你的项目有什么亮点"></a>你的项目有什么亮点</h4><h4 id="你的文件上传方案是什么"><a href="#你的文件上传方案是什么" class="headerlink" title="你的文件上传方案是什么"></a>你的文件上传方案是什么</h4><ul><li>文件上传，最好用类似七牛或者阿里云OSS这样的CDN去做</li><li>基于node的multer模块</li><li>multer用于处理文件上传的nodejs中间件,主要跟express框架搭配使用，只支持表单MIME编码为multipart/form-data类型的数据请求.</li><li>结合fs模块，fs模块用于对系统文件及目录进行读写操作。</li></ul><h4 id="写一个方法提取一下search里面的参数"><a href="#写一个方法提取一下search里面的参数" class="headerlink" title="写一个方法提取一下search里面的参数"></a>写一个方法提取一下search里面的参数</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">urlArgs</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> query <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> pairs <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pairs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> pos <span class="token operator">=</span> pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> args<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">urlArgs</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/s?ie=UTF-8&amp;wd=写一个方法提取一下search里面的参数"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####　写一个API实现insertAfter</p><p>在js的dom api中有insertBefore()方法 在已知子节点的前面插入新的子节点。<br>然而并没有提供insertAfter()方法，在实际开发中遇到了这个问题，自己编写了一个insertAfter方法，运用现有的dom方法属性。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 指定的现有节点之后插入新的节点 *  * @param {Node} newNode 需要插入的节点对象 * @param {Node} existingNode 现有的节点 */</span><span class="token keyword">function</span> <span class="token function">insertAfter</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>existingNode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取现有节点的父元素</span>    <span class="token keyword">const</span> parent <span class="token operator">=</span> existingNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果父元素中的最后一个子元素等于现有的节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>lastChild <span class="token operator">===</span> existingNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把现有节点放入父元素中子节点的后面</span>        <span class="token comment" spellcheck="true">//appendChild在子节点后面追加一个元素</span>        parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//.nextSibling该属性返回指定节点后的第一个节点</span>        <span class="token comment" spellcheck="true">//insertBefore第一个参数插入的节点对象，第二个参数可选，在其之前插入子节点，如果不传，则在结尾插入</span>        parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>existingNode<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS3哪些用的比较多"><a href="#CSS3哪些用的比较多" class="headerlink" title="CSS3哪些用的比较多"></a>CSS3哪些用的比较多</h4><p>CSS3 边框 (创建圆角边框，向矩形添加阴影，使用图片来绘制边框 - 并且不需使用设计软件)</p><ul><li>border-radius</li><li>box-shadow</li><li>border-image</li></ul><p>CSS3 背景</p><ul><li>background-size属性规定背景图片的尺寸</li><li>background-origin属性规定背景图片的定位区域。背景图片可以放置于 content-box、padding-box 或 border-box 区域。</li></ul><p>CSS3 文本效果</p><ul><li>text-shadow</li><li>word-wrap属性允许您允许文本强制文本进行换行 - 即使这意味着会对单词进行拆分</li></ul><p>2D 转换</p><ul><li>translate()</li><li>rotate()</li><li>scale()</li><li>skew()</li><li>matrix()</li></ul><p>CSS3 3D 转换</p><ul><li>rotateX()</li><li>rotateY()</li></ul><p>CSS3过渡和动画</p><p>####　CSS动画会吗，怎么样用CSS实现一个loading效果</p><p>CSS3-loading目录</p><h4 id="如何处理CSS兼容问题"><a href="#如何处理CSS兼容问题" class="headerlink" title="如何处理CSS兼容问题"></a>如何处理CSS兼容问题</h4><ol><li>清除浮动的兼容性（低版本的浏览器不兼容问题）<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>clearfix<span class="token punctuation">:</span>after<span class="token punctuation">{</span>　　content<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>　　clear<span class="token punctuation">:</span>both<span class="token punctuation">;</span>　　display<span class="token punctuation">:</span>block<span class="token punctuation">;</span>　　visibility<span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>　　height<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>clear<span class="token punctuation">{</span> <span class="token operator">*</span>zoom<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>透明度的兼容性<pre class="line-numbers language-js"><code class="language-js">opacity<span class="token punctuation">:</span><span class="token number">0.3</span><span class="token punctuation">;</span>filter<span class="token punctuation">:</span><span class="token function">alpha</span><span class="token punctuation">(</span>opacity<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>各种国外浏览器在CSS3中的兼容问题<pre><code>国内的浏览器的内核都是谷歌Chrome的前缀-webkit-Firefox的前缀-moz-IE的前缀-ms-Opera的前缀-o-</code></pre><h4 id="webpack有个插件可以解决css兼容性问题你知道吗"><a href="#webpack有个插件可以解决css兼容性问题你知道吗" class="headerlink" title="webpack有个插件可以解决css兼容性问题你知道吗"></a>webpack有个插件可以解决css兼容性问题你知道吗</h4></li></ol><ul><li>postcss-loader<h4 id="前端安全这块了解多少"><a href="#前端安全这块了解多少" class="headerlink" title="前端安全这块了解多少"></a>前端安全这块了解多少</h4><a href="https://www.cnblogs.com/zhuanzhuanfe/p/7286611.html" target="_blank" rel="noopener">详解</a></li></ul><p>写一个API，实现jQuery的$(selector)选择器，要求兼容IE6</p><h4 id="浏览器是如何实现通过你的代码去找到指定的元素的"><a href="#浏览器是如何实现通过你的代码去找到指定的元素的" class="headerlink" title="浏览器是如何实现通过你的代码去找到指定的元素的"></a>浏览器是如何实现通过你的代码去找到指定的元素的</h4><p>debug F12调试？</p><h4 id="用JS模拟一个双向链表"><a href="#用JS模拟一个双向链表" class="headerlink" title="用JS模拟一个双向链表"></a>用JS模拟一个双向链表</h4><p><a href="https://www.jianshu.com/p/298623cc2026" target="_blank" rel="noopener">原文</a></p><h4 id="前端工程化思想"><a href="#前端工程化思想" class="headerlink" title="前端工程化思想"></a>前端工程化思想</h4><p><a href="https://segmentfault.com/a/1190000016226284" target="_blank" rel="noopener">原文</a></p><p>模块化思想</p><p>你为什么选择前端</p>]]></content>
      
      
      <categories>
          
          <category> 前端++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
